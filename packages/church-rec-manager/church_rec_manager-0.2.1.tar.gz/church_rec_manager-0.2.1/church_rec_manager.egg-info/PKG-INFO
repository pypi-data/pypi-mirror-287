Metadata-Version: 2.1
Name: church_rec_manager
Version: 0.2.1
Summary: python application to manage your records of the church
Home-page: https://github.com/34ERAT/church_rec_management_system
Author: philip kanuti
Author-email: kanutiphilip24@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: attrs==23.2.0
Requires-Dist: autopep8==2.3.1
Requires-Dist: Babel==2.15.0
Requires-Dist: contextlib2==21.6.0
Requires-Dist: CTkMessagebox==2.7
Requires-Dist: CTkTable==1.1
Requires-Dist: customtkinter==5.2.2
Requires-Dist: darkdetect==0.8.0
Requires-Dist: execnet==2.1.1
Requires-Dist: greenlet==3.0.3
Requires-Dist: iniconfig==2.0.0
Requires-Dist: jsonschema==4.23.0
Requires-Dist: jsonschema-specifications==2023.12.1
Requires-Dist: mock==5.1.0
Requires-Dist: msgpack==1.0.8
Requires-Dist: mysql-connector-python==9.0.0
Requires-Dist: packaging==24.1
Requires-Dist: path==17.0.0
Requires-Dist: path.py==12.5.0
Requires-Dist: pillow==10.4.0
Requires-Dist: pluggy==1.5.0
Requires-Dist: psutil==6.0.0
Requires-Dist: pycodestyle==2.12.0
Requires-Dist: PyMySQL==1.1.1
Requires-Dist: pynvim==0.5.0
Requires-Dist: pytest==8.3.2
Requires-Dist: pytest-shutil==1.7.0
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: referencing==0.35.1
Requires-Dist: rpds-py==0.19.0
Requires-Dist: six==1.16.0
Requires-Dist: termcolor==2.4.0
Requires-Dist: tk==0.1.0

# THIS IS THE BACK END OF AND FRONT END OF CHURCH RECORD MANAGEMENT SYSTEM
The **church management system**  use *MYSQL* database as is core database management system  
and is developed on python on the **BACKEND**
# INSTALLATION
--
# usage
*** there are  ten middlewares for this module ***   and are pertty similar in functionality This functionality(methods ) includes   get_all, get, insert, delete and update
* **get_all**  :  retrives  all the records of the specified  record class
* **get** : retrives a single record from  takes the  record id as the parameters
* **insert** : inserts a single record  takes the record  dictionary  as a parameter
* **update** :  update an existing record 
* **delete** : deletes and existing record
###  person middleware 

* print(prsn.get("98f8c04e-1c27-11ef-a8d4-94b86de0e66a")) : *gets the record  using the id **"98f8c04e-1c27-11ef-a8d4-94b86de0e66a"** and prints the result*
* print(prsn.delete("98f8c04e-1c27-11ef-a8d4-94b86de0e66a")) :*deletes the record  using the id **"98f8c04e-1c27-11ef-a8d4-94b86de0e66a"** and prints the result*
* data = {
*     "FIRST_NAME": "alibama",
*     "LAST_NAME": "varma",
*     "DATE_OF_BIRTH": "2024-05-27",
*     "GENDER": "FEMALE",
*     "CLAN_ID": None,
* } :
* prsn.update(data,"5eb5c9b0-1c27-11ef-a8d4-94b86de0e66a")
* prsn.insert(data)
* print(prsn.get_all())
