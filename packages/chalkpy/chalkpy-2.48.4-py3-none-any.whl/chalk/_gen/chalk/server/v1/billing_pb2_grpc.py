# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from chalk._gen.chalk.server.v1 import (
    billing_pb2 as chalk_dot_server_dot_v1_dot_billing__pb2,
)


class BillingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNodes = channel.unary_unary(
            "/chalk.server.v1.BillingService/GetNodes",
            request_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesResponse.FromString,
        )
        self.GetNodesAndPods = channel.unary_unary(
            "/chalk.server.v1.BillingService/GetNodesAndPods",
            request_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsResponse.FromString,
        )
        self.GetUsageChart = channel.unary_unary(
            "/chalk.server.v1.BillingService/GetUsageChart",
            request_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartResponse.FromString,
        )
        self.GetUtilizationRates = channel.unary_unary(
            "/chalk.server.v1.BillingService/GetUtilizationRates",
            request_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesResponse.FromString,
        )


class BillingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodesAndPods(self, request, context):
        """Gets the nodes and pods for the team."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetUsageChart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetUtilizationRates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BillingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetNodes": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodes,
            request_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesResponse.SerializeToString,
        ),
        "GetNodesAndPods": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodesAndPods,
            request_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsResponse.SerializeToString,
        ),
        "GetUsageChart": grpc.unary_unary_rpc_method_handler(
            servicer.GetUsageChart,
            request_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartResponse.SerializeToString,
        ),
        "GetUtilizationRates": grpc.unary_unary_rpc_method_handler(
            servicer.GetUtilizationRates,
            request_deserializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "chalk.server.v1.BillingService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class BillingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.BillingService/GetNodes",
            chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodesAndPods(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.BillingService/GetNodesAndPods",
            chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_billing__pb2.GetNodesAndPodsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetUsageChart(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.BillingService/GetUsageChart",
            chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_billing__pb2.GetUsageChartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetUtilizationRates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.BillingService/GetUtilizationRates",
            chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_billing__pb2.GetUtilizationRatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
