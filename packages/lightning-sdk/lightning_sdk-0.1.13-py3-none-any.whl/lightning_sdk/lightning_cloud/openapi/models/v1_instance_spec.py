# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1InstanceSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_cpu': 'int',
        'name': 'str',
        'overprovisioned_ondemand_count': 'int',
        'root_volume_size': 'int'
    }

    attribute_map = {
        'max_cpu': 'maxCpu',
        'name': 'name',
        'overprovisioned_ondemand_count': 'overprovisionedOndemandCount',
        'root_volume_size': 'rootVolumeSize'
    }

    def __init__(self, max_cpu: 'int' =None, name: 'str' =None, overprovisioned_ondemand_count: 'int' =None, root_volume_size: 'int' =None):  # noqa: E501
        """V1InstanceSpec - a model defined in Swagger"""  # noqa: E501
        self._max_cpu = None
        self._name = None
        self._overprovisioned_ondemand_count = None
        self._root_volume_size = None
        self.discriminator = None
        if max_cpu is not None:
            self.max_cpu = max_cpu
        if name is not None:
            self.name = name
        if overprovisioned_ondemand_count is not None:
            self.overprovisioned_ondemand_count = overprovisioned_ondemand_count
        if root_volume_size is not None:
            self.root_volume_size = root_volume_size

    @property
    def max_cpu(self) -> 'int':
        """Gets the max_cpu of this V1InstanceSpec.  # noqa: E501


        :return: The max_cpu of this V1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_cpu

    @max_cpu.setter
    def max_cpu(self, max_cpu: 'int'):
        """Sets the max_cpu of this V1InstanceSpec.


        :param max_cpu: The max_cpu of this V1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._max_cpu = max_cpu

    @property
    def name(self) -> 'str':
        """Gets the name of this V1InstanceSpec.  # noqa: E501


        :return: The name of this V1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1InstanceSpec.


        :param name: The name of this V1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overprovisioned_ondemand_count(self) -> 'int':
        """Gets the overprovisioned_ondemand_count of this V1InstanceSpec.  # noqa: E501


        :return: The overprovisioned_ondemand_count of this V1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._overprovisioned_ondemand_count

    @overprovisioned_ondemand_count.setter
    def overprovisioned_ondemand_count(self, overprovisioned_ondemand_count: 'int'):
        """Sets the overprovisioned_ondemand_count of this V1InstanceSpec.


        :param overprovisioned_ondemand_count: The overprovisioned_ondemand_count of this V1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._overprovisioned_ondemand_count = overprovisioned_ondemand_count

    @property
    def root_volume_size(self) -> 'int':
        """Gets the root_volume_size of this V1InstanceSpec.  # noqa: E501


        :return: The root_volume_size of this V1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._root_volume_size

    @root_volume_size.setter
    def root_volume_size(self, root_volume_size: 'int'):
        """Sets the root_volume_size of this V1InstanceSpec.


        :param root_volume_size: The root_volume_size of this V1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._root_volume_size = root_volume_size

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1InstanceSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1InstanceSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1InstanceSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1InstanceSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
