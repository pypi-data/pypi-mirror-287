# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1AutoscalingSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'max_replicas': 'str',
        'min_replicas': 'str',
        'target_metric': 'V1AutoscalingTargetMetric'
    }

    attribute_map = {
        'enabled': 'enabled',
        'max_replicas': 'maxReplicas',
        'min_replicas': 'minReplicas',
        'target_metric': 'targetMetric'
    }

    def __init__(self, enabled: 'bool' =None, max_replicas: 'str' =None, min_replicas: 'str' =None, target_metric: 'V1AutoscalingTargetMetric' =None):  # noqa: E501
        """V1AutoscalingSpec - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._max_replicas = None
        self._min_replicas = None
        self._target_metric = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if target_metric is not None:
            self.target_metric = target_metric

    @property
    def enabled(self) -> 'bool':
        """Gets the enabled of this V1AutoscalingSpec.  # noqa: E501


        :return: The enabled of this V1AutoscalingSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: 'bool'):
        """Sets the enabled of this V1AutoscalingSpec.


        :param enabled: The enabled of this V1AutoscalingSpec.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_replicas(self) -> 'str':
        """Gets the max_replicas of this V1AutoscalingSpec.  # noqa: E501


        :return: The max_replicas of this V1AutoscalingSpec.  # noqa: E501
        :rtype: str
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas: 'str'):
        """Sets the max_replicas of this V1AutoscalingSpec.


        :param max_replicas: The max_replicas of this V1AutoscalingSpec.  # noqa: E501
        :type: str
        """

        self._max_replicas = max_replicas

    @property
    def min_replicas(self) -> 'str':
        """Gets the min_replicas of this V1AutoscalingSpec.  # noqa: E501


        :return: The min_replicas of this V1AutoscalingSpec.  # noqa: E501
        :rtype: str
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas: 'str'):
        """Sets the min_replicas of this V1AutoscalingSpec.


        :param min_replicas: The min_replicas of this V1AutoscalingSpec.  # noqa: E501
        :type: str
        """

        self._min_replicas = min_replicas

    @property
    def target_metric(self) -> 'V1AutoscalingTargetMetric':
        """Gets the target_metric of this V1AutoscalingSpec.  # noqa: E501


        :return: The target_metric of this V1AutoscalingSpec.  # noqa: E501
        :rtype: V1AutoscalingTargetMetric
        """
        return self._target_metric

    @target_metric.setter
    def target_metric(self, target_metric: 'V1AutoscalingTargetMetric'):
        """Sets the target_metric of this V1AutoscalingSpec.


        :param target_metric: The target_metric of this V1AutoscalingSpec.  # noqa: E501
        :type: V1AutoscalingTargetMetric
        """

        self._target_metric = target_metric

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AutoscalingSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1AutoscalingSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AutoscalingSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1AutoscalingSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
