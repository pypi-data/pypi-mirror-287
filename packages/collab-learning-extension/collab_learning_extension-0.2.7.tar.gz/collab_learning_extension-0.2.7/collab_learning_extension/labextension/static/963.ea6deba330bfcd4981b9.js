"use strict";(self.webpackChunkcollab_learning_extension=self.webpackChunkcollab_learning_extension||[]).push([[963],{3963:(e,t,n)=>{function r(e){return null!==e&&e<-2}function a(e){return-2===e||-1===e||32===e}function i(e){return function(t){return null!==t&&t>-1&&e.test(String.fromCharCode(t))}}function o(e,t,n,r){const i=r?r-1:Number.POSITIVE_INFINITY;let o=0;return function(r){return a(r)?(e.enter(n),u(r)):t(r)};function u(r){return a(r)&&o++<i?(e.consume(r),u):(e.exit(n),t(r))}}n.r(t),n.d(t,{default:()=>f}),i(/[A-Za-z]/),i(/[\dA-Za-z]/),i(/[#-'*+\--9=?A-Z^-~]/),i(/\d/),i(/[\dA-Fa-f]/),i(/[!-/:-@[-`{-~]/),i(/\p{P}|\p{S}/u),i(/\s/);const u={tokenize:function(e,t,n){const a=this,i=a.events[a.events.length-1],u=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0;let l=0;return function(t){return e.enter("mathFlow"),e.enter("mathFlowFence"),e.enter("mathFlowFenceSequence"),s(t)};function s(t){return 36===t?(e.consume(t),l++,s):l<2?n(t):(e.exit("mathFlowFenceSequence"),o(e,h,"whitespace")(t))}function h(t){return null===t||r(t)?f(t):(e.enter("mathFlowFenceMeta"),e.enter("chunkString",{contentType:"string"}),m(t))}function m(t){return null===t||r(t)?(e.exit("chunkString"),e.exit("mathFlowFenceMeta"),f(t)):36===t?n(t):(e.consume(t),m)}function f(n){return e.exit("mathFlowFence"),a.interrupt?t(n):e.attempt(c,d,w)(n)}function d(t){return e.attempt({tokenize:g,partial:!0},w,p)(t)}function p(t){return(u?o(e,x,"linePrefix",u+1):x)(t)}function x(t){return null===t?w(t):r(t)?e.attempt(c,d,w)(t):(e.enter("mathFlowValue"),F(t))}function F(t){return null===t||r(t)?(e.exit("mathFlowValue"),x(t)):(e.consume(t),F)}function w(n){return e.exit("mathFlow"),t(n)}function g(e,t,n){let i=0;return o(e,(function(t){return e.enter("mathFlowFence"),e.enter("mathFlowFenceSequence"),u(t)}),"linePrefix",a.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function u(t){return 36===t?(i++,e.consume(t),u):i<l?n(t):(e.exit("mathFlowFenceSequence"),o(e,c,"whitespace")(t))}function c(a){return null===a||r(a)?(e.exit("mathFlowFence"),t(a)):n(a)}}},concrete:!0},c={tokenize:function(e,t,n){const r=this;return function(n){return null===n?t(n):(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),a)};function a(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0};function l(e){let t=(e||{}).singleDollarTextMath;return null==t&&(t=!0),{tokenize:function(e,n,a){let i,o,u=0;return function(t){return e.enter("mathText"),e.enter("mathTextSequence"),c(t)};function c(n){return 36===n?(e.consume(n),u++,c):u<2&&!t?a(n):(e.exit("mathTextSequence"),l(n))}function l(t){return null===t?a(t):36===t?(o=e.enter("mathTextSequence"),i=0,h(t)):32===t?(e.enter("space"),e.consume(t),e.exit("space"),l):r(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),l):(e.enter("mathTextData"),s(t))}function s(t){return null===t||32===t||36===t||r(t)?(e.exit("mathTextData"),l(t)):(e.consume(t),s)}function h(t){return 36===t?(e.consume(t),i++,h):i===u?(e.exit("mathTextSequence"),e.exit("mathText"),n(t)):(o.type="mathTextData",s(t))}},resolve:s,previous:h}}function s(e){let t,n,r=e.length-4,a=3;if(!("lineEnding"!==e[a][1].type&&"space"!==e[a][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=a;++t<r;)if("mathTextData"===e[t][1].type){e[r][1].type="mathTextPadding",e[a][1].type="mathTextPadding",a+=2,r-=2;break}for(t=a-1,r++;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="mathTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e}function h(e){return 36!==e||"characterEscape"===this.events[this.events.length-1][1].type}const m={};function f(e){const t=e||m,n=this.data(),r=n.micromarkExtensions||(n.micromarkExtensions=[]),a=n.fromMarkdownExtensions||(n.fromMarkdownExtensions=[]),i=n.toMarkdownExtensions||(n.toMarkdownExtensions=[]);r.push(function(e){return{flow:{36:u},text:{36:l(e)}}}(t)),a.push(function(){return{enter:{mathFlow:function(e){this.enter({type:"math",meta:null,value:"",data:{hName:"pre",hChildren:[{type:"element",tagName:"code",properties:{className:["language-math","math-display"]},children:[]}]}},e)},mathFlowFenceMeta:function(){this.buffer()},mathText:function(e){this.enter({type:"inlineMath",value:"",data:{hName:"code",hProperties:{className:["language-math","math-inline"]},hChildren:[]}},e),this.buffer()}},exit:{mathFlow:function(e){const t=this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),n=this.stack[this.stack.length-1];n.type,this.exit(e),n.value=t;const r=n.data.hChildren[0];r.type,r.tagName,r.children.push({type:"text",value:t}),this.data.mathFlowInside=void 0},mathFlowFence:function(){this.data.mathFlowInside||(this.buffer(),this.data.mathFlowInside=!0)},mathFlowFenceMeta:function(){const e=this.resume(),t=this.stack[this.stack.length-1];t.type,t.meta=e},mathFlowValue:e,mathText:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.type,this.exit(e),n.value=t,n.data.hChildren.push({type:"text",value:t})},mathTextData:e}};function e(e){this.config.enter.data.call(this,e),this.config.exit.data.call(this,e)}}()),i.push(function(e){let t=(e||{}).singleDollarTextMath;return null==t&&(t=!0),n.peek=function(){return"$"},{unsafe:[{character:"\r",inConstruct:"mathFlowMeta"},{character:"\n",inConstruct:"mathFlowMeta"},{character:"$",after:t?void 0:"\\$",inConstruct:"phrasing"},{character:"$",inConstruct:"mathFlowMeta"},{atBreak:!0,character:"$",after:"\\$"}],handlers:{math:function(e,t,n,r){const a=e.value||"",i=n.createTracker(r),o="$".repeat(Math.max(function(e,t){const n=String(e);let r=n.indexOf(t),a=r,i=0,o=0;for(;-1!==r;)r===a?++i>o&&(o=i):i=1,a=r+1,r=n.indexOf(t,a);return o}(a,"$")+1,2)),u=n.enter("mathFlow");let c=i.move(o);if(e.meta){const t=n.enter("mathFlowMeta");c+=i.move(n.safe(e.meta,{after:"\n",before:c,encode:["$"],...i.current()})),t()}return c+=i.move("\n"),a&&(c+=i.move(a+"\n")),c+=i.move(o),u(),c},inlineMath:n}};function n(e,n,r){let a=e.value||"",i=1;for(t||i++;new RegExp("(^|[^$])"+"\\$".repeat(i)+"([^$]|$)").test(a);)i++;const o="$".repeat(i);/[^ \r\n]/.test(a)&&(/^[ \r\n]/.test(a)&&/[ \r\n]$/.test(a)||/^\$|\$$/.test(a))&&(a=" "+a+" ");let u=-1;for(;++u<r.unsafe.length;){const e=r.unsafe[u];if(!e.atBreak)continue;const t=r.compilePattern(e);let n;for(;n=t.exec(a);){let e=n.index;10===a.codePointAt(e)&&13===a.codePointAt(e-1)&&e--,a=a.slice(0,e)+" "+a.slice(n.index+1)}}return o+a+o}}(t))}}}]);