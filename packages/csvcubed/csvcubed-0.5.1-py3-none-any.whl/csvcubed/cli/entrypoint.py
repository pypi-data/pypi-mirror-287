"""
CLI
---
The *Command Line Interface* for :mod:`~csvcubed.cli`.
"""
import logging
import sys
from pathlib import Path

import click

from csvcubed import __version__
from csvcubed.cli.buildcsvw.build import build_csvw
from csvcubed.cli.codelist.build_code_list import build_code_list
from csvcubed.cli.inspectcsvw.inspect import inspect
from csvcubed.cli.pullcsvw.pull import pull
from csvcubed.models.errorurl import HasErrorUrl
from csvcubed.utils.log import log_exception, start_logging

_logger = logging.getLogger(__name__)

_VALIDATION_FILE_NAME = "validation-errors.json"


@click.group(context_settings=dict(help_option_names=["-h", "--help"]))
def entry_point():
    """
    csvcubed - a tool to generate CSV-W cubes.
    """


@entry_point.command("version")
def version():
    """
    Output the current version of csvcubed
    """
    print(f"v{__version__}")


out_option = click.option(
    "--out",
    "-o",
    help="Location of the CSV-W outputs.",
    default="./out",
    show_default=True,
    type=click.Path(path_type=Path, file_okay=False, dir_okay=True),
    metavar="OUT_DIR",
)
fail_option = click.option(
    "--fail-when-validation-error/--ignore-validation-errors",
    help="Fail when validation errors occur or ignore validation errors and continue generating a CSV-W.",
    default=True,
    show_default=True,
)
validation_option = click.option(
    "--validation-errors-to-file",
    "validation_errors_to_file",
    help="Save validation errors to a `validation-errors.json` file in the output directory.",
    flag_value=True,
    default=False,
    show_default=True,
)
log_option = click.option(
    "--log-level",
    help="select a logging level out of: 'warn', 'err', 'crit', 'info' or 'debug'.",
    type=click.Choice(["warn", "err", "crit", "info", "debug"], case_sensitive=False),
    default="warn",
)


@entry_point.command("build")
@click.option(
    "--config",
    "-c",
    help="Location of the json file containing the qube-config file.",
    type=click.Path(exists=True, path_type=Path, file_okay=True, dir_okay=False),
    required=False,
    metavar="CONFIG_PATH",
)
@out_option
@fail_option
@validation_option
@log_option
@click.argument(
    "csv", type=click.Path(exists=True, path_type=Path), metavar="TIDY_CSV_PATH"
)
def build_command(
    config: Path,
    out: Path,
    csv: Path,
    log_level: str,
    fail_when_validation_error: bool,
    validation_errors_to_file: bool,
):
    """Build a qb-flavoured CSV-W from a tidy CSV."""
    validation_errors_file_name = (
        _VALIDATION_FILE_NAME if validation_errors_to_file else None
    )
    out.mkdir(parents=True, exist_ok=True)

    _init_logging(log_level)
    try:
        build_csvw(
            config_path=config,
            output_directory=out,
            csv_path=csv,
            fail_when_validation_error_occurs=fail_when_validation_error,
            validation_errors_file_name=validation_errors_file_name,
        )

    except Exception as e:
        log_exception(_logger, e)
        sys.exit(1)


@entry_point.command("inspect")
@log_option
@click.argument(
    "csvw_metadata_json_path",
    type=click.Path(exists=True, path_type=Path),
    metavar="CSVW_METADATA_JSON_PATH",
)
def inspect_command(log_level: str, csvw_metadata_json_path: Path) -> None:
    """Inspect the contents of a CSV-W generated by csvcubed."""
    _init_logging(log_level)
    try:
        inspect(csvw_metadata_json_path)
    except Exception as e:
        log_exception(_logger, e)
        if isinstance(e, HasErrorUrl):
            _logger.error(f"More information available at {e.get_error_url()}")
        sys.exit(1)


@entry_point.group("code-list")
def code_list():
    """
    Create a code list from a JSON file.
    """
    ...


@code_list.command("build")
@out_option
@fail_option
@validation_option
@log_option
@click.argument(
    "config",
    type=click.Path(exists=True, path_type=Path),
    metavar="CODE_LIST_CONFIG_PATH",
)
def code_list_build_command(
    config: Path,
    out: Path,
    log_level: str,
    fail_when_validation_error: bool,
    validation_errors_to_file: str,
):
    """Build a skos-flavoured code list CSV-W from a tidy code list JSON file."""
    validation_errors_file_name = (
        _VALIDATION_FILE_NAME if validation_errors_to_file else None
    )

    out.mkdir(parents=True, exist_ok=True)
    _init_logging(log_level)
    try:
        build_code_list(
            config_path=config,
            output_directory=out,
            fail_when_validation_error_occurs=fail_when_validation_error,
            validation_errors_file_name=validation_errors_file_name,
        )

    except Exception as e:
        log_exception(_logger, e)
        sys.exit(1)


@entry_point.command("pull")
@log_option
# N.B. The `out` directory for the `pull` command is different and defaults to the current working directory.
@click.option(
    "--out",
    "-o",
    help="Location of the CSV-W and dependencies.",
    default=Path(".").absolute(),
    show_default=True,
    type=click.Path(path_type=Path, file_okay=False, dir_okay=True),
    metavar="OUT_DIR",
)
@click.argument(
    "csvw_metadata_json_url",
    type=click.STRING,
    metavar="CSVW_METADATA_JSON_URL",
)
def csvw_pull(csvw_metadata_json_url: str, out: Path, log_level: str) -> None:
    """
    Pull a CSV-W and all relatively defined dependent files.
    """
    _init_logging(log_level)
    try:
        pull(csvw_metadata_url=csvw_metadata_json_url, output_dir=out)
        print(f"Pull Complete @ {out.resolve()}")
    except Exception as e:
        log_exception(_logger, e)
        sys.exit(1)


def _init_logging(log_level):
    start_logging(log_dir_name="csvcubed-cli", selected_logging_level=log_level)
