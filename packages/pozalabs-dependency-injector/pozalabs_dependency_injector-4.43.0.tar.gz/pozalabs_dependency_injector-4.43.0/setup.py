# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['dependency_injector']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'pozalabs-dependency-injector',
    'version': '4.43.0',
    'description': '',
    'long_description': '.. figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/logo.svg\n   :target: https://github.com/ets-labs/python-dependency-injector\n\n| \n\n.. image:: https://img.shields.io/pypi/v/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Latest Version\n   \n.. image:: https://img.shields.io/pypi/l/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: License\n\n.. image:: https://img.shields.io/pypi/pyversions/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Supported Python versions\n   \n.. image:: https://img.shields.io/pypi/implementation/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Supported Python implementations\n\n.. image:: https://pepy.tech/badge/dependency-injector\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://pepy.tech/badge/dependency-injector/month\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://pepy.tech/badge/dependency-injector/week\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/wheel/dependency-injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Wheel\n\n.. image:: https://img.shields.io/github/actions/workflow/status/ets-labs/python-dependency-injector/tests-and-linters.yml?branch=master\n   :target: https://github.com/ets-labs/python-dependency-injector/actions\n   :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/ets-labs/python-dependency-injector/badge.svg?branch=master\n   :target: https://coveralls.io/github/ets-labs/python-dependency-injector?branch=master\n   :alt: Coverage Status\n\nWhat is ``Dependency Injector``?\n================================\n\n``Dependency Injector`` is a dependency injection framework for Python.\n\nIt helps implement the dependency injection principle.\n\nKey features of the ``Dependency Injector``:\n\n- **Providers**. Provides ``Factory``, ``Singleton``, ``Callable``, ``Coroutine``, ``Object``,\n  ``List``, ``Dict``, ``Configuration``, ``Resource``, ``Dependency``, and ``Selector`` providers\n  that help assemble your objects.\n  See `Providers <https://python-dependency-injector.ets-labs.org/providers/index.html>`_.\n- **Overriding**. Can override any provider by another provider on the fly. This helps in testing\n  and configuring dev/stage environment to replace API clients with stubs etc. See\n  `Provider overriding <https://python-dependency-injector.ets-labs.org/providers/overriding.html>`_.\n- **Configuration**. Reads configuration from ``yaml``, ``ini``, and ``json`` files, ``pydantic`` settings,\n  environment variables, and dictionaries.\n  See `Configuration provider <https://python-dependency-injector.ets-labs.org/providers/configuration.html>`_.\n- **Resources**. Helps with initialization and configuring of logging, event loop, thread\n  or process pool, etc. Can be used for per-function execution scope in tandem with wiring.\n  See `Resource provider <https://python-dependency-injector.ets-labs.org/providers/resource.html>`_.\n- **Containers**. Provides declarative and dynamic containers.\n  See `Containers <https://python-dependency-injector.ets-labs.org/containers/index.html>`_.\n- **Wiring**. Injects dependencies into functions and methods. Helps integrate with\n  other frameworks: Django, Flask, Aiohttp, Sanic, FastAPI, etc.\n  See `Wiring <https://python-dependency-injector.ets-labs.org/wiring.html>`_.\n- **Asynchronous**. Supports asynchronous injections.\n  See `Asynchronous injections <https://python-dependency-injector.ets-labs.org/providers/async.html>`_.\n- **Typing**. Provides typing stubs, ``mypy``-friendly.\n  See `Typing and mypy <https://python-dependency-injector.ets-labs.org/providers/typing_mypy.html>`_.\n- **Performance**. Fast. Written in ``Cython``.\n- **Maturity**. Mature and production-ready. Well-tested, documented, and supported.\n\n.. code-block:: python\n\n   from dependency_injector import containers, providers\n   from dependency_injector.wiring import Provide, inject\n\n\n   class Container(containers.DeclarativeContainer):\n\n       config = providers.Configuration()\n\n       api_client = providers.Singleton(\n           ApiClient,\n           api_key=config.api_key,\n           timeout=config.timeout,\n       )\n\n       service = providers.Factory(\n           Service,\n           api_client=api_client,\n       )\n\n\n   @inject\n   def main(service: Service = Provide[Container.service]) -> None:\n       ...\n\n\n   if __name__ == "__main__":\n       container = Container()\n       container.config.api_key.from_env("API_KEY", required=True)\n       container.config.timeout.from_env("TIMEOUT", as_=int, default=5)\n       container.wire(modules=[__name__])\n\n       main()  # <-- dependency is injected automatically\n\n       with container.api_client.override(mock.Mock()):\n           main()  # <-- overridden dependency is injected automatically\n\nWhen you call the ``main()`` function the ``Service`` dependency is assembled and injected automatically.\n\nWhen you do testing, you call the ``container.api_client.override()`` method to replace the real API\nclient with a mock. When you call ``main()``, the mock is injected.\n\nYou can override any provider with another provider.\n\nIt also helps you in a re-configuring project for different environments: replace an API client\nwith a stub on the dev or stage.\n\nWith the ``Dependency Injector``, object assembling is consolidated in a container. Dependency injections are defined explicitly.\nThis makes it easier to understand and change how an application works.\n\n.. figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/di-readme.svg\n   :target: https://github.com/ets-labs/python-dependency-injector\n\nVisit the docs to know more about the\n`Dependency injection and inversion of control in Python <https://python-dependency-injector.ets-labs.org/introduction/di_in_python.html>`_.\n\nInstallation\n------------\n\nThe package is available on the `PyPi`_::\n\n    pip install dependency-injector\n\nDocumentation\n-------------\n\nThe documentation is available `here <https://python-dependency-injector.ets-labs.org/>`_.\n\nExamples\n--------\n\nChoose one of the following:\n\n- `Application example (single container) <https://python-dependency-injector.ets-labs.org/examples/application-single-container.html>`_\n- `Application example (multiple containers) <https://python-dependency-injector.ets-labs.org/examples/application-multiple-containers.html>`_\n- `Decoupled packages example (multiple containers) <https://python-dependency-injector.ets-labs.org/examples/decoupled-packages.html>`_\n- `Boto3 example <https://python-dependency-injector.ets-labs.org/examples/boto3.html>`_\n- `Django example <https://python-dependency-injector.ets-labs.org/examples/django.html>`_\n- `Flask example <https://python-dependency-injector.ets-labs.org/examples/flask.html>`_\n- `Aiohttp example <https://python-dependency-injector.ets-labs.org/examples/aiohttp.html>`_\n- `Sanic example <https://python-dependency-injector.ets-labs.org/examples/sanic.html>`_\n- `FastAPI example <https://python-dependency-injector.ets-labs.org/examples/fastapi.html>`_\n- `FastAPI + Redis example <https://python-dependency-injector.ets-labs.org/examples/fastapi-redis.html>`_\n- `FastAPI + SQLAlchemy example <https://python-dependency-injector.ets-labs.org/examples/fastapi-sqlalchemy.html>`_\n\nTutorials\n---------\n\nChoose one of the following:\n\n- `Flask web application tutorial <https://python-dependency-injector.ets-labs.org/tutorials/flask.html>`_\n- `Aiohttp REST API tutorial <https://python-dependency-injector.ets-labs.org/tutorials/aiohttp.html>`_\n- `Asyncio monitoring daemon tutorial <https://python-dependency-injector.ets-labs.org/tutorials/asyncio-daemon.html>`_\n- `CLI application tutorial <https://python-dependency-injector.ets-labs.org/tutorials/cli.html>`_\n\nConcept\n-------\n\nThe framework stands on the `PEP20 (The Zen of Python) <https://www.python.org/dev/peps/pep-0020/>`_ principle:\n\n.. code-block:: bash\n\n   Explicit is better than implicit\n\nYou need to specify how to assemble and where to inject the dependencies explicitly.\n\nThe power of the framework is in its simplicity.\n``Dependency Injector`` is a simple tool for the powerful concept.\n\nFrequently asked questions\n--------------------------\n\nWhat is dependency injection?\n - dependency injection is a principle that decreases coupling and increases cohesion\n\nWhy should I do the dependency injection?\n - your code becomes more flexible, testable, and clear ðŸ˜Ž\n\nHow do I start applying the dependency injection?\n - you start writing the code following the dependency injection principle\n - you register all of your application components and their dependencies in the container\n - when you need a component, you specify where to inject it or get it from the container\n\nWhat price do I pay and what do I get?\n - you need to explicitly specify the dependencies\n - it will be extra work in the beginning\n - it will payoff as project grows\n\nHave a question?\n - Open a `Github Issue <https://github.com/ets-labs/python-dependency-injector/issues>`_\n\nFound a bug?\n - Open a `Github Issue <https://github.com/ets-labs/python-dependency-injector/issues>`_\n\nWant to help?\n - |star| Star the ``Dependency Injector`` on the `Github <https://github.com/ets-labs/python-dependency-injector/>`_\n - |new| Start a new project with the ``Dependency Injector``\n - |tell| Tell your friend about the ``Dependency Injector``\n\nWant to contribute?\n - |fork| Fork the project\n - |pull| Open a pull request to the ``develop`` branch\n\n.. _PyPi: https://pypi.org/project/dependency-injector/\n\n.. |star| unicode:: U+2B50 U+FE0F .. star sign1\n.. |new| unicode:: U+1F195 .. new sign\n.. |tell| unicode:: U+1F4AC .. tell sign\n.. |fork| unicode:: U+1F500 .. fork sign\n.. |pull| unicode:: U+2B05 U+FE0F .. pull sign\n',
    'author': 'pozalabs',
    'author_email': 'contact@pozalabs.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.11,<4.0',
}
from build import *
build(setup_kwargs)

setup(**setup_kwargs)
