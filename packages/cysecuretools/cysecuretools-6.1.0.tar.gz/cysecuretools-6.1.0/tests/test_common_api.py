"""
Copyright 2023-2024 Cypress Semiconductor Corporation (an Infineon company)
or an affiliate of Cypress Semiconductor Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import os
import re
import unittest
import tempfile

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ec
from cryptography.hazmat.primitives.serialization import load_pem_public_key

from src.api_common import CommonAPI
from src.core.key_handlers import load_public_key
from src.execute.imgtool.main import load_key
from src.core.signtool_base import SignToolBase

from tests.utils import utils, keygen


class TestCommonApi(unittest.TestCase):
    """Tests CommonAPI"""

    def setUp(self):
        self.test_dir = tempfile.TemporaryDirectory()

    def tname(self, base):
        return os.path.join(self.test_dir.name, base)

    def tearDown(self):
        self.test_dir.cleanup()

    @staticmethod
    def _keygen_type_fmt(key_type, key_fmt):
        if key_type.startswith('RSA'):
            if key_fmt.lower() == 'pem':
                return keygen.rsa_keypair_pem(int(key_type[-4:], 10))
            elif key_fmt.lower() == 'der':
                return keygen.rsa_keypair_der(int(key_type[-4:], 10))
            elif key_fmt.lower() == 'jwk':
                return keygen.rsa_keypair_jwk(int(key_type[-4:], 10))
            else:
                return None
        else:
            if key_fmt.lower() == 'pem':
                return keygen.ec_keypair_pem('P-256')
            elif key_fmt.lower() == 'der':
                return keygen.ec_keypair_der('P-256')
            elif key_fmt.lower() == 'jwk':
                return keygen.ec_keypair_jwk('P-256')
            else:
                return None

    def test_convert_key_to_pem_der_jwk(self):
        algs = ['RSA2048', 'RSA3072', 'RSA4096', 'ECDSA-P256']
        fmts = ['pem', 'der', 'jwk']

        for fmt in fmts:
            for alg in algs:
                priv, pub = TestCommonApi._keygen_type_fmt(alg, fmt)

                with open(self.tname(f"{alg}-private.{fmt}"),
                          "wb" if fmt.lower() == "der" else "w") as f:
                    f.write(priv)
                with open(self.tname(f"{alg}-public.{fmt}"),
                          "wb" if fmt.lower() == "der" else "w") as f:
                    f.write(pub)

                for new_fmt in fmts:
                    if fmt != new_fmt:
                        with self.subTest(f'public:{alg}:{fmt}->{new_fmt}'):
                            CommonAPI.convert_key(
                                self.tname(f"{alg}-public.{fmt}"),
                                f"{new_fmt}",
                                output=self.tname(f"{alg}-public-new.{new_fmt}")
                            )

                            k_old = SignToolBase.load_key(
                                self.tname(f"{alg}-public.{fmt}")
                            )
                            k_new = SignToolBase.load_key(
                                self.tname(f"{alg}-public-new.{new_fmt}")
                            )

                            self.assertEqual(k_old.public_numbers(),
                                             k_new.public_numbers())

                        with self.subTest(f'private:{alg}:{fmt}->{new_fmt}'):
                            CommonAPI.convert_key(
                                self.tname(f"{alg}-private.{fmt}"),
                                f"{new_fmt}",
                                output=self.tname(f"{alg}-private-new.{new_fmt}")
                            )

                            k_old = SignToolBase.load_key(
                                self.tname(f"{alg}-private.{fmt}")
                            )
                            k_new = SignToolBase.load_key(
                                self.tname(f"{alg}-private-new.{new_fmt}")
                            )

                            self.assertEqual(k_old.private_numbers(),
                                             k_new.private_numbers())

    def test_convert_key_c_array(self):
        """
        Tests creating C-array for RSA keys of length 2048, 3072 and 4096 bits
        and ECDSA-256 public keys comparing to imgtool generator
        """

        algs = ['RSA2048', 'RSA3072', 'RSA4096', 'ECDSA-P256']

        for alg in algs:

            with self.subTest(f"Creating keys {alg}"):

                if alg in ['RSA2048', 'RSA3072', 'RSA4096']:
                    priv, pub = keygen.rsa_keypair_pem(int(alg[-4:], 10))
                else:
                    priv, pub = keygen.ec_keypair_pem('P-256')

                with open(f"{alg}-private.pem", "w") as f:
                    f.write(priv)

                with open(f"{alg}-public.pem", "w") as f:
                    f.write(pub)

                CommonAPI.convert_key(
                    load_public_key(f"{alg}-public.pem"),
                    "c_array",
                    output=self.tname(f"{alg}-public.pem.c")
                )

                key = load_key(f"{alg}-private.pem")
                with open(f"{alg}-imgtool.c",
                          "w", encoding="utf-8") as f:
                    key.emit_c_public(f)

            with self.subTest(f"Comparing keys {alg}"):

                with open(self.tname(f"{alg}-public.pem.c"), "r",
                          encoding="utf-8") as f:
                    s = f.read()
                    c_bytes = bytes(
                        list(
                            map(lambda x: int(x, 16),
                                re.findall(r"0[xX][0-9a-fA-F]{2}",
                                           re.search(r"\{.+\}",
                                                     s, re.S).group(0)))
                        )
                    )
                    c_shortname = re.search(r"[^ ]+_pub_key\[\]",
                                            s, re.S).group(0).split("_")[0]

                    c_size = int(re.search(r"[0-9]+",
                                           re.search(
                                               r"pub_key_len = [0-9]+;",
                                               s, re.S).group(0)).group(
                        0))

                key = load_public_key(f"{alg}-public.pem")

                if isinstance(key, ec.EllipticCurvePublicKey):
                    key_shortname = "ecdsa"
                    key_bytes = key.public_bytes(
                        encoding=serialization.Encoding.DER,
                        format=serialization.PublicFormat.SubjectPublicKeyInfo
                    )
                elif isinstance(key, rsa.RSAPublicKey):
                    key_shortname = "rsa"
                    key_bytes = key.public_bytes(
                        encoding=serialization.Encoding.DER,
                        format=serialization.PublicFormat.PKCS1
                    )
                else:
                    raise ValueError("Loading unsupported key")

                with self.subTest("type"):
                    self.assertEqual(key_shortname, c_shortname)

                with self.subTest("content"):
                    self.assertEqual(key_bytes, c_bytes)

                with self.subTest("c_array_size"):
                    self.assertEqual(c_size, len(c_bytes))

                with self.subTest("key_size"):
                    self.assertEqual(c_size, len(key_bytes))

    def test_convert_key_secure_boot(self):
        """
        Tests creating Secure Boot key file for RSA keys
        of length 2048, 3072 and 4096 bits
        """
        key2048_data = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzWmpbTf+fYnYybTO21cU
6c0KiIgGJnir06SgamxsMhfUXX7fheqnlZ5cvi35Zp/4aJpwX46bOZMcx9ciI5jc
K27vSc4fa3qjCmfkPiJzy9mTuyLoeomF9DvfV26/oeZ6Wda7ZxIom6qhXpIKXW8U
IKBMKJ9fiFs+mrUcb4nwcFUCGT0OfB9iu2MiiHO8Gw6ts9L+ZjYDhZ5XYwCFTZ10
hE+73kOTkSp6Sj245rPSPnxEWQ1VVlgV60m+4JUcaLeDV7Wd+v7UIWaOo35u1g9J
Ap6yWUj6Pts65uYSGz4ubjoQ2Eas9Qt2Y/oAXfABnyA6fkfuS17qijOzpaCfDyy1
+QIDAQAB
-----END PUBLIC KEY-----"""

        key3072_data = """-----BEGIN PUBLIC KEY-----
MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAwuSDySxCzfUiiSp5VMw9
rNxRhykyGpxHwSYoHl2XdHWZS/8tShkslxuxMnnPZbBOvzfCdR1ut7LbjSpamDoz
0lOtg+cYVRqfHfxp2KeQtS0dUa3A3cwmN9HwpdJKvnbKJYXUruBO3xIRbiwedK31
p+dgfJ4nqexrHbJYQhLqVQ7wXIoT2RF19DN3cAwVn0GLPyOBe4GkoDu2pzAKzORo
U9XqgykVDTzhhBxQ0mbehucqyie7WDsfHlf3eIogfozsf3f9hvI4mZvrjgeBJiHn
rm2QHTeuhpapjvlOAzJhHe9BAWoi4f06wTCXK084AjVyf0lotDJddFt4MX06a+lH
yaeMMIp+a54UtTBn9Rbfd5VPizNFFhXSMiHDcD59CxEGfS5sdma3XBjWcBtxfa8B
boN4cW51/VIbOlt+AHIZgtXizD2CdyFHa+kZQywSW/y9v8hHXC/DYc2Bc+73fL3Q
aPkuERlXxNO2WQGkHRCx6HNxMgMmtdhxe4q0qQL9MIyHAgMBAAE=
-----END PUBLIC KEY-----"""

        key4096_data ="""-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1IMXD8J6blyR85c1ZIoD
/GNS+nVg/sJccQbzl7s0ozJLx6pESPRJzEkP0bkmNT03gUcY5Q15vZKzTfFbRBGX
jRk13aZNRyZ9xOkYM8FJWQM9m0r6ZlEysWP06mSTltEL8daNPYyRiSrFJj+OMLJM
7IBRFH5UR9N+IYVL9A15P1Wv9+wkQKMraTObtxngKQbTl/no6XLzDOC+k1dYAV1l
WYqpWzUnIQNJz2da+eN2E48WqOtxT/VXgY84NTayXBhqf3uybByNlmv7O7VBa8KP
S7+wEVDqK9is9N9t/uyDOMYp5UFGY4Sc6uCrBDbH/xfpbyG0KDbT6Bq9JaYtLLXo
VPbyhjIV136V3KuvvMZwONeRVQiPJORfsAvcVLLPV+yXV+47PMvA0pHAy+niRM8e
QeNHdW6xFQUmT9Y09Kn02JP9Fs9XOGHMVQ77Z5pMp2823jnPCeeHzucVvu6dobob
oeJ5yDP/Zoosv3jggIRFTBMALoT3iz/xJgmIDu0KOEWdmv+o96LU4dxQZ5wIVuvk
I+fAYvGUWIIA/+VcdrkEzTkuToHgUWInoErapMGMbmEXw2GvgNFm2WbGHCOF7+P9
PEI9W3SvP048PNpM8YwO0Yj8QuT9jxzyRAhV8Z6/EeKlE+j0/Z1B9K6V0MfntTuV
rc9e18XC/lYRPXgaSE3k+AUCAwEAAQ==
-----END PUBLIC KEY-----"""

        result2048_data = """#include "cmsis_compiler.h"
#include "cy_crypto_common.h"
#include "cy_si_config.h"
#include "cy_si_keystorage.h"
#include "cy_syslib.h"

/** Publickey in SFlash */
CY_SECTION(".cy_sflash_public_key") __USED const cy_si_stc_public_key_t cy_publicKey =
{
    .objSize = sizeof(cy_si_stc_public_key_t),
    .signatureScheme = 0UL,
    .publicKeyStruct =
    {
        .moduloAddr         = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, moduloData),
        .moduloSize         = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_MODULOLENGTH,
        .expAddr            = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, expData),
        .expSize            = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_EXPLENGTH,
        .barrettAddr        = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, barrettData),
        .inverseModuloAddr  = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, inverseModuloData),
        .rBarAddr           = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, rBarData)
    },
    .moduloData =
    {
        0xF9u, 0xB5u, 0x2Cu, 0x0Fu, 0x9Fu, 0xA0u, 0xA5u, 0xB3u, 
        0x33u, 0x8Au, 0xEAu, 0x5Eu, 0x4Bu, 0xEEu, 0x47u, 0x7Eu, 
        0x3Au, 0x20u, 0x9Fu, 0x01u, 0xF0u, 0x5Du, 0x00u, 0xFAu, 
        0x63u, 0x76u, 0x0Bu, 0xF5u, 0xACu, 0x46u, 0xD8u, 0x10u, 
        0x3Au, 0x6Eu, 0x2Eu, 0x3Eu, 0x1Bu, 0x12u, 0xE6u, 0xE6u, 
        0x3Au, 0xDBu, 0x3Eu, 0xFAu, 0x48u, 0x59u, 0xB2u, 0x9Eu, 
        0x02u, 0x49u, 0x0Fu, 0xD6u, 0x6Eu, 0x7Eu, 0xA3u, 0x8Eu, 
        0x66u, 0x21u, 0xD4u, 0xFEu, 0xFAu, 0x9Du, 0xB5u, 0x57u, 
        0x83u, 0xB7u, 0x68u, 0x1Cu, 0x95u, 0xE0u, 0xBEu, 0x49u, 
        0xEBu, 0x15u, 0x58u, 0x56u, 0x55u, 0x0Du, 0x59u, 0x44u, 
        0x7Cu, 0x3Eu, 0xD2u, 0xB3u, 0xE6u, 0xB8u, 0x3Du, 0x4Au, 
        0x7Au, 0x2Au, 0x91u, 0x93u, 0x43u, 0xDEu, 0xBBu, 0x4Fu, 
        0x84u, 0x74u, 0x9Du, 0x4Du, 0x85u, 0x00u, 0x63u, 0x57u, 
        0x9Eu, 0x85u, 0x03u, 0x36u, 0x66u, 0xFEu, 0xD2u, 0xB3u, 
        0xADu, 0x0Eu, 0x1Bu, 0xBCu, 0x73u, 0x88u, 0x22u, 0x63u, 
        0xBBu, 0x62u, 0x1Fu, 0x7Cu, 0x0Eu, 0x3Du, 0x19u, 0x02u, 
        0x55u, 0x70u, 0xF0u, 0x89u, 0x6Fu, 0x1Cu, 0xB5u, 0x9Au, 
        0x3Eu, 0x5Bu, 0x88u, 0x5Fu, 0x9Fu, 0x28u, 0x4Cu, 0xA0u, 
        0x20u, 0x14u, 0x6Fu, 0x5Du, 0x0Au, 0x92u, 0x5Eu, 0xA1u, 
        0xAAu, 0x9Bu, 0x28u, 0x12u, 0x67u, 0xBBu, 0xD6u, 0x59u, 
        0x7Au, 0xE6u, 0xA1u, 0xBFu, 0x6Eu, 0x57u, 0xDFu, 0x3Bu, 
        0xF4u, 0x85u, 0x89u, 0x7Au, 0xE8u, 0x22u, 0xBBu, 0x93u, 
        0xD9u, 0xCBu, 0x73u, 0x22u, 0x3Eu, 0xE4u, 0x67u, 0x0Au, 
        0xA3u, 0x7Au, 0x6Bu, 0x1Fu, 0xCEu, 0x49u, 0xEFu, 0x6Eu, 
        0x2Bu, 0xDCu, 0x98u, 0x23u, 0x22u, 0xD7u, 0xC7u, 0x1Cu, 
        0x93u, 0x39u, 0x9Bu, 0x8Eu, 0x5Fu, 0x70u, 0x9Au, 0x68u, 
        0xF8u, 0x9Fu, 0x66u, 0xF9u, 0x2Du, 0xBEu, 0x5Cu, 0x9Eu, 
        0x95u, 0xA7u, 0xEAu, 0x85u, 0xDFu, 0x7Eu, 0x5Du, 0xD4u, 
        0x17u, 0x32u, 0x6Cu, 0x6Cu, 0x6Au, 0xA0u, 0xA4u, 0xD3u, 
        0xABu, 0x78u, 0x26u, 0x06u, 0x88u, 0x88u, 0x0Au, 0xCDu, 
        0xE9u, 0x14u, 0x57u, 0xDBu, 0xCEu, 0xB4u, 0xC9u, 0xD8u, 
        0x89u, 0x7Du, 0xFEu, 0x37u, 0x6Du, 0xA9u, 0x69u, 0xCDu
    },
    .expData =
    {
        0x01u, 0x00u, 0x01u, 0x00u
    },
    .barrettData =
    {
        0xC6u, 0x7Au, 0xE1u, 0xA9u, 0xF2u, 0x7Bu, 0x7Du, 0xD2u, 
        0xEEu, 0x3Du, 0x97u, 0x46u, 0x27u, 0xB0u, 0xC7u, 0xDBu, 
        0xF4u, 0x4Au, 0x6Bu, 0xADu, 0x3Fu, 0xD2u, 0x63u, 0x9Cu, 
        0xCDu, 0x71u, 0xF9u, 0x30u, 0x1Bu, 0x02u, 0x46u, 0x18u, 
        0x56u, 0x76u, 0x71u, 0xF8u, 0xCEu, 0x68u, 0x85u, 0x7Eu, 
        0x43u, 0xF2u, 0x82u, 0x95u, 0xF4u, 0x58u, 0x29u, 0x88u, 
        0x92u, 0x6Au, 0xC8u, 0x32u, 0x90u, 0x6Bu, 0x22u, 0xB7u, 
        0x9Au, 0x67u, 0x01u, 0x90u, 0xF2u, 0x02u, 0xCDu, 0x72u, 
        0x2Fu, 0x35u, 0xE0u, 0x8Du, 0xA4u, 0xE4u, 0xDAu, 0xC5u, 
        0xF3u, 0x37u, 0xD8u, 0x1Eu, 0xD4u, 0xD0u, 0x1Eu, 0xBCu, 
        0x43u, 0x7Cu, 0x84u, 0xF3u, 0xD7u, 0xF8u, 0x8Au, 0x59u, 
        0xEEu, 0x09u, 0x95u, 0xC0u, 0xABu, 0xCFu, 0x1Bu, 0xF6u, 
        0x8Fu, 0x5Au, 0x29u, 0x78u, 0x27u, 0x29u, 0x5Au, 0xDAu, 
        0xFDu, 0xD1u, 0xB5u, 0x9Bu, 0x31u, 0xA6u, 0x1Eu, 0x70u, 
        0xC2u, 0x75u, 0x54u, 0x59u, 0xEAu, 0xB2u, 0x8Bu, 0x84u, 
        0xCCu, 0x5Bu, 0x3Au, 0x96u, 0xC0u, 0x89u, 0x03u, 0x36u, 
        0xECu, 0x0Bu, 0xDFu, 0xD5u, 0x6Bu, 0xBAu, 0x07u, 0xEDu, 
        0x12u, 0x16u, 0x3Du, 0x42u, 0xC3u, 0x3Bu, 0x0Au, 0x40u, 
        0x98u, 0x34u, 0x28u, 0x32u, 0x4Fu, 0x45u, 0x7Fu, 0x72u, 
        0xCDu, 0x95u, 0x8Au, 0x22u, 0x18u, 0xCDu, 0x9Au, 0xA0u, 
        0x37u, 0x17u, 0xFFu, 0x04u, 0xD5u, 0xD9u, 0xE6u, 0xADu, 
        0xE5u, 0x4Cu, 0x67u, 0x53u, 0x44u, 0x26u, 0xF7u, 0x2Fu, 
        0xB3u, 0x01u, 0x14u, 0x6Eu, 0x8Au, 0xD7u, 0x82u, 0xAFu, 
        0x86u, 0xE5u, 0x52u, 0x70u, 0x7Cu, 0xD0u, 0x4Du, 0x5Bu, 
        0x67u, 0x8Fu, 0xD0u, 0x04u, 0x1Au, 0x33u, 0xABu, 0xC1u, 
        0xADu, 0xFFu, 0x5Cu, 0x51u, 0x80u, 0x23u, 0xBFu, 0x91u, 
        0x2Cu, 0x0Du, 0x96u, 0x92u, 0x4Bu, 0x26u, 0x0Fu, 0xC5u, 
        0x14u, 0x63u, 0x5Fu, 0xEAu, 0xA4u, 0xF6u, 0x66u, 0x67u, 
        0xD6u, 0x4Fu, 0x11u, 0xC3u, 0xD0u, 0x64u, 0x12u, 0xE8u, 
        0x77u, 0xF0u, 0x52u, 0x0Au, 0x90u, 0x52u, 0x87u, 0x3Du, 
        0xEAu, 0xB3u, 0x10u, 0x66u, 0x9Du, 0xC0u, 0x68u, 0x8Eu, 
        0x92u, 0xAFu, 0x37u, 0xDDu, 0x6Fu, 0xA2u, 0x0Bu, 0x3Fu, 
        0x01u, 0x00u, 0x00u, 0x00u
    },
    .inverseModuloData =
    {
        0xB7u, 0x03u, 0x28u, 0x42u, 0xF8u, 0xB2u, 0x45u, 0x0Bu, 
        0xFBu, 0xD4u, 0xFBu, 0xBDu, 0xA5u, 0x0Au, 0xD8u, 0x39u, 
        0x6Bu, 0xE3u, 0xB6u, 0x36u, 0x79u, 0x12u, 0x6Bu, 0xD7u, 
        0x51u, 0x40u, 0x7Eu, 0xC8u, 0x5Du, 0x5Eu, 0xC9u, 0xAEu, 
        0x10u, 0x8Eu, 0x53u, 0x18u, 0x25u, 0xC7u, 0x02u, 0x95u, 
        0xD5u, 0x7Cu, 0xFCu, 0xCBu, 0x92u, 0xC4u, 0xD0u, 0x9Du, 
        0x63u, 0xC1u, 0x8Au, 0x0Eu, 0x7Au, 0xC5u, 0x10u, 0x51u, 
        0xC0u, 0x60u, 0x77u, 0x5Cu, 0xA6u, 0x55u, 0x4Au, 0x26u, 
        0xC8u, 0x2Eu, 0x4Cu, 0xDAu, 0x69u, 0x8Bu, 0x86u, 0x5Fu, 
        0x77u, 0x87u, 0x4Eu, 0x25u, 0xB6u, 0xCDu, 0xC2u, 0x32u, 
        0xBBu, 0x1Eu, 0xD6u, 0xE7u, 0x5Cu, 0x2Fu, 0xA9u, 0xDCu, 
        0xCDu, 0x29u, 0x43u, 0x62u, 0x0Cu, 0xF7u, 0xA7u, 0x4Fu, 
        0xDEu, 0x8Cu, 0xE4u, 0xBDu, 0x49u, 0xC0u, 0x99u, 0x15u, 
        0xCDu, 0x8Fu, 0x54u, 0xA5u, 0xB8u, 0x79u, 0x5Fu, 0x70u, 
        0xFCu, 0x19u, 0x5Eu, 0x87u, 0x45u, 0xE0u, 0x3Eu, 0xB0u, 
        0x54u, 0xA8u, 0x1Du, 0xA4u, 0xF8u, 0x5Eu, 0x63u, 0xBFu, 
        0x0Eu, 0x3Au, 0x89u, 0x02u, 0x53u, 0x6Fu, 0x2Eu, 0x7Au, 
        0x0Cu, 0x74u, 0xE9u, 0x88u, 0xCFu, 0xC5u, 0xF0u, 0x41u, 
        0x9Eu, 0x84u, 0xB9u, 0x35u, 0xABu, 0x0Eu, 0xB1u, 0xCBu, 
        0x05u, 0x9Cu, 0x78u, 0x33u, 0x2Fu, 0x3Du, 0xECu, 0xDCu, 
        0x14u, 0x84u, 0x70u, 0x6Au, 0x4Au, 0xF2u, 0x94u, 0x79u, 
        0x15u, 0x44u, 0xA0u, 0x84u, 0xD5u, 0x69u, 0xFEu, 0x1Cu, 
        0xBBu, 0x6Au, 0x68u, 0x9Fu, 0xFFu, 0x1Bu, 0xA0u, 0x4Bu, 
        0x74u, 0xC3u, 0xE6u, 0x9Fu, 0x67u, 0xAFu, 0xA3u, 0xB4u, 
        0x96u, 0x6Au, 0x1Fu, 0xAEu, 0xB8u, 0xAFu, 0x51u, 0x46u, 
        0x79u, 0xA8u, 0xCAu, 0x81u, 0x72u, 0x78u, 0x11u, 0x7Du, 
        0x18u, 0xF4u, 0xAAu, 0x27u, 0xFBu, 0x9Cu, 0xBBu, 0x53u, 
        0x7Cu, 0x8Eu, 0x5Cu, 0xB7u, 0x72u, 0x2Eu, 0x5Eu, 0xF0u, 
        0x0Du, 0x85u, 0x80u, 0xC8u, 0xACu, 0xA4u, 0x1Du, 0x49u, 
        0x02u, 0x55u, 0x8Fu, 0x1Du, 0xEEu, 0x5Fu, 0x71u, 0x31u, 
        0xCFu, 0xBAu, 0xF3u, 0x08u, 0x14u, 0x9Du, 0xC0u, 0xC3u, 
        0xF3u, 0x1Cu, 0x19u, 0xE8u, 0xD7u, 0x4Cu, 0x14u, 0xA6u
    },
    .rBarData =
    {
        0x07u, 0x4Au, 0xD3u, 0xF0u, 0x60u, 0x5Fu, 0x5Au, 0x4Cu, 
        0xCCu, 0x75u, 0x15u, 0xA1u, 0xB4u, 0x11u, 0xB8u, 0x81u, 
        0xC5u, 0xDFu, 0x60u, 0xFEu, 0x0Fu, 0xA2u, 0xFFu, 0x05u, 
        0x9Cu, 0x89u, 0xF4u, 0x0Au, 0x53u, 0xB9u, 0x27u, 0xEFu, 
        0xC5u, 0x91u, 0xD1u, 0xC1u, 0xE4u, 0xEDu, 0x19u, 0x19u, 
        0xC5u, 0x24u, 0xC1u, 0x05u, 0xB7u, 0xA6u, 0x4Du, 0x61u, 
        0xFDu, 0xB6u, 0xF0u, 0x29u, 0x91u, 0x81u, 0x5Cu, 0x71u, 
        0x99u, 0xDEu, 0x2Bu, 0x01u, 0x05u, 0x62u, 0x4Au, 0xA8u, 
        0x7Cu, 0x48u, 0x97u, 0xE3u, 0x6Au, 0x1Fu, 0x41u, 0xB6u, 
        0x14u, 0xEAu, 0xA7u, 0xA9u, 0xAAu, 0xF2u, 0xA6u, 0xBBu, 
        0x83u, 0xC1u, 0x2Du, 0x4Cu, 0x19u, 0x47u, 0xC2u, 0xB5u, 
        0x85u, 0xD5u, 0x6Eu, 0x6Cu, 0xBCu, 0x21u, 0x44u, 0xB0u, 
        0x7Bu, 0x8Bu, 0x62u, 0xB2u, 0x7Au, 0xFFu, 0x9Cu, 0xA8u, 
        0x61u, 0x7Au, 0xFCu, 0xC9u, 0x99u, 0x01u, 0x2Du, 0x4Cu, 
        0x52u, 0xF1u, 0xE4u, 0x43u, 0x8Cu, 0x77u, 0xDDu, 0x9Cu, 
        0x44u, 0x9Du, 0xE0u, 0x83u, 0xF1u, 0xC2u, 0xE6u, 0xFDu, 
        0xAAu, 0x8Fu, 0x0Fu, 0x76u, 0x90u, 0xE3u, 0x4Au, 0x65u, 
        0xC1u, 0xA4u, 0x77u, 0xA0u, 0x60u, 0xD7u, 0xB3u, 0x5Fu, 
        0xDFu, 0xEBu, 0x90u, 0xA2u, 0xF5u, 0x6Du, 0xA1u, 0x5Eu, 
        0x55u, 0x64u, 0xD7u, 0xEDu, 0x98u, 0x44u, 0x29u, 0xA6u, 
        0x85u, 0x19u, 0x5Eu, 0x40u, 0x91u, 0xA8u, 0x20u, 0xC4u, 
        0x0Bu, 0x7Au, 0x76u, 0x85u, 0x17u, 0xDDu, 0x44u, 0x6Cu, 
        0x26u, 0x34u, 0x8Cu, 0xDDu, 0xC1u, 0x1Bu, 0x98u, 0xF5u, 
        0x5Cu, 0x85u, 0x94u, 0xE0u, 0x31u, 0xB6u, 0x10u, 0x91u, 
        0xD4u, 0x23u, 0x67u, 0xDCu, 0xDDu, 0x28u, 0x38u, 0xE3u, 
        0x6Cu, 0xC6u, 0x64u, 0x71u, 0xA0u, 0x8Fu, 0x65u, 0x97u, 
        0x07u, 0x60u, 0x99u, 0x06u, 0xD2u, 0x41u, 0xA3u, 0x61u, 
        0x6Au, 0x58u, 0x15u, 0x7Au, 0x20u, 0x81u, 0xA2u, 0x2Bu, 
        0xE8u, 0xCDu, 0x93u, 0x93u, 0x95u, 0x5Fu, 0x5Bu, 0x2Cu, 
        0x54u, 0x87u, 0xD9u, 0xF9u, 0x77u, 0x77u, 0xF5u, 0x32u, 
        0x16u, 0xEBu, 0xA8u, 0x24u, 0x31u, 0x4Bu, 0x36u, 0x27u, 
        0x76u, 0x82u, 0x01u, 0xC8u, 0x92u, 0x56u, 0x96u, 0x32u
    }
};
"""
        result3072_data = """#include "cmsis_compiler.h"
#include "cy_crypto_common.h"
#include "cy_si_config.h"
#include "cy_si_keystorage.h"
#include "cy_syslib.h"

/** Publickey in SFlash */
CY_SECTION(".cy_sflash_public_key") __USED const cy_si_stc_public_key_t cy_publicKey =
{
    .objSize = sizeof(cy_si_stc_public_key_t),
    .signatureScheme = 0UL,
    .publicKeyStruct =
    {
        .moduloAddr         = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, moduloData),
        .moduloSize         = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_MODULOLENGTH,
        .expAddr            = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, expData),
        .expSize            = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_EXPLENGTH,
        .barrettAddr        = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, barrettData),
        .inverseModuloAddr  = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, inverseModuloData),
        .rBarAddr           = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, rBarData)
    },
    .moduloData =
    {
        0x87u, 0x8Cu, 0x30u, 0xFDu, 0x02u, 0xA9u, 0xB4u, 0x8Au, 
        0x7Bu, 0x71u, 0xD8u, 0xB5u, 0x26u, 0x03u, 0x32u, 0x71u, 
        0x73u, 0xE8u, 0xB1u, 0x10u, 0x1Du, 0xA4u, 0x01u, 0x59u, 
        0xB6u, 0xD3u, 0xC4u, 0x57u, 0x19u, 0x11u, 0x2Eu, 0xF9u, 
        0x68u, 0xD0u, 0xBDu, 0x7Cu, 0xF7u, 0xEEu, 0x73u, 0x81u, 
        0xCDu, 0x61u, 0xC3u, 0x2Fu, 0x5Cu, 0x47u, 0xC8u, 0xBFu, 
        0xBDu, 0xFCu, 0x5Bu, 0x12u, 0x2Cu, 0x43u, 0x19u, 0xE9u, 
        0x6Bu, 0x47u, 0x21u, 0x77u, 0x82u, 0x3Du, 0xCCu, 0xE2u, 
        0xD5u, 0x82u, 0x19u, 0x72u, 0x00u, 0x7Eu, 0x5Bu, 0x3Au, 
        0x1Bu, 0x52u, 0xFDu, 0x75u, 0x6Eu, 0x71u, 0x78u, 0x83u, 
        0x6Eu, 0x01u, 0xAFu, 0x7Du, 0x71u, 0x1Bu, 0x70u, 0xD6u, 
        0x18u, 0x5Cu, 0xB7u, 0x66u, 0x76u, 0x6Cu, 0x2Eu, 0x7Du, 
        0x06u, 0x11u, 0x0Bu, 0x7Du, 0x3Eu, 0x70u, 0xC3u, 0x21u, 
        0x32u, 0xD2u, 0x15u, 0x16u, 0x45u, 0x33u, 0x8Bu, 0x4Fu, 
        0x95u, 0x77u, 0xDFu, 0x16u, 0xF5u, 0x67u, 0x30u, 0xB5u, 
        0x14u, 0x9Eu, 0x6Bu, 0x7Eu, 0x8Au, 0x30u, 0x8Cu, 0xA7u, 
        0xC9u, 0x47u, 0xE9u, 0x6Bu, 0x3Au, 0x7Du, 0x31u, 0x78u, 
        0x5Bu, 0x74u, 0x5Du, 0x32u, 0xB4u, 0x68u, 0x49u, 0x7Fu, 
        0x72u, 0x35u, 0x02u, 0x38u, 0x4Fu, 0x2Bu, 0x97u, 0x30u, 
        0xC1u, 0x3Au, 0xFDu, 0xE1u, 0x22u, 0x6Au, 0x01u, 0x41u, 
        0xEFu, 0x1Du, 0x61u, 0x32u, 0x03u, 0x4Eu, 0xF9u, 0x8Eu, 
        0xA9u, 0x96u, 0x86u, 0xAEu, 0x37u, 0x1Du, 0x90u, 0x6Du, 
        0xAEu, 0xE7u, 0x21u, 0x26u, 0x81u, 0x07u, 0x8Eu, 0xEBu, 
        0x9Bu, 0x99u, 0x38u, 0xF2u, 0x86u, 0xFDu, 0x77u, 0x7Fu, 
        0xECu, 0x8Cu, 0x7Eu, 0x20u, 0x8Au, 0x78u, 0xF7u, 0x57u, 
        0x1Eu, 0x1Fu, 0x3Bu, 0x58u, 0xBBu, 0x27u, 0xCAu, 0x2Au, 
        0xE7u, 0x86u, 0xDEu, 0x66u, 0xD2u, 0x50u, 0x1Cu, 0x84u, 
        0xE1u, 0x3Cu, 0x0Du, 0x15u, 0x29u, 0x83u, 0xEAu, 0xD5u, 
        0x53u, 0x68u, 0xE4u, 0xCCu, 0x0Au, 0x30u, 0xA7u, 0xB6u, 
        0x3Bu, 0xA0u, 0xA4u, 0x81u, 0x7Bu, 0x81u, 0x23u, 0x3Fu, 
        0x8Bu, 0x41u, 0x9Fu, 0x15u, 0x0Cu, 0x70u, 0x77u, 0x33u, 
        0xF4u, 0x75u, 0x11u, 0xD9u, 0x13u, 0x8Au, 0x5Cu, 0xF0u, 
        0x0Eu, 0x55u, 0xEAu, 0x12u, 0x42u, 0x58u, 0xB2u, 0x1Du, 
        0x6Bu, 0xECu, 0xA9u, 0x27u, 0x9Eu, 0x7Cu, 0x60u, 0xE7u, 
        0xA7u, 0xF5u, 0xADu, 0x74u, 0x1Eu, 0x2Cu, 0x6Eu, 0x11u, 
        0x12u, 0xDFu, 0x4Eu, 0xE0u, 0xAEu, 0xD4u, 0x85u, 0x25u, 
        0xCAu, 0x76u, 0xBEu, 0x4Au, 0xD2u, 0xA5u, 0xF0u, 0xD1u, 
        0x37u, 0x26u, 0xCCu, 0xDDu, 0xC0u, 0xADu, 0x51u, 0x1Du, 
        0x2Du, 0xB5u, 0x90u, 0xA7u, 0xD8u, 0x69u, 0xFCu, 0x1Du, 
        0x9Fu, 0x1Au, 0x55u, 0x18u, 0xE7u, 0x83u, 0xADu, 0x53u, 
        0xD2u, 0x33u, 0x3Au, 0x98u, 0x5Au, 0x2Au, 0x8Du, 0xDBu, 
        0xB2u, 0xB7u, 0x6Eu, 0x1Du, 0x75u, 0xC2u, 0x37u, 0xBFu, 
        0x4Eu, 0xB0u, 0x65u, 0xCFu, 0x79u, 0x32u, 0xB1u, 0x1Bu, 
        0x97u, 0x2Cu, 0x19u, 0x4Au, 0x2Du, 0xFFu, 0x4Bu, 0x99u, 
        0x75u, 0x74u, 0x97u, 0x5Du, 0x1Eu, 0x28u, 0x26u, 0xC1u, 
        0x47u, 0x9Cu, 0x1Au, 0x32u, 0x29u, 0x87u, 0x51u, 0xDCu, 
        0xACu, 0x3Du, 0xCCu, 0x54u, 0x79u, 0x2Au, 0x89u, 0x22u, 
        0xF5u, 0xCDu, 0x42u, 0x2Cu, 0xC9u, 0x83u, 0xE4u, 0xC2u
    },
    .expData =
    {
        0x01u, 0x00u, 0x01u, 0x00u
    },
    .barrettData =
    {
        0xEBu, 0x2Au, 0xB6u, 0xADu, 0x7Cu, 0x34u, 0xD2u, 0xA2u, 
        0x38u, 0x8Du, 0x30u, 0x75u, 0xEDu, 0x8Bu, 0x32u, 0xE3u, 
        0x81u, 0xB8u, 0x4Cu, 0xF6u, 0x78u, 0x6Eu, 0x37u, 0xF7u, 
        0xEFu, 0x1Fu, 0x3Bu, 0xFFu, 0x35u, 0xAFu, 0x5Eu, 0x11u, 
        0x64u, 0xD3u, 0xF3u, 0xF9u, 0x3Au, 0x97u, 0xE6u, 0x4Au, 
        0xD5u, 0x98u, 0xF9u, 0x53u, 0xFAu, 0x3Au, 0x34u, 0x34u, 
        0xD2u, 0x3Cu, 0xCFu, 0x41u, 0x9Eu, 0xA3u, 0x52u, 0x16u, 
        0x23u, 0x7Cu, 0x90u, 0x35u, 0x29u, 0x2Du, 0x1Bu, 0x58u, 
        0x90u, 0x68u, 0xD3u, 0x40u, 0xA6u, 0xDCu, 0x54u, 0x44u, 
        0xB7u, 0xB0u, 0xA5u, 0x42u, 0x3Fu, 0x25u, 0x7Du, 0xBAu, 
        0x50u, 0xACu, 0xA0u, 0xB4u, 0x06u, 0x1Du, 0x10u, 0x22u, 
        0x7Bu, 0x45u, 0xF5u, 0xABu, 0xC1u, 0x79u, 0x92u, 0xBEu, 
        0x76u, 0x6Au, 0x20u, 0x25u, 0x7Bu, 0x5Fu, 0x1Bu, 0x9Eu, 
        0xE9u, 0x8Bu, 0x52u, 0x91u, 0xD5u, 0x68u, 0xDEu, 0xF2u, 
        0x55u, 0xEBu, 0x37u, 0x9Du, 0xA8u, 0x34u, 0x4Eu, 0x39u, 
        0x4Eu, 0x05u, 0x03u, 0xA2u, 0x87u, 0xB4u, 0x08u, 0x93u, 
        0xBCu, 0x15u, 0x1Bu, 0x7Cu, 0x35u, 0xF5u, 0x3Bu, 0xD0u, 
        0x04u, 0xC4u, 0x0Du, 0x3Eu, 0xDAu, 0xD3u, 0x92u, 0xB2u, 
        0xA7u, 0xC1u, 0xCEu, 0xBDu, 0x70u, 0xC2u, 0x2Fu, 0xDFu, 
        0x88u, 0xE5u, 0x7Cu, 0xDEu, 0xD6u, 0xCBu, 0x45u, 0x10u, 
        0xABu, 0x98u, 0xD7u, 0xE6u, 0xAAu, 0x40u, 0x16u, 0x19u, 
        0x2Cu, 0x86u, 0x56u, 0xD6u, 0x46u, 0x71u, 0x23u, 0x82u, 
        0x73u, 0xE3u, 0x0Fu, 0xA5u, 0x6Eu, 0x7Du, 0x41u, 0x28u, 
        0x85u, 0x96u, 0x31u, 0x6Cu, 0x9Fu, 0x43u, 0x28u, 0x15u, 
        0x34u, 0x1Fu, 0x2Du, 0x61u, 0x12u, 0x8Cu, 0xB2u, 0xA2u, 
        0x1Bu, 0x81u, 0x04u, 0xF0u, 0x26u, 0x0Bu, 0x39u, 0xD3u, 
        0x9Cu, 0x04u, 0xC3u, 0xB7u, 0x11u, 0x97u, 0xE2u, 0x50u, 
        0xACu, 0x76u, 0x75u, 0x74u, 0xC0u, 0xCBu, 0xACu, 0xBCu, 
        0x51u, 0x68u, 0xEFu, 0x3Au, 0x3Eu, 0xC3u, 0xC4u, 0xF4u, 
        0xADu, 0x45u, 0x42u, 0x3Fu, 0xDFu, 0x68u, 0xA9u, 0x1Eu, 
        0x69u, 0x08u, 0x2Au, 0xA2u, 0x45u, 0xCCu, 0x1Bu, 0xBCu, 
        0x82u, 0xCBu, 0xDFu, 0x8Fu, 0xACu, 0x09u, 0x14u, 0xC2u, 
        0xFCu, 0xBBu, 0xB5u, 0xDFu, 0x61u, 0x62u, 0x4Eu, 0xE4u, 
        0x05u, 0x2Bu, 0xA7u, 0x09u, 0x1Au, 0xDFu, 0xFCu, 0x8Eu, 
        0x0Bu, 0x56u, 0x82u, 0xC1u, 0x45u, 0x1Au, 0x71u, 0xF8u, 
        0x17u, 0xEAu, 0x47u, 0xF3u, 0xF4u, 0xE4u, 0x7Du, 0xECu, 
        0x6Bu, 0xC8u, 0x28u, 0xFEu, 0x4Eu, 0x83u, 0x75u, 0xB7u, 
        0xD7u, 0x7Au, 0x8Au, 0x50u, 0xFDu, 0xEAu, 0x00u, 0x8Du, 
        0x05u, 0xCBu, 0x90u, 0x05u, 0xD7u, 0xADu, 0xF0u, 0x4Au, 
        0x04u, 0x4Eu, 0x8Fu, 0x83u, 0x0Du, 0xC2u, 0xB5u, 0x92u, 
        0xABu, 0x46u, 0xE8u, 0xCFu, 0xADu, 0xABu, 0x49u, 0x51u, 
        0x60u, 0x56u, 0x45u, 0x8Fu, 0x6Au, 0xCAu, 0x97u, 0xBCu, 
        0xE5u, 0x95u, 0xFCu, 0x7Cu, 0x51u, 0x98u, 0x51u, 0x7Eu, 
        0x92u, 0xC4u, 0x12u, 0x7Fu, 0x86u, 0x9Cu, 0xADu, 0xE2u, 
        0x7Au, 0x24u, 0x42u, 0x17u, 0xE6u, 0x12u, 0x24u, 0xCDu, 
        0x25u, 0x0Au, 0x8Bu, 0xB7u, 0xB9u, 0xC9u, 0x53u, 0x86u, 
        0xECu, 0x06u, 0xEBu, 0x13u, 0xB6u, 0x34u, 0x0Cu, 0xCDu, 
        0xF2u, 0xEBu, 0xEAu, 0x6Eu, 0xE4u, 0x66u, 0x44u, 0x50u, 
        0x01u, 0x00u, 0x00u, 0x00u
    },
    .inverseModuloData =
    {
        0xC9u, 0x86u, 0xD5u, 0xE9u, 0x8Cu, 0xEFu, 0xA5u, 0x55u, 
        0x1Du, 0x35u, 0xB5u, 0x38u, 0x84u, 0xD5u, 0x5Au, 0xD4u, 
        0x7Eu, 0x7Cu, 0xC1u, 0x7Au, 0x16u, 0xDAu, 0x42u, 0x00u, 
        0x06u, 0x9Fu, 0x20u, 0x4Cu, 0x1Bu, 0xD4u, 0x7Cu, 0xDCu, 
        0x0Cu, 0xB6u, 0x73u, 0xADu, 0x29u, 0x11u, 0xBEu, 0x7Fu, 
        0x52u, 0x8Eu, 0xA4u, 0x63u, 0xABu, 0x0Au, 0xABu, 0x28u, 
        0x0Bu, 0x23u, 0x65u, 0xD0u, 0x5Cu, 0x86u, 0x49u, 0x47u, 
        0xD6u, 0x13u, 0x46u, 0xB3u, 0x88u, 0x72u, 0xCCu, 0x59u, 
        0x66u, 0xB2u, 0x8Au, 0xF8u, 0xA9u, 0xC9u, 0x65u, 0x45u, 
        0x7Bu, 0x04u, 0xD9u, 0xDEu, 0xBDu, 0x43u, 0x9Eu, 0x46u, 
        0x87u, 0xFEu, 0xADu, 0x9Au, 0x70u, 0x95u, 0x6Du, 0x75u, 
        0x5Au, 0xE6u, 0xACu, 0x60u, 0x8Eu, 0x7Fu, 0x52u, 0xD8u, 
        0x27u, 0x1Fu, 0x94u, 0x9Au, 0x8Du, 0x4Bu, 0x20u, 0xDCu, 
        0x6Du, 0x37u, 0x96u, 0x04u, 0x22u, 0xF9u, 0x09u, 0xE7u, 
        0xDFu, 0xFDu, 0xF8u, 0x46u, 0x77u, 0x83u, 0x6Au, 0xE0u, 
        0xE9u, 0x6Bu, 0xCFu, 0xE5u, 0xB8u, 0xC1u, 0xF6u, 0xF3u, 
        0x96u, 0x07u, 0xEEu, 0x6Eu, 0xABu, 0x20u, 0xD2u, 0xCDu, 
        0x1Bu, 0xE3u, 0xD1u, 0xD5u, 0x75u, 0x0Au, 0x08u, 0x6Bu, 
        0x38u, 0xA2u, 0x93u, 0x35u, 0x23u, 0x3Du, 0x57u, 0x01u, 
        0xCDu, 0x90u, 0x16u, 0xA6u, 0x4Cu, 0x45u, 0xF9u, 0xE8u, 
        0x83u, 0xA4u, 0x5Eu, 0x50u, 0x47u, 0xFAu, 0x85u, 0x51u, 
        0x6Bu, 0x6Fu, 0x27u, 0xEFu, 0x6Eu, 0x6Du, 0x09u, 0x19u, 
        0xD4u, 0x63u, 0xE7u, 0x4Cu, 0x77u, 0x62u, 0x86u, 0x15u, 
        0x0Du, 0x80u, 0x05u, 0x59u, 0xC3u, 0x84u, 0xD3u, 0x3Fu, 
        0x88u, 0x96u, 0xA3u, 0x20u, 0x2Du, 0xECu, 0xCCu, 0x5Au, 
        0x4Fu, 0xB1u, 0xDBu, 0x3Du, 0x17u, 0x5Fu, 0xEAu, 0x50u, 
        0x5Fu, 0x9Eu, 0x2Cu, 0x83u, 0x11u, 0x2Du, 0xCEu, 0xFBu, 
        0x3Du, 0x59u, 0xBAu, 0x44u, 0x04u, 0x81u, 0xD6u, 0xBDu, 
        0x6Au, 0x7Du, 0xBBu, 0xBEu, 0x37u, 0x73u, 0x45u, 0xCFu, 
        0x74u, 0x4Fu, 0x98u, 0xDDu, 0x31u, 0x06u, 0x87u, 0x3Du, 
        0x03u, 0xF2u, 0x98u, 0x6Bu, 0xF3u, 0xFDu, 0x57u, 0x79u, 
        0x70u, 0x85u, 0x79u, 0x65u, 0x1Bu, 0xA4u, 0xEAu, 0x65u, 
        0x00u, 0x16u, 0x8Fu, 0x3Fu, 0xBFu, 0x49u, 0x2Eu, 0xD5u, 
        0x60u, 0x2Cu, 0xE2u, 0x2Du, 0x41u, 0xEFu, 0x8Au, 0xB0u, 
        0x06u, 0x97u, 0x62u, 0xF9u, 0x48u, 0xB8u, 0x17u, 0x75u, 
        0xF2u, 0x75u, 0xECu, 0xCFu, 0xDEu, 0x5Au, 0x19u, 0xE1u, 
        0xEDu, 0x37u, 0xC9u, 0x6Fu, 0x7Bu, 0x63u, 0x11u, 0xBFu, 
        0x7Cu, 0xADu, 0x30u, 0xD7u, 0x8Fu, 0xEFu, 0x88u, 0x09u, 
        0xB0u, 0xADu, 0x0Eu, 0xD6u, 0xD5u, 0x7Eu, 0xF0u, 0xF2u, 
        0x72u, 0x7Cu, 0x28u, 0x93u, 0xDCu, 0xACu, 0x5Bu, 0x1Eu, 
        0x48u, 0x0Du, 0x4Bu, 0x57u, 0x54u, 0xA6u, 0x91u, 0xA7u, 
        0x77u, 0x1Cu, 0x98u, 0xE6u, 0xACu, 0x59u, 0xDEu, 0x09u, 
        0x35u, 0xBEu, 0x1Eu, 0xDBu, 0x59u, 0x83u, 0x75u, 0x6Au, 
        0xD9u, 0xB4u, 0x84u, 0xBEu, 0x64u, 0xC9u, 0x51u, 0x48u, 
        0xCCu, 0x78u, 0xE5u, 0x79u, 0x34u, 0x06u, 0x76u, 0x7Cu, 
        0xB5u, 0xC3u, 0xE4u, 0x75u, 0x06u, 0x8Du, 0xEEu, 0x1Fu, 
        0x58u, 0x82u, 0x37u, 0x20u, 0x80u, 0xE0u, 0x5Cu, 0xEFu, 
        0x0Bu, 0x81u, 0x66u, 0x36u, 0x52u, 0xBEu, 0x6Cu, 0x30u
    },
    .rBarData =
    {
        0x79u, 0x73u, 0xCFu, 0x02u, 0xFDu, 0x56u, 0x4Bu, 0x75u, 
        0x84u, 0x8Eu, 0x27u, 0x4Au, 0xD9u, 0xFCu, 0xCDu, 0x8Eu, 
        0x8Cu, 0x17u, 0x4Eu, 0xEFu, 0xE2u, 0x5Bu, 0xFEu, 0xA6u, 
        0x49u, 0x2Cu, 0x3Bu, 0xA8u, 0xE6u, 0xEEu, 0xD1u, 0x06u, 
        0x97u, 0x2Fu, 0x42u, 0x83u, 0x08u, 0x11u, 0x8Cu, 0x7Eu, 
        0x32u, 0x9Eu, 0x3Cu, 0xD0u, 0xA3u, 0xB8u, 0x37u, 0x40u, 
        0x42u, 0x03u, 0xA4u, 0xEDu, 0xD3u, 0xBCu, 0xE6u, 0x16u, 
        0x94u, 0xB8u, 0xDEu, 0x88u, 0x7Du, 0xC2u, 0x33u, 0x1Du, 
        0x2Au, 0x7Du, 0xE6u, 0x8Du, 0xFFu, 0x81u, 0xA4u, 0xC5u, 
        0xE4u, 0xADu, 0x02u, 0x8Au, 0x91u, 0x8Eu, 0x87u, 0x7Cu, 
        0x91u, 0xFEu, 0x50u, 0x82u, 0x8Eu, 0xE4u, 0x8Fu, 0x29u, 
        0xE7u, 0xA3u, 0x48u, 0x99u, 0x89u, 0x93u, 0xD1u, 0x82u, 
        0xF9u, 0xEEu, 0xF4u, 0x82u, 0xC1u, 0x8Fu, 0x3Cu, 0xDEu, 
        0xCDu, 0x2Du, 0xEAu, 0xE9u, 0xBAu, 0xCCu, 0x74u, 0xB0u, 
        0x6Au, 0x88u, 0x20u, 0xE9u, 0x0Au, 0x98u, 0xCFu, 0x4Au, 
        0xEBu, 0x61u, 0x94u, 0x81u, 0x75u, 0xCFu, 0x73u, 0x58u, 
        0x36u, 0xB8u, 0x16u, 0x94u, 0xC5u, 0x82u, 0xCEu, 0x87u, 
        0xA4u, 0x8Bu, 0xA2u, 0xCDu, 0x4Bu, 0x97u, 0xB6u, 0x80u, 
        0x8Du, 0xCAu, 0xFDu, 0xC7u, 0xB0u, 0xD4u, 0x68u, 0xCFu, 
        0x3Eu, 0xC5u, 0x02u, 0x1Eu, 0xDDu, 0x95u, 0xFEu, 0xBEu, 
        0x10u, 0xE2u, 0x9Eu, 0xCDu, 0xFCu, 0xB1u, 0x06u, 0x71u, 
        0x56u, 0x69u, 0x79u, 0x51u, 0xC8u, 0xE2u, 0x6Fu, 0x92u, 
        0x51u, 0x18u, 0xDEu, 0xD9u, 0x7Eu, 0xF8u, 0x71u, 0x14u, 
        0x64u, 0x66u, 0xC7u, 0x0Du, 0x79u, 0x02u, 0x88u, 0x80u, 
        0x13u, 0x73u, 0x81u, 0xDFu, 0x75u, 0x87u, 0x08u, 0xA8u, 
        0xE1u, 0xE0u, 0xC4u, 0xA7u, 0x44u, 0xD8u, 0x35u, 0xD5u, 
        0x18u, 0x79u, 0x21u, 0x99u, 0x2Du, 0xAFu, 0xE3u, 0x7Bu, 
        0x1Eu, 0xC3u, 0xF2u, 0xEAu, 0xD6u, 0x7Cu, 0x15u, 0x2Au, 
        0xACu, 0x97u, 0x1Bu, 0x33u, 0xF5u, 0xCFu, 0x58u, 0x49u, 
        0xC4u, 0x5Fu, 0x5Bu, 0x7Eu, 0x84u, 0x7Eu, 0xDCu, 0xC0u, 
        0x74u, 0xBEu, 0x60u, 0xEAu, 0xF3u, 0x8Fu, 0x88u, 0xCCu, 
        0x0Bu, 0x8Au, 0xEEu, 0x26u, 0xECu, 0x75u, 0xA3u, 0x0Fu, 
        0xF1u, 0xAAu, 0x15u, 0xEDu, 0xBDu, 0xA7u, 0x4Du, 0xE2u, 
        0x94u, 0x13u, 0x56u, 0xD8u, 0x61u, 0x83u, 0x9Fu, 0x18u, 
        0x58u, 0x0Au, 0x52u, 0x8Bu, 0xE1u, 0xD3u, 0x91u, 0xEEu, 
        0xEDu, 0x20u, 0xB1u, 0x1Fu, 0x51u, 0x2Bu, 0x7Au, 0xDAu, 
        0x35u, 0x89u, 0x41u, 0xB5u, 0x2Du, 0x5Au, 0x0Fu, 0x2Eu, 
        0xC8u, 0xD9u, 0x33u, 0x22u, 0x3Fu, 0x52u, 0xAEu, 0xE2u, 
        0xD2u, 0x4Au, 0x6Fu, 0x58u, 0x27u, 0x96u, 0x03u, 0xE2u, 
        0x60u, 0xE5u, 0xAAu, 0xE7u, 0x18u, 0x7Cu, 0x52u, 0xACu, 
        0x2Du, 0xCCu, 0xC5u, 0x67u, 0xA5u, 0xD5u, 0x72u, 0x24u, 
        0x4Du, 0x48u, 0x91u, 0xE2u, 0x8Au, 0x3Du, 0xC8u, 0x40u, 
        0xB1u, 0x4Fu, 0x9Au, 0x30u, 0x86u, 0xCDu, 0x4Eu, 0xE4u, 
        0x68u, 0xD3u, 0xE6u, 0xB5u, 0xD2u, 0x00u, 0xB4u, 0x66u, 
        0x8Au, 0x8Bu, 0x68u, 0xA2u, 0xE1u, 0xD7u, 0xD9u, 0x3Eu, 
        0xB8u, 0x63u, 0xE5u, 0xCDu, 0xD6u, 0x78u, 0xAEu, 0x23u, 
        0x53u, 0xC2u, 0x33u, 0xABu, 0x86u, 0xD5u, 0x76u, 0xDDu, 
        0x0Au, 0x32u, 0xBDu, 0xD3u, 0x36u, 0x7Cu, 0x1Bu, 0x3Du
    }
};
"""

        result4096_data = """#include "cmsis_compiler.h"
#include "cy_crypto_common.h"
#include "cy_si_config.h"
#include "cy_si_keystorage.h"
#include "cy_syslib.h"

/** Publickey in SFlash */
CY_SECTION(".cy_sflash_public_key") __USED const cy_si_stc_public_key_t cy_publicKey =
{
    .objSize = sizeof(cy_si_stc_public_key_t),
    .signatureScheme = 0UL,
    .publicKeyStruct =
    {
        .moduloAddr         = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, moduloData),
        .moduloSize         = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_MODULOLENGTH,
        .expAddr            = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, expData),
        .expSize            = CY_SI_PUBLIC_KEY_SIZEOF_BYTE * CY_SI_PUBLIC_KEY_EXPLENGTH,
        .barrettAddr        = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, barrettData),
        .inverseModuloAddr  = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, inverseModuloData),
        .rBarAddr           = CY_SI_PUBLIC_KEY + offsetof(cy_si_stc_public_key_t, rBarData)
    },
    .moduloData =
    {
        0x05u, 0xF8u, 0xE4u, 0x4Du, 0x48u, 0x1Au, 0x78u, 0x3Du, 
        0x11u, 0x56u, 0xFEu, 0xC2u, 0xC5u, 0xD7u, 0x5Eu, 0xCFu, 
        0xADu, 0x95u, 0x3Bu, 0xB5u, 0xE7u, 0xC7u, 0xD0u, 0x95u, 
        0xAEu, 0xF4u, 0x41u, 0x9Du, 0xFDu, 0xF4u, 0xE8u, 0x13u, 
        0xA5u, 0xE2u, 0x11u, 0xBFu, 0x9Eu, 0xF1u, 0x55u, 0x08u, 
        0x44u, 0xF2u, 0x1Cu, 0x8Fu, 0xFDu, 0xE4u, 0x42u, 0xFCu, 
        0x88u, 0xD1u, 0x0Eu, 0x8Cu, 0xF1u, 0x4Cu, 0xDAu, 0x3Cu, 
        0x3Cu, 0x4Eu, 0x3Fu, 0xAFu, 0x74u, 0x5Bu, 0x3Du, 0x42u, 
        0x3Cu, 0xFDu, 0xE3u, 0xEFu, 0x85u, 0x23u, 0x1Cu, 0xC6u, 
        0x66u, 0xD9u, 0x66u, 0xD1u, 0x80u, 0xAFu, 0x61u, 0xC3u, 
        0x17u, 0x61u, 0x6Eu, 0x8Cu, 0xC1u, 0xA4u, 0xDAu, 0x4Au, 
        0xA0u, 0x27u, 0x62u, 0x51u, 0xE0u, 0x81u, 0x4Eu, 0x2Eu, 
        0x39u, 0xCDu, 0x04u, 0xB9u, 0x76u, 0x5Cu, 0xE5u, 0xFFu, 
        0x00u, 0x82u, 0x58u, 0x94u, 0xF1u, 0x62u, 0xC0u, 0xE7u, 
        0x23u, 0xE4u, 0xEBu, 0x56u, 0x08u, 0x9Cu, 0x67u, 0x50u, 
        0xDCu, 0xE1u, 0xD4u, 0xA2u, 0xF7u, 0xA8u, 0xFFu, 0x9Au, 
        0x9Du, 0x45u, 0x38u, 0x0Au, 0xEDu, 0x0Eu, 0x88u, 0x09u, 
        0x26u, 0xF1u, 0x3Fu, 0x8Bu, 0xF7u, 0x84u, 0x2Eu, 0x00u, 
        0x13u, 0x4Cu, 0x45u, 0x84u, 0x80u, 0xE0u, 0x78u, 0xBFu, 
        0x2Cu, 0x8Au, 0x66u, 0xFFu, 0x33u, 0xC8u, 0x79u, 0xE2u, 
        0xA1u, 0x1Bu, 0xBAu, 0xA1u, 0x9Du, 0xEEu, 0xBEu, 0x15u, 
        0xE7u, 0xCEu, 0x87u, 0xE7u, 0x09u, 0xCFu, 0x39u, 0xDEu, 
        0x36u, 0x6Fu, 0xA7u, 0x4Cu, 0x9Au, 0x67u, 0xFBu, 0x0Eu, 
        0x55u, 0xCCu, 0x61u, 0x38u, 0x57u, 0xCFu, 0x16u, 0xFDu, 
        0x93u, 0xD8u, 0xF4u, 0xA9u, 0xF4u, 0x34u, 0xD6u, 0x4Fu, 
        0x26u, 0x05u, 0x15u, 0xB1u, 0x6Eu, 0x75u, 0x47u, 0xE3u, 
        0x41u, 0x1Eu, 0xCFu, 0x44u, 0xE2u, 0xE9u, 0xCBu, 0xC0u, 
        0x91u, 0xD2u, 0xC0u, 0xCBu, 0x3Cu, 0x3Bu, 0xEEu, 0x57u, 
        0x97u, 0xECu, 0x57u, 0xCFu, 0xB2u, 0x54u, 0xDCu, 0x0Bu, 
        0xB0u, 0x5Fu, 0xE4u, 0x24u, 0x8Fu, 0x08u, 0x55u, 0x91u, 
        0xD7u, 0x38u, 0x70u, 0xC6u, 0xBCu, 0xAFu, 0xABu, 0xDCu, 
        0x95u, 0x7Eu, 0xD7u, 0x15u, 0x32u, 0x86u, 0xF2u, 0xF6u, 
        0x54u, 0xE8u, 0xB5u, 0x2Cu, 0x2Du, 0xA6u, 0x25u, 0xBDu, 
        0x1Au, 0xE8u, 0xD3u, 0x36u, 0x28u, 0xB4u, 0x21u, 0x6Fu, 
        0xE9u, 0x17u, 0xFFu, 0xC7u, 0x36u, 0x04u, 0xABu, 0xE0u, 
        0xEAu, 0x9Cu, 0x84u, 0x63u, 0x46u, 0x41u, 0xE5u, 0x29u, 
        0xC6u, 0x38u, 0x83u, 0xECu, 0xFEu, 0x6Du, 0xDFu, 0xF4u, 
        0xACu, 0xD8u, 0x2Bu, 0xEAu, 0x50u, 0x11u, 0xB0u, 0xBFu, 
        0x4Bu, 0x8Fu, 0xC2u, 0x6Bu, 0x41u, 0xB5u, 0x3Bu, 0xFBu, 
        0x6Bu, 0x96u, 0x8Du, 0x1Cu, 0x6Cu, 0xB2u, 0x7Bu, 0x7Fu, 
        0x6Au, 0x18u, 0x5Cu, 0xB2u, 0x36u, 0x35u, 0x38u, 0x8Fu, 
        0x81u, 0x57u, 0xF5u, 0x4Fu, 0x71u, 0xEBu, 0xA8u, 0x16u, 
        0x8Fu, 0x13u, 0x76u, 0xE3u, 0xF9u, 0x5Au, 0x67u, 0xCFu, 
        0x49u, 0x03u, 0x21u, 0x27u, 0x35u, 0x5Bu, 0xA9u, 0x8Au, 
        0x59u, 0x65u, 0x5Du, 0x01u, 0x58u, 0x57u, 0x93u, 0xBEu, 
        0xE0u, 0x0Cu, 0xF3u, 0x72u, 0xE9u, 0xE8u, 0xF9u, 0x97u, 
        0xD3u, 0x06u, 0x29u, 0xE0u, 0x19u, 0xB7u, 0x9Bu, 0x33u, 
        0x69u, 0x2Bu, 0xA3u, 0x40u, 0x24u, 0xECu, 0xF7u, 0xAFu, 
        0x55u, 0x3Fu, 0x79u, 0x0Du, 0xF4u, 0x4Bu, 0x85u, 0x21u, 
        0x7Eu, 0xD3u, 0x47u, 0x54u, 0x7Eu, 0x14u, 0x51u, 0x80u, 
        0xECu, 0x4Cu, 0xB2u, 0x30u, 0x8Eu, 0x3Fu, 0x26u, 0xC5u, 
        0x2Au, 0x89u, 0x91u, 0x8Cu, 0x3Du, 0x8Du, 0xD6u, 0xF1u, 
        0x0Bu, 0xD1u, 0x96u, 0x93u, 0x64u, 0xEAu, 0xF4u, 0x63u, 
        0xB1u, 0x32u, 0x51u, 0x66u, 0xFAu, 0x4Au, 0x9Bu, 0x3Du, 
        0x03u, 0x59u, 0x49u, 0xC1u, 0x33u, 0x18u, 0xE9u, 0xC4u, 
        0x7Du, 0x26u, 0x47u, 0x4Du, 0xA6u, 0xDDu, 0x35u, 0x19u, 
        0x8Du, 0x97u, 0x11u, 0x44u, 0x5Bu, 0xF1u, 0x4Du, 0xB3u, 
        0x92u, 0xBDu, 0x79u, 0x0Du, 0xE5u, 0x18u, 0x47u, 0x81u, 
        0x37u, 0x3Du, 0x35u, 0x26u, 0xB9u, 0xD1u, 0x0Fu, 0x49u, 
        0xCCu, 0x49u, 0xF4u, 0x48u, 0x44u, 0xAAu, 0xC7u, 0x4Bu, 
        0x32u, 0xA3u, 0x34u, 0xBBu, 0x97u, 0xF3u, 0x06u, 0x71u, 
        0x5Cu, 0xC2u, 0xFEu, 0x60u, 0x75u, 0xFAu, 0x52u, 0x63u, 
        0xFCu, 0x03u, 0x8Au, 0x64u, 0x35u, 0x97u, 0xF3u, 0x91u, 
        0x5Cu, 0x6Eu, 0x7Au, 0xC2u, 0x0Fu, 0x17u, 0x83u, 0xD4u
    },
    .expData =
    {
        0x01u, 0x00u, 0x01u, 0x00u
    },
    .barrettData =
    {
        0x9Eu, 0xEBu, 0xFCu, 0xA2u, 0x2Cu, 0xACu, 0xADu, 0x38u, 
        0x69u, 0xDCu, 0x51u, 0xAFu, 0x58u, 0x18u, 0x6Eu, 0x73u, 
        0xBDu, 0x3Au, 0x58u, 0xCAu, 0x30u, 0x4Bu, 0x62u, 0x23u, 
        0xA5u, 0x93u, 0x45u, 0xA3u, 0x10u, 0xC9u, 0x89u, 0x46u, 
        0xE3u, 0xDCu, 0x61u, 0xD2u, 0x16u, 0x91u, 0x1Bu, 0x42u, 
        0x33u, 0x79u, 0x38u, 0x61u, 0xB3u, 0x83u, 0x8Du, 0x80u, 
        0xE9u, 0x03u, 0xE8u, 0x29u, 0x46u, 0x14u, 0x09u, 0xE5u, 
        0xA3u, 0xA0u, 0x87u, 0xDDu, 0x36u, 0x9Fu, 0x98u, 0x44u, 
        0xB5u, 0x08u, 0x49u, 0x25u, 0x7Au, 0x8Au, 0xD4u, 0x46u, 
        0x68u, 0x41u, 0xF2u, 0xC5u, 0x48u, 0x8Fu, 0x45u, 0x2Cu, 
        0x0Fu, 0xC0u, 0x9Eu, 0x12u, 0xB2u, 0x43u, 0xE7u, 0xA8u, 
        0x4Eu, 0x04u, 0x32u, 0x51u, 0xEEu, 0xC8u, 0x70u, 0x92u, 
        0xAAu, 0x10u, 0xADu, 0x23u, 0xA4u, 0x95u, 0xBAu, 0xCAu, 
        0x3Eu, 0xEBu, 0xAFu, 0x12u, 0x9Eu, 0xF4u, 0x14u, 0x03u, 
        0x62u, 0x29u, 0x02u, 0xF9u, 0x05u, 0x2Fu, 0xF4u, 0x7Du, 
        0xAEu, 0x55u, 0xA6u, 0xEFu, 0x72u, 0xC2u, 0x83u, 0xFDu, 
        0xEAu, 0x58u, 0x63u, 0xC7u, 0x52u, 0xE6u, 0x30u, 0xD0u, 
        0x27u, 0x59u, 0x0Eu, 0x84u, 0xFAu, 0xF6u, 0x0Bu, 0xB1u, 
        0x57u, 0xE7u, 0xF3u, 0x0Eu, 0xFFu, 0xF0u, 0xB0u, 0x6Au, 
        0x00u, 0xD5u, 0x95u, 0xFBu, 0xFAu, 0x53u, 0x5Bu, 0xFDu, 
        0x92u, 0x76u, 0x8Eu, 0x1Au, 0xF1u, 0x58u, 0xFCu, 0x3Eu, 
        0x2Du, 0x30u, 0x83u, 0x33u, 0x50u, 0xD6u, 0x20u, 0x42u, 
        0xF0u, 0xD3u, 0xA7u, 0xC9u, 0x73u, 0x67u, 0xD7u, 0xDEu, 
        0x6Bu, 0x0Cu, 0xC3u, 0x09u, 0x54u, 0x5Au, 0x8Bu, 0x5Bu, 
        0x81u, 0x0Au, 0x11u, 0xFAu, 0x9Du, 0x52u, 0x47u, 0x13u, 
        0x47u, 0x83u, 0xBAu, 0xDDu, 0x9Eu, 0x60u, 0x73u, 0x10u, 
        0xBEu, 0x1Du, 0x18u, 0x1Eu, 0x27u, 0x9Cu, 0x38u, 0xF9u, 
        0x50u, 0x76u, 0x48u, 0xFFu, 0x85u, 0xB8u, 0x39u, 0x98u, 
        0xF6u, 0xCBu, 0x98u, 0xF4u, 0x41u, 0x37u, 0xEDu, 0x04u, 
        0xA8u, 0x63u, 0x08u, 0x4Bu, 0x25u, 0x32u, 0x17u, 0xA5u, 
        0x3Au, 0xC4u, 0xE6u, 0xA5u, 0xABu, 0xAEu, 0x45u, 0xCEu, 
        0x80u, 0x44u, 0xE7u, 0xBBu, 0xE9u, 0x2Au, 0x10u, 0xE4u, 
        0x57u, 0xB0u, 0xA6u, 0x48u, 0x63u, 0x7Bu, 0x05u, 0x54u, 
        0xDCu, 0x5Fu, 0x66u, 0x6Bu, 0xEAu, 0x37u, 0x82u, 0xC4u, 
        0x35u, 0x25u, 0xA6u, 0x0Au, 0xF5u, 0xCAu, 0xF7u, 0xC0u, 
        0x8Cu, 0x5Au, 0x7Eu, 0x05u, 0x3Fu, 0xBBu, 0xF5u, 0xD0u, 
        0xFBu, 0x51u, 0x68u, 0x87u, 0xA0u, 0x61u, 0x64u, 0xFEu, 
        0x86u, 0x9Bu, 0x10u, 0xC2u, 0x9Cu, 0x8Cu, 0x33u, 0x46u, 
        0x80u, 0x8Cu, 0xB4u, 0xAEu, 0x0Eu, 0x59u, 0x87u, 0xA0u, 
        0xDBu, 0x4Du, 0xADu, 0xA0u, 0x68u, 0x33u, 0xA2u, 0x09u, 
        0x35u, 0x4Du, 0x29u, 0x1Cu, 0x99u, 0xA5u, 0xA5u, 0x6Au, 
        0x92u, 0x4Du, 0xA1u, 0xB4u, 0xD5u, 0x33u, 0xE1u, 0x07u, 
        0xE2u, 0x9Bu, 0x3Du, 0xB4u, 0x12u, 0xDDu, 0x84u, 0x82u, 
        0x28u, 0xDEu, 0x92u, 0x5Eu, 0xF7u, 0x79u, 0x87u, 0x83u, 
        0xB1u, 0x67u, 0x97u, 0x5Bu, 0x11u, 0x82u, 0x08u, 0x94u, 
        0xFBu, 0x2Eu, 0xEDu, 0xCDu, 0x0Bu, 0x1Fu, 0x25u, 0x41u, 
        0x14u, 0x2Bu, 0x5Du, 0xADu, 0x70u, 0x5Au, 0xB6u, 0x71u, 
        0x86u, 0x65u, 0x06u, 0x9Du, 0x5Du, 0xC6u, 0x0Fu, 0x66u, 
        0x39u, 0x78u, 0x53u, 0xD9u, 0xF4u, 0x6Bu, 0xE6u, 0xFBu, 
        0x53u, 0x5Cu, 0xE7u, 0x75u, 0x9Fu, 0xFFu, 0x32u, 0x0Du, 
        0xC4u, 0x08u, 0x17u, 0x3Du, 0x98u, 0x78u, 0xAAu, 0x44u, 
        0x00u, 0xAEu, 0x63u, 0xB8u, 0x77u, 0x99u, 0x83u, 0x2Au, 
        0x18u, 0xCEu, 0x4Eu, 0x93u, 0xD0u, 0x58u, 0xBFu, 0x2Eu, 
        0x3Bu, 0xD2u, 0xA0u, 0x80u, 0x6Fu, 0xC9u, 0x72u, 0x21u, 
        0x01u, 0x7Eu, 0x23u, 0xE2u, 0x7Fu, 0x33u, 0xD0u, 0x67u, 
        0xFEu, 0x63u, 0xDEu, 0x9Fu, 0x51u, 0x6Au, 0xA3u, 0xEDu, 
        0xC4u, 0x78u, 0x7Eu, 0x3Du, 0xDBu, 0x7Eu, 0x1Bu, 0x1Cu, 
        0x45u, 0x5Bu, 0xBFu, 0x8Cu, 0x0Fu, 0xC0u, 0xF7u, 0x76u, 
        0xDAu, 0xBCu, 0x51u, 0x24u, 0xEAu, 0x69u, 0x5Bu, 0x80u, 
        0xACu, 0x75u, 0x43u, 0x24u, 0x9Eu, 0x96u, 0xCEu, 0x6Du, 
        0xB4u, 0x29u, 0x89u, 0xE8u, 0x42u, 0x73u, 0x54u, 0x94u, 
        0x4Cu, 0xEDu, 0x49u, 0x7Eu, 0xDFu, 0xABu, 0x79u, 0x23u, 
        0x63u, 0xD5u, 0xE1u, 0x18u, 0xE5u, 0x2Fu, 0x1Bu, 0x8Cu, 
        0xB6u, 0x6Fu, 0xA0u, 0x16u, 0xCAu, 0x1Eu, 0x63u, 0x34u, 
        0x01u, 0x00u, 0x00u, 0x00u
    },
    .inverseModuloData =
    {
        0x33u, 0xEBu, 0xBEu, 0xD8u, 0xC7u, 0xEBu, 0x2Eu, 0xF0u, 
        0xE4u, 0x58u, 0x32u, 0x3Du, 0xD6u, 0x7Cu, 0x6Au, 0x91u, 
        0xF5u, 0x17u, 0xFBu, 0xAAu, 0x53u, 0x1Au, 0x77u, 0x92u, 
        0xD9u, 0x6Fu, 0xF5u, 0xA5u, 0x12u, 0xE4u, 0x91u, 0x6Du, 
        0x8Eu, 0x50u, 0x51u, 0xA6u, 0x22u, 0x1Au, 0x3Du, 0x5Du, 
        0x61u, 0x99u, 0x71u, 0x1Au, 0xECu, 0x72u, 0x70u, 0xDAu, 
        0xC4u, 0x5Du, 0x83u, 0xE2u, 0xECu, 0x45u, 0xF9u, 0x4Au, 
        0x4Au, 0x61u, 0x61u, 0x4Du, 0x49u, 0x79u, 0x4Cu, 0x68u, 
        0xCFu, 0x5Au, 0x1Du, 0xEEu, 0xADu, 0x43u, 0x5Fu, 0x0Bu, 
        0x6Bu, 0xADu, 0x1Fu, 0xE1u, 0xDAu, 0x26u, 0x5Eu, 0xEFu, 
        0x31u, 0xA9u, 0x87u, 0xCEu, 0xC7u, 0x11u, 0x47u, 0x3Eu, 
        0xF9u, 0xD9u, 0xADu, 0xF3u, 0x0Fu, 0x71u, 0x7Fu, 0xA3u, 
        0x1Au, 0x34u, 0xDCu, 0x7Eu, 0x3Bu, 0xA4u, 0x44u, 0x53u, 
        0xDCu, 0xA0u, 0xCFu, 0x72u, 0x57u, 0x08u, 0xEFu, 0x70u, 
        0x48u, 0xA3u, 0xD5u, 0xA4u, 0x2Du, 0x28u, 0x08u, 0x34u, 
        0xC6u, 0x96u, 0xEFu, 0xBBu, 0x71u, 0x2Cu, 0x3Bu, 0x3Eu, 
        0x82u, 0x42u, 0x3Fu, 0x58u, 0x8Bu, 0x5Fu, 0xC2u, 0xA1u, 
        0x5Fu, 0x04u, 0xADu, 0x23u, 0xCFu, 0x99u, 0xF3u, 0xC1u, 
        0x5Eu, 0x2Du, 0x42u, 0x00u, 0x45u, 0xD2u, 0xE2u, 0x06u, 
        0x61u, 0xBAu, 0x49u, 0x3Bu, 0x62u, 0xF4u, 0x6Fu, 0x75u, 
        0xACu, 0xD8u, 0x7Eu, 0x44u, 0x7Eu, 0xDCu, 0x79u, 0xCEu, 
        0x46u, 0x3Bu, 0xC6u, 0x0Eu, 0x86u, 0xA1u, 0xA4u, 0x52u, 
        0x48u, 0xA6u, 0x50u, 0x00u, 0x21u, 0x54u, 0xD2u, 0x0Au, 
        0xDBu, 0xDEu, 0x0Du, 0xB2u, 0x87u, 0xB2u, 0x46u, 0xB7u, 
        0xB0u, 0xC1u, 0xB2u, 0xF7u, 0x7Du, 0x9Fu, 0x15u, 0xC8u, 
        0xDCu, 0xC7u, 0x38u, 0x5Bu, 0xD8u, 0xEEu, 0x56u, 0xC8u, 
        0xBDu, 0x70u, 0x0Du, 0xD7u, 0x0Bu, 0x0Au, 0x04u, 0x13u, 
        0xE4u, 0x7Eu, 0xCBu, 0x1Bu, 0xFFu, 0x6Fu, 0xE1u, 0x63u, 
        0x03u, 0xA7u, 0xA6u, 0x51u, 0xE8u, 0x4Du, 0xC0u, 0x09u, 
        0x2Bu, 0x95u, 0x9Bu, 0xC6u, 0x2Cu, 0xB1u, 0x80u, 0xD6u, 
        0xE0u, 0xA6u, 0xB6u, 0xDDu, 0x17u, 0xD5u, 0xA5u, 0xD2u, 
        0x39u, 0x43u, 0x96u, 0x74u, 0x97u, 0x42u, 0x3Cu, 0x26u, 
        0x19u, 0xD4u, 0x23u, 0xD8u, 0x42u, 0x18u, 0x4Eu, 0x84u, 
        0xDFu, 0x20u, 0x9Eu, 0xDBu, 0x87u, 0xF4u, 0xDAu, 0x8Du, 
        0x6Fu, 0xC9u, 0xD5u, 0xC2u, 0xA0u, 0x6Fu, 0xCEu, 0xAAu, 
        0xE0u, 0x2Fu, 0xBFu, 0xABu, 0x9Eu, 0x2Fu, 0x64u, 0x23u, 
        0xD3u, 0x7Fu, 0x12u, 0x39u, 0x33u, 0x99u, 0x42u, 0xC1u, 
        0x2Au, 0xFBu, 0x07u, 0xDCu, 0xDBu, 0x8Au, 0x3Bu, 0x8Eu, 
        0x48u, 0x8Cu, 0x3Cu, 0x34u, 0x51u, 0xB1u, 0x03u, 0x8Au, 
        0x14u, 0x02u, 0xB9u, 0xBCu, 0xA0u, 0x33u, 0xDFu, 0xB6u, 
        0x52u, 0xCEu, 0xA6u, 0xD3u, 0xFAu, 0x62u, 0x70u, 0xD5u, 
        0x38u, 0xFBu, 0x24u, 0x02u, 0x67u, 0xD2u, 0x7Bu, 0xC7u, 
        0x2Au, 0x4Cu, 0x74u, 0xA7u, 0x07u, 0xC7u, 0xA3u, 0xCDu, 
        0x60u, 0x81u, 0x01u, 0xA4u, 0x10u, 0x75u, 0x01u, 0xC0u, 
        0x68u, 0x25u, 0xA2u, 0xF9u, 0x38u, 0x59u, 0x90u, 0xA1u, 
        0x57u, 0x7Au, 0x96u, 0x89u, 0x59u, 0x45u, 0x5Fu, 0x62u, 
        0x55u, 0xABu, 0xC3u, 0x47u, 0x79u, 0x67u, 0x00u, 0x87u, 
        0x9Bu, 0xB3u, 0x8Bu, 0xA0u, 0x37u, 0xB3u, 0xB0u, 0xF9u, 
        0x19u, 0x07u, 0x1Eu, 0x8Cu, 0x3Au, 0xF9u, 0x6Cu, 0x39u, 
        0x5Au, 0xB1u, 0x79u, 0x3Eu, 0x1Du, 0x18u, 0xFBu, 0x0Bu, 
        0x21u, 0x2Eu, 0x7Eu, 0xABu, 0x02u, 0x8Au, 0x2Cu, 0x61u, 
        0x18u, 0xF1u, 0xD3u, 0x93u, 0xE9u, 0x62u, 0x31u, 0xEDu, 
        0xD9u, 0x70u, 0x8Fu, 0x42u, 0x84u, 0x8Du, 0x5Du, 0xE1u, 
        0xF4u, 0x21u, 0x45u, 0xCCu, 0x81u, 0xFBu, 0x93u, 0x74u, 
        0xE9u, 0x45u, 0x80u, 0x44u, 0x52u, 0x00u, 0xD5u, 0xAFu, 
        0x7Au, 0xFAu, 0x03u, 0xFAu, 0x00u, 0x0Du, 0x00u, 0x6Bu, 
        0x83u, 0x93u, 0xC3u, 0x66u, 0x10u, 0x44u, 0xE0u, 0x02u, 
        0xE9u, 0x3Bu, 0x39u, 0x05u, 0x1Eu, 0x57u, 0x87u, 0x46u, 
        0xD2u, 0x61u, 0xD9u, 0x02u, 0x50u, 0x28u, 0x7Fu, 0x63u, 
        0x30u, 0xF9u, 0x01u, 0xFCu, 0x9Fu, 0x62u, 0x00u, 0x26u, 
        0xEAu, 0x17u, 0x9Eu, 0xC1u, 0x90u, 0x1Cu, 0xA0u, 0x79u, 
        0x2Cu, 0xD0u, 0x45u, 0x77u, 0xA0u, 0x6Eu, 0x4Bu, 0x84u, 
        0x11u, 0xDFu, 0x4Eu, 0x2Fu, 0xDCu, 0xFEu, 0xD5u, 0x90u, 
        0x51u, 0xE1u, 0x64u, 0xD0u, 0x46u, 0xDEu, 0x42u, 0x9Cu
    },
    .rBarData =
    {
        0xFBu, 0x07u, 0x1Bu, 0xB2u, 0xB7u, 0xE5u, 0x87u, 0xC2u, 
        0xEEu, 0xA9u, 0x01u, 0x3Du, 0x3Au, 0x28u, 0xA1u, 0x30u, 
        0x52u, 0x6Au, 0xC4u, 0x4Au, 0x18u, 0x38u, 0x2Fu, 0x6Au, 
        0x51u, 0x0Bu, 0xBEu, 0x62u, 0x02u, 0x0Bu, 0x17u, 0xECu, 
        0x5Au, 0x1Du, 0xEEu, 0x40u, 0x61u, 0x0Eu, 0xAAu, 0xF7u, 
        0xBBu, 0x0Du, 0xE3u, 0x70u, 0x02u, 0x1Bu, 0xBDu, 0x03u, 
        0x77u, 0x2Eu, 0xF1u, 0x73u, 0x0Eu, 0xB3u, 0x25u, 0xC3u, 
        0xC3u, 0xB1u, 0xC0u, 0x50u, 0x8Bu, 0xA4u, 0xC2u, 0xBDu, 
        0xC3u, 0x02u, 0x1Cu, 0x10u, 0x7Au, 0xDCu, 0xE3u, 0x39u, 
        0x99u, 0x26u, 0x99u, 0x2Eu, 0x7Fu, 0x50u, 0x9Eu, 0x3Cu, 
        0xE8u, 0x9Eu, 0x91u, 0x73u, 0x3Eu, 0x5Bu, 0x25u, 0xB5u, 
        0x5Fu, 0xD8u, 0x9Du, 0xAEu, 0x1Fu, 0x7Eu, 0xB1u, 0xD1u, 
        0xC6u, 0x32u, 0xFBu, 0x46u, 0x89u, 0xA3u, 0x1Au, 0x00u, 
        0xFFu, 0x7Du, 0xA7u, 0x6Bu, 0x0Eu, 0x9Du, 0x3Fu, 0x18u, 
        0xDCu, 0x1Bu, 0x14u, 0xA9u, 0xF7u, 0x63u, 0x98u, 0xAFu, 
        0x23u, 0x1Eu, 0x2Bu, 0x5Du, 0x08u, 0x57u, 0x00u, 0x65u, 
        0x62u, 0xBAu, 0xC7u, 0xF5u, 0x12u, 0xF1u, 0x77u, 0xF6u, 
        0xD9u, 0x0Eu, 0xC0u, 0x74u, 0x08u, 0x7Bu, 0xD1u, 0xFFu, 
        0xECu, 0xB3u, 0xBAu, 0x7Bu, 0x7Fu, 0x1Fu, 0x87u, 0x40u, 
        0xD3u, 0x75u, 0x99u, 0x00u, 0xCCu, 0x37u, 0x86u, 0x1Du, 
        0x5Eu, 0xE4u, 0x45u, 0x5Eu, 0x62u, 0x11u, 0x41u, 0xEAu, 
        0x18u, 0x31u, 0x78u, 0x18u, 0xF6u, 0x30u, 0xC6u, 0x21u, 
        0xC9u, 0x90u, 0x58u, 0xB3u, 0x65u, 0x98u, 0x04u, 0xF1u, 
        0xAAu, 0x33u, 0x9Eu, 0xC7u, 0xA8u, 0x30u, 0xE9u, 0x02u, 
        0x6Cu, 0x27u, 0x0Bu, 0x56u, 0x0Bu, 0xCBu, 0x29u, 0xB0u, 
        0xD9u, 0xFAu, 0xEAu, 0x4Eu, 0x91u, 0x8Au, 0xB8u, 0x1Cu, 
        0xBEu, 0xE1u, 0x30u, 0xBBu, 0x1Du, 0x16u, 0x34u, 0x3Fu, 
        0x6Eu, 0x2Du, 0x3Fu, 0x34u, 0xC3u, 0xC4u, 0x11u, 0xA8u, 
        0x68u, 0x13u, 0xA8u, 0x30u, 0x4Du, 0xABu, 0x23u, 0xF4u, 
        0x4Fu, 0xA0u, 0x1Bu, 0xDBu, 0x70u, 0xF7u, 0xAAu, 0x6Eu, 
        0x28u, 0xC7u, 0x8Fu, 0x39u, 0x43u, 0x50u, 0x54u, 0x23u, 
        0x6Au, 0x81u, 0x28u, 0xEAu, 0xCDu, 0x79u, 0x0Du, 0x09u, 
        0xABu, 0x17u, 0x4Au, 0xD3u, 0xD2u, 0x59u, 0xDAu, 0x42u, 
        0xE5u, 0x17u, 0x2Cu, 0xC9u, 0xD7u, 0x4Bu, 0xDEu, 0x90u, 
        0x16u, 0xE8u, 0x00u, 0x38u, 0xC9u, 0xFBu, 0x54u, 0x1Fu, 
        0x15u, 0x63u, 0x7Bu, 0x9Cu, 0xB9u, 0xBEu, 0x1Au, 0xD6u, 
        0x39u, 0xC7u, 0x7Cu, 0x13u, 0x01u, 0x92u, 0x20u, 0x0Bu, 
        0x53u, 0x27u, 0xD4u, 0x15u, 0xAFu, 0xEEu, 0x4Fu, 0x40u, 
        0xB4u, 0x70u, 0x3Du, 0x94u, 0xBEu, 0x4Au, 0xC4u, 0x04u, 
        0x94u, 0x69u, 0x72u, 0xE3u, 0x93u, 0x4Du, 0x84u, 0x80u, 
        0x95u, 0xE7u, 0xA3u, 0x4Du, 0xC9u, 0xCAu, 0xC7u, 0x70u, 
        0x7Eu, 0xA8u, 0x0Au, 0xB0u, 0x8Eu, 0x14u, 0x57u, 0xE9u, 
        0x70u, 0xECu, 0x89u, 0x1Cu, 0x06u, 0xA5u, 0x98u, 0x30u, 
        0xB6u, 0xFCu, 0xDEu, 0xD8u, 0xCAu, 0xA4u, 0x56u, 0x75u, 
        0xA6u, 0x9Au, 0xA2u, 0xFEu, 0xA7u, 0xA8u, 0x6Cu, 0x41u, 
        0x1Fu, 0xF3u, 0x0Cu, 0x8Du, 0x16u, 0x17u, 0x06u, 0x68u, 
        0x2Cu, 0xF9u, 0xD6u, 0x1Fu, 0xE6u, 0x48u, 0x64u, 0xCCu, 
        0x96u, 0xD4u, 0x5Cu, 0xBFu, 0xDBu, 0x13u, 0x08u, 0x50u, 
        0xAAu, 0xC0u, 0x86u, 0xF2u, 0x0Bu, 0xB4u, 0x7Au, 0xDEu, 
        0x81u, 0x2Cu, 0xB8u, 0xABu, 0x81u, 0xEBu, 0xAEu, 0x7Fu, 
        0x13u, 0xB3u, 0x4Du, 0xCFu, 0x71u, 0xC0u, 0xD9u, 0x3Au, 
        0xD5u, 0x76u, 0x6Eu, 0x73u, 0xC2u, 0x72u, 0x29u, 0x0Eu, 
        0xF4u, 0x2Eu, 0x69u, 0x6Cu, 0x9Bu, 0x15u, 0x0Bu, 0x9Cu, 
        0x4Eu, 0xCDu, 0xAEu, 0x99u, 0x05u, 0xB5u, 0x64u, 0xC2u, 
        0xFCu, 0xA6u, 0xB6u, 0x3Eu, 0xCCu, 0xE7u, 0x16u, 0x3Bu, 
        0x82u, 0xD9u, 0xB8u, 0xB2u, 0x59u, 0x22u, 0xCAu, 0xE6u, 
        0x72u, 0x68u, 0xEEu, 0xBBu, 0xA4u, 0x0Eu, 0xB2u, 0x4Cu, 
        0x6Du, 0x42u, 0x86u, 0xF2u, 0x1Au, 0xE7u, 0xB8u, 0x7Eu, 
        0xC8u, 0xC2u, 0xCAu, 0xD9u, 0x46u, 0x2Eu, 0xF0u, 0xB6u, 
        0x33u, 0xB6u, 0x0Bu, 0xB7u, 0xBBu, 0x55u, 0x38u, 0xB4u, 
        0xCDu, 0x5Cu, 0xCBu, 0x44u, 0x68u, 0x0Cu, 0xF9u, 0x8Eu, 
        0xA3u, 0x3Du, 0x01u, 0x9Fu, 0x8Au, 0x05u, 0xADu, 0x9Cu, 
        0x03u, 0xFCu, 0x75u, 0x9Bu, 0xCAu, 0x68u, 0x0Cu, 0x6Eu, 
        0xA3u, 0x91u, 0x85u, 0x3Du, 0xF0u, 0xE8u, 0x7Cu, 0x2Bu
    }
};
"""
        with self.subTest('RSA2048'):
            key2048 = load_pem_public_key(key2048_data.encode())
            CommonAPI.convert_key(key2048, 'secure_boot', endian='little',
                                  output=self.tname(f"key-secure-boot.c"))
            with open(self.tname(f"key-secure-boot.c"), encoding='utf-8') as f:
                result = f.read()
            self.assertEqual(result2048_data, result)

        with self.subTest('RSA3072'):
            key3072 = load_pem_public_key(key3072_data.encode())
            CommonAPI.convert_key(key3072, 'secure_boot', endian='little',
                                  output=self.tname(f"key-secure-boot.c"))
            with open(self.tname(f"key-secure-boot.c"), encoding='utf-8') as f:
                result = f.read()
            self.assertEqual(result3072_data, result)

        with self.subTest('RSA4096'):
            key4096 = load_pem_public_key(key4096_data.encode())
            CommonAPI.convert_key(key4096, 'secure_boot', endian='little',
                                  output=self.tname(f"key-secure-boot.c"))
            with open(self.tname(f"key-secure-boot.c"), encoding='utf-8') as f:
                result = f.read()
            self.assertEqual(result4096_data, result)

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()
        utils.cleanup({
            'private', 'public', 'public.c',
            'RSA2048-private.pem', 'RSA2048-public.pem', 'RSA2048-public.pem.c',
            'RSA3072-private.pem', 'RSA3072-public.pem', 'RSA3072-public.pem.c',
            'RSA4096-private.pem', 'RSA4096-public.pem', 'RSA4096-public.pem.c',
            'RSA2048-private.der', 'RSA2048-public.der', 'RSA2048-public.der.c',
            'RSA3072-private.der', 'RSA3072-public.der', 'RSA3072-public.der.c',
            'RSA4096-private.der', 'RSA4096-public.der', 'RSA4096-public.der.c',
            'RSA2048-private.jwk', 'RSA2048-public.jwk', 'RSA2048-public.jwk.c',
            'RSA3072-private.jwk', 'RSA3072-public.jwk', 'RSA3072-public.jwk.c',
            'RSA4096-private.jwk', 'RSA4096-public.jwk', 'RSA4096-public.jwk.c',
            'ECDSA-P256-private.pem', 'ECDSA-P256-public.pem',
            'ECDSA-P256-public.pem.c',
            'ECDSA-P256-private.der', 'ECDSA-P256-public.der',
            'ECDSA-P256-public.der.c',
            'ECDSA-P256-private.jwk', 'ECDSA-P256-public.jwk',
            'ECDSA-P256-public.jwk.c',
            'RSA2048-imgtool.c', 'RSA3072-imgtool.c',
            'RSA4096-imgtool.c', 'ECDSA-P256-imgtool.c'
        })

    @staticmethod
    def _remove_file(filename):
        try:
            os.remove(filename)
        except OSError:
            pass


if __name__ == '__main__':
    unittest.main()
