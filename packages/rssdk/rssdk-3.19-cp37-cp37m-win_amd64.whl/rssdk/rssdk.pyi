from typing import ClassVar

from typing import overload

class OutputMode:
    __members__: ClassVar[dict] = ...  # read-only
    Sink: ClassVar[OutputMode] = ...
    Source: ClassVar[OutputMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PinDirection:
    __members__: ClassVar[dict] = ...  # read-only
    Input: ClassVar[PinDirection] = ...
    Output: ClassVar[PinDirection] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PinInfo:
    supportsInput: bool
    supportsOutput: bool
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: bool, arg1: bool) -> None: ...

class PoeState:
    __members__: ClassVar[dict] = ...  # read-only
    Auto: ClassVar[PoeState] = ...
    Disabled: ClassVar[PoeState] = ...
    Enabled: ClassVar[PoeState] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RsDio:
    def __init__(self) -> None: ...
    def canSetOutputMode(self, dio: int) -> bool: ...
    def digitalRead(self, dio: int, pin: int) -> bool: ...
    def digitalWrite(self, dio: int, pin: int, state: bool) -> None: ...
    def getLastErrorString(self) -> str: ...
    def getOutputMode(self, dio: int) -> OutputMode: ...
    def getPinDirection(self, dio: int, pin: int) -> PinDirection: ...
    def getPinList(self) -> dict[int,dict[int,PinInfo]]: ...
    def readAll(self, dio: int) -> dict[int,bool]: ...
    def setOutputMode(self, dio: int, mode: OutputMode) -> None: ...
    def setPinDirection(self, dio: int, pin: int, dir: PinDirection) -> None: ...
    def setXmlFile(self, fileName: str) -> None: ...

class RsPoe:
    def __init__(self) -> None: ...
    def getBudgetAvailable(self) -> int: ...
    def getBudgetConsumed(self) -> int: ...
    def getBudgetTotal(self) -> int: ...
    def getPortCurrent(self, port: int) -> float: ...
    def getPortList(self) -> list[int]: ...
    def getPortPower(self, port: int) -> float: ...
    def getPortState(self, port: int) -> PoeState: ...
    def getPortVoltage(self, port: int) -> float: ...
    def setPortState(self, port: int, state: PoeState) -> None: ...
    def setXmlFile(self, fileName: str) -> None: ...
