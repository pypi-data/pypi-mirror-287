"use strict";(self.webpackChunk_datalayer_jupyter_iam=self.webpackChunk_datalayer_jupyter_iam||[]).push([[8776],{78776:(e,t,n)=>{n.r(t),n.d(t,{MIME_TYPE:()=>d,MIME_TYPES_JSONL:()=>l,RenderedJSON:()=>p,default:()=>m,rendererFactory:()=>c});var r=n(80017),o=n(18168),s=n(92279),a=n(56769),i=n(60800);const d="application/json",l=["text/jsonl","application/jsonl","application/json-lines"];class p extends s.$L{constructor(e){super(),this._rootDOM=null,this.addClass("jp-RenderedJSON"),this.addClass("CodeMirror"),this._mimeType=e.mimeType,this.translator=e.translator||o.Sr}[r.x.symbol](){return()=>r.x.printWidget(this)}async renderModel(e){const{Component:t}=await Promise.all([n.e(1786),n.e(298)]).then(n.bind(n,10298));let r;if(l.indexOf(this._mimeType)>=0){const t=(e.data[this._mimeType]||"").trim().split(/\n/);r=JSON.parse(`[${t.join(",")}]`)}else r=e.data[this._mimeType]||{};const o=e.metadata[this._mimeType]||{};return null===this._rootDOM&&(this._rootDOM=(0,i.s)(this.node)),new Promise(((e,n)=>{this._rootDOM.render(a.createElement(t,{data:r,metadata:o,translator:this.translator,forwardedRef:()=>e()}))}))}onBeforeDetach(e){this._rootDOM&&(this._rootDOM.unmount(),this._rootDOM=null)}}const c={safe:!0,mimeTypes:[d,...l],createRenderer:e=>new p(e)},m=[{id:"@jupyterlab/json-extension:factory",description:"Adds renderer for JSON content.",rendererFactory:c,rank:0,dataType:"json",documentWidgetFactoryOptions:{name:"JSON",primaryFileType:"json",fileTypes:["json","notebook","geojson"],defaultFor:["json"]}},{id:"@jupyterlab/json-lines-extension:factory",description:"Adds renderer for JSONLines content.",rendererFactory:c,rank:0,dataType:"string",documentWidgetFactoryOptions:{name:"JSONLines",primaryFileType:"jsonl",fileTypes:["jsonl","ndjson"],defaultFor:["jsonl","ndjson"]}}]}}]);