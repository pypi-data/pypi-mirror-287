import os
import re
from .utils import get_python_version, open_or_create_readme
import pkg_vers

def add_setup_with_versions(file_paths, readme_path):
    readme_content = open_or_create_readme(readme_path)
    python_version = get_python_version()
    specific_versions = pkg_vers.get_package_versions_from(file_paths)

    packages_with_versions_list = [f"{pkg}={ver}" if ver else f"{pkg}" for pkg, ver in specific_versions.items()]
    packages_with_versions_list.sort()
    packages_with_versions_string = ', '.join(packages_with_versions_list)

    setup_instructions_marker = "## Setup and Run Instructions"
    setup_instructions_closing_marker = "<!-- END SETUP AND RUN INSTRUCTIONS -->"

    new_setup_instructions = f"""{setup_instructions_marker}
NOTE: This section is autogenerated by {os.path.basename(__file__)}, manual updates will be overwritten

This will guide you through the process of setting up a Mamba environment and running the provided Python code to see it in action. It uses the last known working versions of Python and packages used.

### Prerequisites

Ensure you have [Mamba](https://mamba.readthedocs.io/en/latest/installation.html) installed on your system. Mamba is a fast, cross-platform package manager.

### Steps

1. **Create a Mamba Environment**
   
   Open your terminal and execute the following commands:

   ```shell
   mamba create -n [ENVIRONMENT_NAME] python={python_version} -y
   mamba activate [ENVIRONMENT_NAME]
   ```

2. **Install Necessary Packages**

    ```shell
    # Install each with mamba and fall back to pip if necessary
    for pkg in {packages_with_versions_string}; do (mamba install $pkg -y || pip install "${{pkg//=/==}}"); done
    ```

3. **Run the Script**

    Ensure you are in your project directory and run:

    ```shell
    python [FILE_NAME]
    ```

    Or click 'run' in your IDE of choice.

    {setup_instructions_closing_marker}"""

    if setup_instructions_marker in readme_content:
        setup_instructions_pattern = re.compile(rf"{re.escape(setup_instructions_marker)}.*?{re.escape(setup_instructions_closing_marker)}", re.DOTALL)
        readme_content = setup_instructions_pattern.sub(new_setup_instructions, readme_content)
    else:
        readme_content += '\n' + new_setup_instructions

    with open(readme_path, 'w') as file:
        file.write(readme_content)

def add_project_description(readme_path, project_details):
    readme_content = open_or_create_readme(readme_path)
    if readme_content is None:
        return
    
    opening_marker = "## Neural Network from Scratch"
    closing_marker = "<!-- END OF PROJECT DETAILS -->"

    section_template = f"""{opening_marker}
NOTE: This section is autogenerated by readme_ation.py, manual updates will be overwritten

### Overview
{project_details['overview']}

### Motivation
{project_details['motivation']}

### Technologies Used
{project_details['technologies']}

### Approach
{project_details['approach']}

### Challenges and Learnings
{project_details['challenges']}

### Key Takeaways
{project_details['key_takeaways']}

### Acknowledgments
{project_details['acknowledgments']}

{closing_marker}"""

    try:
        with open(readme_path, 'r') as file:
            readme_contents = file.read()
    except FileNotFoundError:
        readme_contents = ""
    
    section_regex = re.compile(rf"{re.escape(opening_marker)}.*?{re.escape(closing_marker)}", re.DOTALL)
    match = section_regex.search(readme_contents)

    if match:
        updated_readme_contents = readme_contents[:match.start()] + section_template + readme_contents[match.end():]
    else:
        updated_readme_contents = readme_contents + section_template

    with open(readme_path, 'w') as file:
        file.write(updated_readme_contents)
