Metadata-Version: 2.1
Name: scrapli_replay
Version: 2024.7.30
Summary: Tools to enable easy testing of scrapli programs
Author-email: Carl Montanari <carl.r.montanari@gmail.com>
License: MIT License
        
        Copyright (c) 2021 Carl Montanari
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/scrapli/scrapli_replay
Project-URL: Changelog, https://scrapli.github.io/scrapli_replay/changelog/
Project-URL: Docs, https://scrapli.github.io/scrapli_replay/
Keywords: arista,automation,cisco,eos,iosxe,iosxr,juniper,junos,netconf,network,nxos,ssh,telnet
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: asyncssh <3.0.0,>=2.2.1
Requires-Dist: ruamel.yaml <0.18,>=0.17
Requires-Dist: scrapli >=2021.07.30
Provides-Extra: dev
Requires-Dist: black <25.0.0,>=23.3.0 ; extra == 'dev'
Requires-Dist: darglint <2.0.0,>=1.8.1 ; extra == 'dev'
Requires-Dist: isort <6.0.0,>=5.10.1 ; extra == 'dev'
Requires-Dist: mypy <2.0.0,>=1.4.1 ; extra == 'dev'
Requires-Dist: nox ==2024.4.15 ; extra == 'dev'
Requires-Dist: pycodestyle <3.0.0,>=2.8.0 ; extra == 'dev'
Requires-Dist: pydocstyle <7.0.0,>=6.1.1 ; extra == 'dev'
Requires-Dist: pyfakefs <6.0.0,>=5.4.1 ; extra == 'dev'
Requires-Dist: pylama <9.0.0,>=8.4.0 ; extra == 'dev'
Requires-Dist: pylint <4.0.0,>=3.0.0 ; extra == 'dev'
Requires-Dist: pytest-asyncio <1.0.0,>=0.17.0 ; extra == 'dev'
Requires-Dist: pytest-cov <5.0.0,>=3.0.0 ; extra == 'dev'
Requires-Dist: pytest <8.0.0,>=7.0.0 ; extra == 'dev'
Requires-Dist: toml <1.0.0,>=0.10.2 ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mdx-gh-links <1.0,>=0.2 ; extra == 'docs'
Requires-Dist: mkdocs <2.0.0,>=1.2.3 ; extra == 'docs'
Requires-Dist: mkdocs-gen-files <1.0.0,>=0.4.0 ; extra == 'docs'
Requires-Dist: mkdocs-literate-nav <1.0.0,>=0.5.0 ; extra == 'docs'
Requires-Dist: mkdocs-material <10.0.0,>=8.1.6 ; extra == 'docs'
Requires-Dist: mkdocs-material-extensions <2.0.0,>=1.0.3 ; extra == 'docs'
Requires-Dist: mkdocs-section-index <1.0.0,>=0.3.4 ; extra == 'docs'
Requires-Dist: mkdocstrings[python] <1.0.0,>=0.19.0 ; extra == 'docs'

[![Supported Versions](https://img.shields.io/pypi/pyversions/scrapli-replay.svg)](https://pypi.org/project/scrapli-replay)
[![PyPI version](https://badge.fury.io/py/scrapli-replay.svg)](https://badge.fury.io/py/scrapli-replay)
[![Weekly Build](https://github.com/scrapli/scrapli_replay/workflows/Weekly%20Build/badge.svg)](https://github.com/scrapli/scrapli_replay/workflows/Weekly%20Build)
[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)
[![License: MIT](https://img.shields.io/badge/License-MIT-blueviolet.svg)](https://opensource.org/licenses/MIT)

scrapli_replay
==============

---

**Documentation**: <a href="https://scrapli.github.io/scrapli_replay" target="_blank">https://scrapli.github.io/scrapli_replay</a>

**Source Code**: <a href="https://github.com/scrapli/scrapli_replay" target="_blank">https://github.com/scrapli/scrapli_replay</a>

**Examples**: <a href="https://github.com/scrapli/scrapli_replay/tree/main/examples/simple_test_case" target="_blank">https://github.com/scrapli/scrapli_replay/tree/main/examples/simple_test_case</a>

---

scrapli_replay: Tools to enable easy testing of scrapli programs and to create semi-interactive SSH servers that 
look and feel like "real" network devices!


#### Key Features:

- __Easy__: Easily test scrapli code with Pytest, or create mock SSH servers to play with!
- __Pytest__: Love scrapli and Pytest? Want to test your code that contains scrapli components, but can't test 
  against real devices in your CI? scrapli_replay is a Pytest plugin to help you with exactly this -- its like 
  [VCR.py](https://vcrpy.readthedocs.io/en/latest/) and [pytest-vcr](http://pytest-vcr.readthedocs.io/en/latest/), but for scrapli!
- __Offline__: Want to be able to have the look and feel of a network device without having a network device? Create 
  a mock SSH server based on real network device behavior and run it in your CI or a Raspberry Pi (or whatever)!
- __Lightweight__: Want to spin up a bunch of test servers, but don't have the resources for real device images? 
  Asyncssh is fast and lightweight so you can run loads of mock SSH servers with very little resources!


## Installation

```
pip install scrapli_replay
```

See the [docs](https://scrapli.github.io/scrapli_replay/user_guide/installation) for other installation methods/details.



## A Simple (Pytest) Example

```python
@pytest.mark.scrapli_replay
def test_something_else():
    with IOSXEDriver(**MY_DEVICE) as conn:
        result = conn.send_command("show run | i hostname")
```

