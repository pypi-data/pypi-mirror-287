# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Union, Optional
from datetime import datetime
from typing_extensions import Literal, Annotated

from ..._utils import PropertyInfo
from ..._models import BaseModel

__all__ = [
    "AutoGeneratedDraftTestCasesList",
    "Item",
    "ItemTestCaseData",
    "ItemTestCaseDataArtifactSchemaGeneration",
    "ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfo",
    "ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchema",
    "ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchemaChunk",
    "ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoStringExtraInfoSchema",
    "ItemTestCaseDataSchemaGenerationBase",
    "ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfo",
    "ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchema",
    "ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchemaChunk",
    "ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoStringExtraInfoSchema",
    "ItemMissingChunk",
]


class ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchemaChunk(BaseModel):
    metadata: object

    text: str


class ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchema(BaseModel):
    chunks: List[ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchemaChunk]

    schema_type: Optional[Literal["CHUNKS"]] = None


class ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoStringExtraInfoSchema(BaseModel):
    info: str

    schema_type: Optional[Literal["STRING"]] = None


ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfo = Annotated[
    Union[
        ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoChunkExtraInfoSchema,
        ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfoStringExtraInfoSchema,
    ],
    PropertyInfo(discriminator="schema_type"),
]


class ItemTestCaseDataArtifactSchemaGeneration(BaseModel):
    artifact_ids_filter: List[str]

    input: str

    expected_extra_info: Optional[ItemTestCaseDataArtifactSchemaGenerationExpectedExtraInfo] = None

    expected_output: Optional[str] = None


class ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchemaChunk(BaseModel):
    metadata: object

    text: str


class ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchema(BaseModel):
    chunks: List[ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchemaChunk]

    schema_type: Optional[Literal["CHUNKS"]] = None


class ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoStringExtraInfoSchema(BaseModel):
    info: str

    schema_type: Optional[Literal["STRING"]] = None


ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfo = Annotated[
    Union[
        ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoChunkExtraInfoSchema,
        ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfoStringExtraInfoSchema,
    ],
    PropertyInfo(discriminator="schema_type"),
]


class ItemTestCaseDataSchemaGenerationBase(BaseModel):
    input: str

    expected_extra_info: Optional[ItemTestCaseDataSchemaGenerationBaseExpectedExtraInfo] = None

    expected_output: Optional[str] = None


ItemTestCaseData = Union[ItemTestCaseDataArtifactSchemaGeneration, ItemTestCaseDataSchemaGenerationBase]


class ItemMissingChunk(BaseModel):
    artifact_content_modification_identifier: str
    """Artifact Content Modification Identifier of the missing chunk"""

    artifact_id: str
    """Artifact ID of the missing chunk"""

    artifact_name: str
    """Artifact Name of the missing chunk"""

    chunk_text: str
    """Text of chunk_id that is missing"""


class Item(BaseModel):
    id: str
    """The unique identifier of the entity."""

    account_id: str
    """The ID of the account that owns the given entity."""

    approved: bool
    """Boolean to track whether or not the draft test case is approved"""

    content_metadata: object
    """
    Metadata for the chunks and artifacts that were used to generate this draft test
    case.
    """

    created_at: datetime
    """The date and time when the entity was created in ISO format."""

    created_by_user_id: str
    """The user who originally created the entity."""

    evaluation_dataset_id: str
    """The ID of the associated evaluation dataset."""

    schema_type: Literal["GENERATION"]
    """An enumeration."""

    test_case_data: ItemTestCaseData
    """The data for the test case in a format matching the provided schema_type"""

    updated_at: datetime
    """The date and time when the entity was last updated in ISO format."""

    missing_chunks: Optional[List[ItemMissingChunk]] = None

    topic_str: Optional[str] = None


class AutoGeneratedDraftTestCasesList(BaseModel):
    current_page: int
    """The current page number."""

    items: List[Item]
    """The data returned for the current page."""

    items_per_page: int
    """The number of items per page."""

    total_item_count: int
    """The total number of items of the query"""
