# Generated by Django 5.0.7 on 2024-07-31 12:46

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import sorl.thumbnail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("sage_seo", "0003_metakeymixin_alter_metainformation_json_ld_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="PostCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "title",
                    models.CharField(
                        db_comment="Stores the unique title of the instance.",
                        help_text="Enter a unique title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        db_comment="Stores the URL-friendly slug derived from the title.",
                        help_text="URL-friendly slug from the title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "db_table": "sage_post_category",
                "db_table_comment": "Table for categorizing blog posts",
                "default_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="PostTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "title",
                    models.CharField(
                        db_comment="Stores the unique title of the instance.",
                        help_text="Enter a unique title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        db_comment="Stores the URL-friendly slug derived from the title.",
                        help_text="URL-friendly slug from the title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "db_table": "sage_post_tag",
                "db_table_comment": "Table for preserving blog post tags",
                "default_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "metakeymixin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sage_seo.metakeymixin",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "title",
                    models.CharField(
                        db_comment="Stores the unique title of the instance.",
                        help_text="Enter a unique title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        db_comment="Stores the URL-friendly slug derived from the title.",
                        help_text="URL-friendly slug from the title.",
                        max_length=255,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        db_comment="Stores a detailed description of the instance.",
                        help_text="Enter a detailed description of the item. This can include its purpose, characteristics, and any other relevant information.",
                        verbose_name="Description",
                    ),
                ),
                (
                    "og_title",
                    models.CharField(
                        blank=True,
                        db_comment="The title of the webpage for Open Graph protocol.",
                        help_text="The title of the webpage. Example: 'The Amazing Spider-Man - Movie Review'",
                        max_length=255,
                        null=True,
                        verbose_name="OG Title",
                    ),
                ),
                (
                    "og_type",
                    models.CharField(
                        blank=True,
                        db_comment="The type of the content for Open Graph protocol. Common values include 'website', 'article', 'video', etc.",
                        help_text="The type of the content. Common values: 'website', 'article', 'video', etc. Example: 'article'",
                        max_length=50,
                        null=True,
                        verbose_name="OG Type",
                    ),
                ),
                (
                    "og_image",
                    models.URLField(
                        blank=True,
                        db_comment="The URL of the image that represents the webpage for Open Graph protocol.",
                        help_text="The URL of the image that represents the webpage. Example: 'https://www.example.com/image.jpg'",
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="OG Image",
                    ),
                ),
                (
                    "og_description",
                    models.TextField(
                        blank=True,
                        db_comment="A description of the webpage content for Open Graph protocol.",
                        help_text="A description of the webpage content. Example: 'A comprehensive review of the latest Spider-Man movie, including storyline, character development, and special effects.'",
                        null=True,
                        verbose_name="OG Description",
                    ),
                ),
                (
                    "og_url",
                    models.URLField(
                        blank=True,
                        db_comment="The URL of the webpage for Open Graph protocol.",
                        help_text="The URL of the webpage. Example: 'https://www.example.com/page.html'",
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="OG URL",
                    ),
                ),
                (
                    "og_site_name",
                    models.CharField(
                        blank=True,
                        db_comment="The name of the website for Open Graph protocol.",
                        help_text="The name of the website. Example: 'Example Website'",
                        max_length=255,
                        null=True,
                        verbose_name="OG Site Name",
                    ),
                ),
                (
                    "og_locale",
                    models.CharField(
                        blank=True,
                        db_comment="The locale of the content for Open Graph protocol. Example: 'en_US'.",
                        help_text="The locale of the content. Common values: 'en_US', 'fr_FR', etc. Example: 'en_US'",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid locale identifier like en_US",
                                regex="^[a-z]{2}_[A-Z]{2}$",
                            )
                        ],
                        verbose_name="OG Locale",
                    ),
                ),
                (
                    "article_author",
                    models.CharField(
                        blank=True,
                        db_comment="The name of the author of the article for Open Graph protocol.",
                        help_text="The name of the author of the article. Example: 'John Doe'",
                        max_length=255,
                        null=True,
                        verbose_name="Article Author",
                    ),
                ),
                (
                    "alternate_text",
                    models.CharField(
                        blank=True,
                        help_text="Write about picture for SEO",
                        max_length=110,
                        null=True,
                        validators=[
                            django.core.validators.MaxLengthValidator(150),
                            django.core.validators.MinLengthValidator(3),
                        ],
                        verbose_name="Picture Alternate Text",
                    ),
                ),
                (
                    "width_field",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        editable=False,
                        help_text="size of picture's Width",
                        null=True,
                        verbose_name="Picture Width",
                    ),
                ),
                (
                    "height_field",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        editable=False,
                        help_text="size of picture's Height",
                        null=True,
                        verbose_name="Picture Height",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_comment="Indicates if the post is active (true) or hidden from public view (false).",
                        default=True,
                        help_text="Indicate whether this post is currently active and should be displayed publicly. Deactivate to hide the post from public view without deleting it.",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        db_comment="A brief summary of the blog post.",
                        help_text="Enter a brief summary of the post, up to 140 characters.",
                        max_length=140,
                        null=True,
                        verbose_name="Summary",
                    ),
                ),
                (
                    "picture",
                    sorl.thumbnail.fields.ImageField(
                        db_comment="Image file associated with the blog post.",
                        height_field="height_field",
                        help_text="Upload an image representing the post. Ideal dimensions are [x] by [y].",
                        upload_to="blog/posts/",
                        verbose_name="Picture of Post",
                        width_field="width_field",
                    ),
                ),
                (
                    "banner",
                    sorl.thumbnail.fields.ImageField(
                        blank=True,
                        db_comment="Image file associated with the blog post.",
                        help_text="Upload an image representing the post. Ideal dimensions are [x] by [y].",
                        null=True,
                        upload_to="blog/posts/",
                        verbose_name="Banner of Post Detail",
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="The date and time when the post was published.",
                        verbose_name="Published At",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        db_comment="The category to which the blog post belongs.",
                        help_text="Choose the category of the post.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="sage_blog.postcategory",
                        verbose_name="Category",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        help_text="Select or add tags to categorize the post.",
                        related_name="posts",
                        to="sage_blog.posttag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Posts",
                "db_table": "sage_post",
                "db_table_comment": "Table for preserving blog posts",
                "default_manager_name": "objects",
            },
            bases=("sage_seo.metakeymixin", models.Model),
        ),
        migrations.CreateModel(
            name="PostFaq",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "question",
                    models.CharField(
                        db_comment="The question of the FAQ. Limited to 80 characters.",
                        help_text="Enter the FAQ question. Keep it clear and concise to aid easy understanding.",
                        max_length=150,
                        verbose_name="Question",
                    ),
                ),
                (
                    "answer",
                    models.TextField(
                        db_comment="Detailed answer to the FAQ question. Limited to 180 characters.",
                        help_text="Provide a detailed answer to the FAQ question. Aim for clarity and completeness.",
                        verbose_name="Answer",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_comment="The post to which the faq belongs.",
                        help_text="Choose the post of the faq.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="faqs",
                        to="sage_blog.post",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "verbose_name": "FAQ",
                "verbose_name_plural": "FAQ",
                "db_table": "sage_post_faqs",
                "db_table_comment": "Table storing frequently asked questions and their answers for user reference.",
            },
        ),
    ]
