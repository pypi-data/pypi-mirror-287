"use strict";(self.webpackChunkjupyterlab_forum=self.webpackChunkjupyterlab_forum||[]).push([[339],{339:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var i=n(607),o=n(256);async function a(e,t,n,i){e.node.innerHTML='\n    <h2>Reply to Theme</h2>\n    <div class="reply-form">\n      <label for="replyContent">Your Reply:</label>\n      <textarea id="replyContent" name="replyContent"></textarea><br><br>\n      <button id="submitReplyButton">Send Reply</button>\n    </div>\n  ';const o=e.node.querySelector("#submitReplyButton");o&&o.addEventListener("click",(async()=>{const o={Content:e.node.querySelector("#replyContent").value,Author:t,ThemeID:n};try{const a=await fetch(i+"replytheme",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json"}});if(a.ok){const o=(await a.json()).ReplyID;s(e,n,i,t),console.log("Reply sent successfully with ID:",o)}else console.error("Failed to send reply:",a.status),s(e,n,i,t)}catch(e){console.error("Error sending reply:",e)}}))}async function s(e,t,n,i){const o={Title:"Example Theme",Description:"This is an example theme description.",Author:"User123",CreationTime:"2024-07-24T10:08",Replies:[{Author:"Example Author2",Content:"This is an example reply to the theme2.",CreationTime:"2024-07-22T10:08"},{Author:"Example Author",Content:"This is an example reply to the theme.",CreationTime:"2024-07-24T10:08"}]};try{const o=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ThemeID:t})}),s=await o.json();e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${s.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${s.Author}</span>\n                <span class="topic-date">${new Date(s.CreationTime).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${s.Description}</div>\n              <div class="topic-stats">\n                <span>${s.Replies.length} Antworten</span> •\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h3>Antworten</h3>\n              <div class="replies-container">  </div>\n            </div>\n\n            <button id="reply-to-theme" class="btn btn-primary">Reply</button>\n            <button id="back-to-forum" class="btn btn-primary">Back to Forum</button>\n          </div>\n        `;const r=e.node.querySelector(".replies-container");s.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span> •\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleDateString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==r||r.appendChild(t)}));const l=e.node.querySelector("#back-to-forum");null==l||l.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,e.fetchAndDisplayThemes()}));const c=e.node.querySelector("#reply-to-theme");null==c||c.addEventListener("click",(()=>{a(e,i,t,n)}))}catch(s){console.error("Error fetching theme details:",s),e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${o.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${o.Author}</span>\n                <span class="topic-date">${new Date(o.CreationTime).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${o.Description}</div>\n              <div class="topic-stats">\n                <span>${o.Replies.length} Antworten</span> •\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h3>Antworten</h3>\n              <div class="replies-container">  </div>\n            </div>\n\n            <button id="reply-to-theme" class="btn btn-primary">Reply</button>\n            <button id="back-to-forum" class="btn btn-primary">Back to Forum</button>\n          </div>\n        `;const r=e.node.querySelector(".replies-container");o.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span> •\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleDateString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==r||r.appendChild(t)}));const l=e.node.querySelector("#back-to-forum");null==l||l.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,e.fetchAndDisplayThemes()}));const c=e.node.querySelector("#reply-to-theme");null==c||c.addEventListener("click",(()=>{a(e,i,t,n)}))}}class r extends o.Widget{constructor(e,t){super(),this.username=e,this.forumEndpointUrl=t,this.activeTab="all",this.originalHTML='\n            <header>\n                \x3c!--NavBar Section--\x3e\n                <div class = "navbar">\n                    <div class="forum-title">Databrix Lab Forum</div>\n                </div>\n            </header>\n            <div class="container">\n              <div class="tabs">\n                <button class="tab" data-tab="all">All</button>\n                <button class="tab" data-tab="open">Open</button>\n                <button class="tab" data-tab="closed">Closed</button>\n              </div>\n              <button class="create-theme-button" id="createThemeButton">Create Theme</button>\n            </div>\n              <div class="subforum">\n                <div class="subforum-title">\n                  <h1>General Information</h1>\n                </div>\n                <div id="themes-container"></div>\n              </div>\n            </div>\n            ',this.node.innerHTML=this.originalHTML,this.fetchAndDisplayThemes(),this.node.addEventListener("click",(t=>{var n;const i=t.target;if(i.classList.contains("create-theme-button")&&async function(e,t,n){e.node.innerHTML='\n    <h2>Create New Theme</h2>\n    <div class="create-theme-form">\n      <label for="themeTitle">Title:</label>\n      <input type="text" id="themeTitle" name="themeTitle"><br><br>\n      <label for="themeDescription">Description:</label>\n      <textarea id="themeDescription" name="themeDescription"></textarea><br><br>\n      <button id="submitThemeButton">Create</button>\n    </div>\n  ';const i=e.node.querySelector("#submitThemeButton");i&&i.addEventListener("click",(async()=>{const i=e.node.querySelector("#themeTitle"),o=e.node.querySelector("#themeDescription"),a={Title:i.value,Description:o.value,Author:t,Status:"Open"};try{const i=await fetch(n+"createtheme",{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json"}});if(i.ok){const o=(await i.json()).ThemeID;s(e,o,n,t)}else console.error("Failed to create theme:",i.status)}catch(e){console.error("Error creating theme:",e)}}))}(this,this.username,this.forumEndpointUrl),i.classList.contains("tab")&&(this.activeTab=null!==(n=i.dataset.tab)&&void 0!==n?n:"all",this.updateTabDisplay()),i.classList.contains("description-link")){const n=i.getAttribute("data-description-id");t.preventDefault(),s(this,n,this.forumEndpointUrl,e)}}))}async fetchAndDisplayThemes(){const e=[{ThemeID:1,Title:"Example Theme 1",Author:"Admin",CreationTime:"2024-07-01T10:00:00",Status:"open"},{ThemeID:2,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"}];try{const e=await fetch(this.forumEndpointUrl);if(!e.ok)throw new Error("Network response was not ok");const t=(await e.json()).themes,n=this.node.querySelector("#themes-container");n&&(n.innerHTML=t.map((e=>`\n                    <div class="subforum-row">\n                        <div class="subforum-description subforum-column">\n                            <h4><a href="#" class="description-link" data-description-id="${e.ThemeID}">${e.Title}</a></h4>\n                            <p>Created by ${e.Author} on ${new Date(e.CreationTime).toLocaleDateString()}</p>\n                            <p>Status: ${e.Status}</p>\n                        </div>\n                        <div class="subforum-info subforum-column">\n                            <b><a href="#">Posted</a></b> by <a href="#">${e.Author}</a>\n                        </div>\n                    </div>\n                    <hr class="subforum-devider">\n                `)).join(""))}catch(t){console.error("Error fetching themes:",t);const n=this.node.querySelector("#themes-container");n&&(n.innerHTML=e.map((e=>`\n                    <div class="subforum-row">\n                        <div class="subforum-description subforum-column">\n                            <h4><a href="#" class="description-link" data-description-id="${e.ThemeID}">${e.Title}</a></h4>\n                            <p>Created by ${e.Author} on ${new Date(e.CreationTime).toLocaleDateString()}</p>\n                            <p>Status: ${e.Status}</p>\n                        </div>\n                        <div class="subforum-info subforum-column">\n                            <b><a href="#">Posted</a></b> by <a href="#">${e.Author}</a>\n                        </div>\n                    </div>\n                    <hr class="subforum-devider">\n                `)).join(""))}}updateTabDisplay(){[...this.node.querySelectorAll(".subforum-row")].forEach((e=>{const t=e,n=t.querySelector("p:last-child"),i=n&&n.textContent&&n.textContent.split(": ")[1]||"";"all"===this.activeTab||i===this.activeTab?t.style.display="grid":t.style.display="none"}))}}var l=n(74);const c={id:"jupyterlab_forum:plugin",description:"A JupyterLab extension for databrix forum frontend",autoStart:!0,requires:[i.ICommandPalette],activate:function(e,t){console.log("JupyterLab extension forum is activated!");const n=e.serviceManager.user,o=l.PageConfig.getBaseUrl(),a=new URL(o).pathname,s=window.location.origin;let c;c=a.includes("/user/")?`${s}${a.split("/user/")[0]}`:`${s}`;const d=`${c}/services/forum/`;console.log("JupyterHub Base URL:",d);const u=()=>{const e=new r(n.identity?n.identity.name:"Unknown User",d),t=new i.MainAreaWidget({content:e});return t.id="forum-jupyterlab",t.title.label="Forum",t.title.closable=!0,t};let p=u();const h="forum:open";e.commands.addCommand(h,{label:"Databrix Forum",execute:()=>{p.isDisposed&&(p=u()),p.isAttached||e.shell.add(p,"main"),e.shell.activateById(p.id)}}),t.addItem({command:h,category:"Forum"})}}}}]);