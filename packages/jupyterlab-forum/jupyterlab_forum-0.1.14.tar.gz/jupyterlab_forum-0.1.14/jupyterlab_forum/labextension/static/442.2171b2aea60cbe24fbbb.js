"use strict";(self.webpackChunkjupyterlab_forum=self.webpackChunkjupyterlab_forum||[]).push([[442],{442:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var s=n(607),o=n(256),a=n(74);async function i(e,t,n,s){const o={Title:"Example Theme",Description:"This is an example theme description.",Author:"User123",CreationTime:"2024-07-24T10:08",Status:"Open",Replies:[{Author:"Example Author2",Content:"This is an example reply to the theme2.",CreationTime:"2024-07-22T10:08"},{Author:"Example Author",Content:"This is an example reply to the theme.",CreationTime:"2024-07-24T10:08"}]};try{const o=await async function(e){const t=new URL(e);t.pathname="/jupyterhub/hub/api/groups/dozent";const n=a.PageConfig.getToken();if(!n)throw new Error("API token is not available from PageConfig.");let s;try{const e=await fetch(t.toString(),{method:"GET",headers:{"Content-Type":"application/json",Authorization:`token ${n}`}});if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);s=await e.json(),console.log("Response Data:",s)}catch(e){console.error("Error fetching data:",e),s={users:[e]}}return s.users}(n),r=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ThemeID:t})}),l=await r.json();e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${l.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${l.Author}</span>\n                <span class="topic-date">${new Date(l.CreationTime).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${l.Description}</div>\n              <div class="topic-stats">\n                <span>${l.Replies.length} Antworten</span> •\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h3>Antworten</h3>\n              <div class="replies-container">  </div>\n            </div>\n\n            <button id="reply-to-theme" class="btn btn-primary">Reply</button>\n            <button id="back-to-forum" class="btn btn-primary">Back to Forum</button>\n            ${s===l.Author||o.includes(s)?`\n              <button id="delete-theme" class="btn btn-danger">Delete Theme</button>\n              ${s===l.Author||o.includes(s)?`\n                <button id="toggle-status" class="btn btn-secondary">${"Open"===l.Status?"Close":"Open"} Theme</button>\n              `:""}\n            `:""}\n          </div>\n        `;const c=e.node.querySelector(".replies-container");l.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span> •\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleDateString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==c||c.appendChild(t)}));const d=e.node.querySelector("#toggle-status");d&&d.addEventListener("click",(async()=>{try{const o="Open"===l.Status?"Closed":"Open",a=await fetch(`${n}/togglestatus`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({ThemeID:t,Status:o})});a.ok?i(e,t,n,s):console.error("Failed to toggle status:",a.status)}catch(e){console.error("Error toggling status:",e)}}))}catch(a){console.error("Error fetching theme details:",a);const r=o;e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${r.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${r.Author}</span>\n                <span class="topic-date">${new Date(r.CreationTime).toLocaleDateString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${r.Description}</div>\n              <div class="topic-stats">\n                <span>${r.Replies.length} Antworten</span> •\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h3>Antworten</h3>\n              <div class="replies-container">  </div>\n            </div>\n\n            <button id="reply-to-theme" class="btn btn-primary">Reply</button>\n            <button id="back-to-forum" class="btn btn-primary">Back to Forum</button>\n\n            <button id="delete-theme" class="btn btn-danger">Delete Theme</button>\n\n            <button id="toggle-status" class="btn btn-secondary">${"Open"===r.Status?"Close":"Open"} Theme</button>\n\n          </div>\n        `;const l=e.node.querySelector(".replies-container");r.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span> •\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleDateString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==l||l.appendChild(t)}));const c=e.node.querySelector("#toggle-status");c&&c.addEventListener("click",(async()=>{try{const o="Open"===r.Status?"Closed":"Open",a=await fetch(`${n}/togglestatus`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({ThemeID:t,Status:o})});a.ok?i(e,t,n,s):console.error("Failed to toggle status:",a.status)}catch(e){console.error("Error toggling status:",e)}}))}const r=e.node.querySelector("#back-to-forum");null==r||r.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,e.fetchAndDisplayThemes()}));const l=e.node.querySelector("#reply-to-theme");null==l||l.addEventListener("click",(()=>{!async function(e,t,n,s){e.node.innerHTML='\n    <h2>Reply to Theme</h2>\n    <div class="reply-form">\n      <label for="replyContent">Your Reply:</label>\n      <textarea id="replyContent" name="replyContent"></textarea><br><br>\n      <button id="submitReplyButton">Send Reply</button>\n    </div>\n  ';const o=e.node.querySelector("#submitReplyButton");o&&o.addEventListener("click",(async()=>{const o={Content:e.node.querySelector("#replyContent").value,Author:t,ThemeID:n};try{const a=await fetch(s+"replytheme",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json"}});if(a.ok){const o=(await a.json()).ReplyID;i(e,n,s,t),console.log("Reply sent successfully with ID:",o)}else console.error("Failed to send reply:",a.status),i(e,n,s,t)}catch(e){console.error("Error sending reply:",e)}}))}(e,s,t,n)}));const c=e.node.querySelector("#delete-theme");c&&c.addEventListener("click",(async()=>{try{const s=await fetch(`${n}/deletetheme`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({ThemeID:t})});s.ok?(e.node.innerHTML=e.originalHTML,e.fetchAndDisplayThemes()):console.error("Failed to delete theme:",s.status)}catch(e){console.error("Error deleting theme:",e)}}))}class r extends o.Widget{constructor(e,t){super(),this.username=e,this.forumEndpointUrl=t,this.activeTab="all",this.currentPage=1,this.themesPerPage=5,this.allThemes=[],this.showThemes=[],this.addClass("forumWidget"),this.originalHTML='\n            <header>\n                \x3c!--NavBar Section--\x3e\n                <div class = "navbar">\n                    <div class="forum-title">Databrix Lab Forum</div>\n                </div>\n            </header>\n            <div class="container">\n              <div class="tabs">\n                <button class="tab" data-tab="All">All</button>\n                <button class="tab" data-tab="Open">Open</button>\n                <button class="tab" data-tab="Closed">Closed</button>\n              </div>\n              <button class="create-theme-button" id="createThemeButton">Create Theme</button>\n            </div>\n              <div class="subforum">\n                <div class="subforum-title">\n                  <h1>General Information</h1>\n                </div>\n                <div id="themes-container"></div>\n                <div id="pagination-controls" class="pagination-controls"></div>\n              </div>\n            </div>\n            ',this.node.innerHTML=this.originalHTML,this.fetchAndDisplayThemes(),this.node.addEventListener("click",(t=>{var n,s;const o=t.target;if(o.classList.contains("create-theme-button")&&async function(e,t,n){e.node.innerHTML='\n    <h2>Create New Theme</h2>\n    <div class="create-theme-form">\n      <label for="themeTitle">Title:</label>\n      <input type="text" id="themeTitle" name="themeTitle"><br><br>\n      <label for="themeDescription">Description:</label>\n      <textarea id="themeDescription" name="themeDescription"></textarea><br><br>\n      <button id="submitThemeButton">Create</button>\n    </div>\n  ';const s=e.node.querySelector("#submitThemeButton");s&&s.addEventListener("click",(async()=>{const s=e.node.querySelector("#themeTitle"),o=e.node.querySelector("#themeDescription"),a={Title:s.value,Description:o.value,Author:t,Status:"Open"};try{const s=await fetch(n+"createtheme",{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json"}});if(s.ok){const o=(await s.json()).ThemeID;i(e,o,n,t)}else console.error("Failed to create theme:",s.status)}catch(e){console.error("Error creating theme:",e)}}))}(this,this.username,this.forumEndpointUrl),o.classList.contains("tab")&&(this.activeTab=null!==(n=o.dataset.tab)&&void 0!==n?n:"Open",this.currentPage=1,this.updateTabDisplay()),o.classList.contains("description-link")){const n=o.getAttribute("data-description-id");t.preventDefault(),i(this,n,this.forumEndpointUrl,e)}o.classList.contains("page-link")&&(this.currentPage=parseInt(null!==(s=o.dataset.page)&&void 0!==s?s:"1",10),this.displayCurrentPageThemes())}))}async fetchAndDisplayThemes(){const e=[{ThemeID:1,Title:"Example Theme 1",Author:"Admin",CreationTime:"2024-07-01T10:00:00",Status:"open"},{ThemeID:2,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"},{ThemeID:3,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"},{ThemeID:4,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"},{ThemeID:5,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"},{ThemeID:6,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"},{ThemeID:2,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"closed"}];try{const e=await fetch(this.forumEndpointUrl);if(!e.ok)throw new Error("Network response was not ok");const t=await e.json();this.allThemes=t.themes,this.showThemes=this.allThemes}catch(t){console.error("Error fetching themes:",t),this.allThemes=e,this.showThemes=this.allThemes}this.displayCurrentPageThemes(),this.updatePaginationControls()}updateTabDisplay(){this.showThemes=this.allThemes.filter((e=>"All"===this.activeTab||e.Status===this.activeTab)),this.displayCurrentPageThemes(),this.updatePaginationControls()}displayCurrentPageThemes(){const e=this.node.querySelector("#themes-container");if(!e)return;const t=(this.currentPage-1)*this.themesPerPage,n=t+this.themesPerPage,s=this.showThemes.slice(t,n);e.innerHTML=s.map((e=>`\n            <div class="subforum-row">\n                <div class="subforum-description subforum-column">\n                    <h4><a href="#" class="description-link" data-description-id="${e.ThemeID}">${e.Title}</a></h4>\n                    <p>Created by ${e.Author} on ${new Date(e.CreationTime).toLocaleDateString()}</p>\n                    <p>Status: ${e.Status}</p>\n                </div>\n                <div class="subforum-info subforum-column">\n                    <b><a href="#">Posted</a></b> by <a href="#">${e.Author}</a>\n                </div>\n            </div>\n            <hr class="subforum-devider">\n        `)).join("")}updatePaginationControls(){const e=this.node.querySelector("#pagination-controls");if(!e)return;const t=Math.ceil(this.allThemes.length/this.themesPerPage);let n="";for(let e=1;e<=t;e++)n+=`<button class="page-link" data-page="${e}">${e}</button>`;e.innerHTML=n}}const l={id:"jupyterlab_forum:plugin",description:"A JupyterLab extension for databrix forum frontend",autoStart:!0,requires:[s.ICommandPalette],activate:function(e,t){console.log("JupyterLab extension forum is activated!");const n=e.serviceManager.user,o=a.PageConfig.getBaseUrl(),i=new URL(o).pathname,l=window.location.origin;let c;c=i.includes("/user/")?`${l}${i.split("/user/")[0]}`:`${l}`;const d=`${c}/services/forum/`;console.log("JupyterHub Base URL:",d);const h=()=>{const e=new r(n.identity?n.identity.name:"Unknown User",d),t=new s.MainAreaWidget({content:e});return t.id="forum-jupyterlab",t.title.label="Forum",t.title.closable=!0,t};let u=h();const p="forum:open";e.commands.addCommand(p,{label:"Databrix Forum",execute:()=>{u.isDisposed&&(u=h()),u.isAttached||e.shell.add(u,"main"),e.shell.activateById(u.id)}}),t.addItem({command:p,category:"Forum"})}}}}]);