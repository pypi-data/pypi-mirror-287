"""
This type stub file was generated by pyright.
"""

"""
This module provides a Locator class for finding template files.

"""

class Locator:
    def __init__(self, extension=...) -> None:
        """
        Construct a template locator.

        Arguments:

          extension: the template file extension, without the leading dot.
            Pass False for no extension (e.g. to use extensionless template
            files).  Defaults to the package default.

        """
        ...

    def get_object_directory(self, obj):  # -> None:
        """
        Return the directory containing an object's defining class.

        Returns None if there is no such directory, for example if the
        class was defined in an interactive Python session, or in a
        doctest that appears in a text file (rather than a Python file).

        """
        ...

    def make_template_name(self, obj):  # -> str:
        """
        Return the canonical template name for an object instance.

        This method converts Python-style class names (PEP 8's recommended
        CamelCase, aka CapWords) to lower_case_with_underscords.  Here
        is an example with code:

        >>> class HelloWorld(object):
        ...     pass
        >>> hi = HelloWorld()
        >>>
        >>> locator = Locator()
        >>> locator.make_template_name(hi)
        'hello_world'

        """
        ...

    def make_file_name(self, template_name, template_extension=...):
        """
        Generate and return the file name for the given template name.

        Arguments:

          template_extension: defaults to the instance's extension.

        """
        ...

    def find_file(self, file_name, search_dirs):  # -> LiteralString:
        """
        Return the path to a template with the given file name.

        Arguments:

          file_name: the file name of the template.

          search_dirs: the list of directories in which to search.

        """
        ...

    def find_name(self, template_name, search_dirs):  # -> LiteralString:
        """
        Return the path to a template with the given name.

        Arguments:

          template_name: the name of the template.

          search_dirs: the list of directories in which to search.

        """
        ...

    def find_object(self, obj, search_dirs, file_name=...):  # -> LiteralString:
        """
        Return the path to a template associated with the given object.

        """
        ...
