"""
This type stub file was generated by pyright.
"""

"""
Exposes a parse() function to parse template strings.

"""
END_OF_LINE_CHARACTERS = ...
NON_BLANK_RE = ...

def parse(template, delimiters=...):
    """
    Parse a unicode template string and return a ParsedTemplate instance.

    Arguments:

      template: a unicode template string.

      delimiters: a 2-tuple of delimiters.  Defaults to the package default.

    Examples:

    >>> parsed = parse("Hey {{#who}}{{name}}!{{/who}}")
    >>> print(str(parsed).replace('u', ''))  # This is an old hack.
    ['Hey ', _SectionNode(key='who', index_begin=12, index_end=21, parsed=[_EscapeNode(key='name'), '!'])]

    """
    ...

class ParsingError(Exception): ...

class _CommentNode:
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context):  # -> Literal['']:
        ...

class _ChangeNode:
    def __init__(self, delimiters) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context):  # -> Literal['']:
        ...

class _EscapeNode:
    def __init__(self, key) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context): ...

class _LiteralNode:
    def __init__(self, key) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context): ...

class _PartialNode:
    def __init__(self, key, indent) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context): ...

class _InvertedNode:
    def __init__(self, key, parsed_section) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context):  # -> Literal['']:
        ...

class _SectionNode:
    def __init__(
        self, key, parsed, delimiters, template, index_begin, index_end
    ) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def render(self, engine, context):  # -> str:
        ...

class _Parser:
    _delimiters = ...
    _template_re = ...
    def __init__(self, delimiters=...) -> None: ...
    def parse(self, template):
        """
        Parse a template string starting at some index.

        This method uses the current tag delimiter.

        Arguments:

          template: a unicode string that is the template to parse.

          index: the index at which to start parsing.

        Returns:

          a ParsedTemplate instance.

        """
        ...
