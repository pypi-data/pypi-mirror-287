"""
This type stub file was generated by pyright.
"""

"""
This module provides a Loader class for locating and reading templates.

"""

class Loader:
    """
    Loads the template associated to a name or user-defined object.

    All load_*() methods return the template as a unicode string.

    """
    def __init__(
        self, file_encoding=..., extension=..., to_unicode=..., search_dirs=...
    ) -> None:
        """
        Construct a template loader instance.

        Arguments:

          extension: the template file extension, without the leading dot.
            Pass False for no extension (e.g. to use extensionless template
            files).  Defaults to the package default.

          file_encoding: the name of the encoding to use when converting file
            contents to unicode.  Defaults to the package default.

          search_dirs: the list of directories in which to search when loading
            a template by name or file name.  Defaults to the package default.

          to_unicode: the function to use when converting strings of type
            str to unicode.  The function should have the signature:

              to_unicode(s, encoding=None)

            It should accept a string of type str and an optional encoding
            name and return a string of type unicode.  Defaults to calling
            Python's built-in function unicode() using the package string
            encoding and decode errors defaults.

        """
        ...

    def str(self, s, encoding=...):  # -> str:
        """
        Convert a string to unicode using the given encoding, and return it.

        This function uses the underlying to_unicode attribute.

        Arguments:

          s: a basestring instance to convert to unicode.  Unlike Python's
            built-in unicode() function, it is okay to pass unicode strings
            to this function.  (Passing a unicode string to Python's unicode()
            with the encoding argument throws the error, "TypeError: decoding
            Unicode is not supported.")

          encoding: the encoding to pass to the to_unicode attribute.
            Defaults to None.

        """
        ...

    def read(self, path, encoding=...):  # -> str:
        """
        Read the template at the given path, and return it as a unicode string.

        """
        ...

    def load_file(self, file_name):  # -> str:
        """
        Find and return the template with the given file name.

        Arguments:

          file_name: the file name of the template.

        """
        ...

    def load_name(self, name):  # -> str:
        """
        Find and return the template with the given template name.

        Arguments:

          name: the name of the template.

        """
        ...

    def load_object(self, obj):  # -> str:
        """
        Find and return the template associated to the given object.

        Arguments:

          obj: an instance of a user-defined class.

          search_dirs: the list of directories in which to search.

        """
        ...
