[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alpax"
dynamic = ["version"]
description = 'Generate custom Ableton Live packs'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "Kevin Montag", email = "kmontag@cs.stanford.edu" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/kmontag/alpax#readme"
Issues = "https://github.com/kmontag/alpax/issues"
Source = "https://github.com/kmontag/alpax"

[tool.hatch.version]
path = "src/alpax/__about__.py"

[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pytest-asyncio~=0.23.7",
]

[tool.hatch.envs.coverage]
detached = true
dependencies = [
  "coverage~=7.6.0",
]

[tool.hatch.envs.coverage.scripts]
combine = "coverage combine {args}"
report-xml = "coverage xml"

[tool.hatch.envs.types]
template = "hatch-test"
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/alpax tests}"

[tool.coverage.run]
source_pkgs = ["alpax", "tests"]
branch = true
parallel = true
omit = [
  "src/alpax/__about__.py",
]

[tool.coverage.paths]
alpax = ["src/alpax", "*/alpax/src/alpax"]
tests = ["tests", "*/alpax/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true

[tool.ruff]
# Explicitly declare default hatch settings, see
# https://hatch.pypa.io/1.9/config/static-analysis/#default-settings.
line-length = 120
builtins = ["alpax"]

[tool.ruff.format]
# More explicit default hatch settings.
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
# - ARG: unused arguments
# - B: flake8-bugbear
# - E: pycodestyle errors
# - I: import sorting
# - W: pycodestyle warnings
extend-select = ["ARG", "B", "E", "I", "W"]
# Turn off strict max line length; B950 allows for exceeding the max
# line length in some cases.
extend-ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["alpax"]

[tool.semantic_release]
assets = []
# Work around not being able to install packages preemptively in the
# semantic_release environment. See
# https://github.com/python-semantic-release/python-semantic-release/issues/723.
build_command = "pip install hatch && hatch build"
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
version_variables = ["src/alpax/__about__.py:__version__"]

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
