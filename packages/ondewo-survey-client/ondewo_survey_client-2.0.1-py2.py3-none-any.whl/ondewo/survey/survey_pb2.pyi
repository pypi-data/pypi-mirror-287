"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2020 ONDEWO GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. (editesyntax = "proto3";
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SubFlow:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SubFlowEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SubFlow.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SUBFLOW_UNSPECIFIED: _SubFlow.ValueType  # 0
    """Not specified. This value should be never used."""
    BOT: _SubFlow.ValueType  # 1
    """The subflow allowing the user to inquire whether s/he is talking to a bot"""
    LEGAL_ENTITY: _SubFlow.ValueType  # 2
    """The subflow allowing the user to inquire about the legal entity"""
    POSTAL_ADDRESS: _SubFlow.ValueType  # 3
    """The subflow allowing the user to inquire about the postal address"""
    EMAIL_ADDRESS: _SubFlow.ValueType  # 4
    """The subflow allowing the user to inquire about the email address"""
    PHONE_NUMBER: _SubFlow.ValueType  # 5
    """The subflow allowing the user to inquire about the phone number"""
    PHONE_HOURS: _SubFlow.ValueType  # 6
    """The subflow allowing the user to inquire about the phone hours"""
    EXPECTED_DURATION: _SubFlow.ValueType  # 7
    """The subflow allowing the user to inquire about the expected duration of the survey"""
    PURPOSE: _SubFlow.ValueType  # 8
    """The subflow allowing the user to inquire about the purpose of the survey"""

class SubFlow(_SubFlow, metaclass=_SubFlowEnumTypeWrapper):
    """Enumeration of (some of) the subflows which are created by default
    This can be used to "switch off" particular subflows when creating an agent during CreateSurvey
    Subflows are defined as one of the following:
    - sequences of intents A -> B_1, ..., B_n -> ... -> Z_1, ..., Z_m which are linked by context relationships
         such that the first intent in the sequence can always be triggered
    - single intents which can always be triggered
    """

SUBFLOW_UNSPECIFIED: SubFlow.ValueType  # 0
"""Not specified. This value should be never used."""
BOT: SubFlow.ValueType  # 1
"""The subflow allowing the user to inquire whether s/he is talking to a bot"""
LEGAL_ENTITY: SubFlow.ValueType  # 2
"""The subflow allowing the user to inquire about the legal entity"""
POSTAL_ADDRESS: SubFlow.ValueType  # 3
"""The subflow allowing the user to inquire about the postal address"""
EMAIL_ADDRESS: SubFlow.ValueType  # 4
"""The subflow allowing the user to inquire about the email address"""
PHONE_NUMBER: SubFlow.ValueType  # 5
"""The subflow allowing the user to inquire about the phone number"""
PHONE_HOURS: SubFlow.ValueType  # 6
"""The subflow allowing the user to inquire about the phone hours"""
EXPECTED_DURATION: SubFlow.ValueType  # 7
"""The subflow allowing the user to inquire about the expected duration of the survey"""
PURPOSE: SubFlow.ValueType  # 8
"""The subflow allowing the user to inquire about the purpose of the survey"""
global___SubFlow = SubFlow

@typing_extensions.final
class Survey(google.protobuf.message.Message):
    """///// Core Messages ///////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _AgentStatus:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _AgentStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Survey._AgentStatus.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TO_BE_INITIALIZED: Survey._AgentStatus.ValueType  # 0
        UPDATED: Survey._AgentStatus.ValueType  # 1
        UPDATING: Survey._AgentStatus.ValueType  # 2
        OUTDATED: Survey._AgentStatus.ValueType  # 3

    class AgentStatus(_AgentStatus, metaclass=_AgentStatusEnumTypeWrapper):
        """Note: All other attributes of the Agent message should be updated using the std mechanism of UpdateAgent
         once the survey has been created.
        """

    TO_BE_INITIALIZED: Survey.AgentStatus.ValueType  # 0
    UPDATED: Survey.AgentStatus.ValueType  # 1
    UPDATING: Survey.AgentStatus.ValueType  # 2
    OUTDATED: Survey.AgentStatus.ValueType  # 3

    SURVEY_ID_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    QUESTIONS_FIELD_NUMBER: builtins.int
    SURVEY_INFO_FIELD_NUMBER: builtins.int
    EXCLUDE_SUBFLOWS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    Read-only in the Survey message (assigned by the back-end)
    """
    display_name: builtins.str
    """Required. The (human readable) name of this survey"""
    language_code: builtins.str
    """Required. The language of the agent created for the survey.
    This is also the only supported language of the agent.
    ISO 639-1 language code
    """
    @property
    def questions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Question]:
        """Required. List of questions to be asked during the survey."""
    @property
    def survey_info(self) -> global___SurveyInfo:
        """Required. Information about the entity behind the survey, the purpose of the survey, legal stuff, etc."""
    @property
    def exclude_subflows(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___SubFlow.ValueType]:
        """Optional. List of subflows excluded for this survey."""
    status: global___Survey.AgentStatus.ValueType
    """Current status of the NLU Agent respecting to the Survey"""
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
        display_name: builtins.str = ...,
        language_code: builtins.str = ...,
        questions: collections.abc.Iterable[global___Question] | None = ...,
        survey_info: global___SurveyInfo | None = ...,
        exclude_subflows: collections.abc.Iterable[global___SubFlow.ValueType] | None = ...,
        status: global___Survey.AgentStatus.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["survey_info", b"survey_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name", b"display_name", "exclude_subflows", b"exclude_subflows", "language_code", b"language_code", "questions", b"questions", "status", b"status", "survey_id", b"survey_id", "survey_info", b"survey_info"]) -> None: ...

global___Survey = Survey

@typing_extensions.final
class SurveyInfo(google.protobuf.message.Message):
    """Collect information about the entity behind the survey, the purpose of the survey, legal stuff, etc.
    This is needed to generate meaningful messages and training data for some of the auto-generated intents.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LEGAL_ENTITY_FIELD_NUMBER: builtins.int
    POSTAL_ADDRESS_FIELD_NUMBER: builtins.int
    EMAIL_ADDRESS_FIELD_NUMBER: builtins.int
    PHONE_NUMBER_FIELD_NUMBER: builtins.int
    PHONE_HOURS_FIELD_NUMBER: builtins.int
    EXPECTED_DURATION_FIELD_NUMBER: builtins.int
    PURPOSE_FIELD_NUMBER: builtins.int
    TOPIC_FIELD_NUMBER: builtins.int
    LEGAL_DISCLAIMER_FIELD_NUMBER: builtins.int
    ANONYMOUS_FIELD_NUMBER: builtins.int
    legal_entity: builtins.str
    """Required unless SubFlow.LEGAL_ENTITY is deselected.
    The legal entity (company, research institute, etc.) on whose behalf the survey is performed
    """
    postal_address: builtins.str
    """Required unless SubFlow.POSTAL_ADDRESS is deselected.
    The postal address to which callees can direct any requests.
    """
    email_address: builtins.str
    """Required unless SubFlow.EMAIL_ADDRESS is deselected.
    The email address to which callees can direct any requests.
    """
    phone_number: builtins.str
    """Required unless SubFlow.PHONE_NUMBER is deselected.
    The phone number to which callees can direct any requests.
    """
    phone_hours: builtins.str
    """Required unless SubFlow.PHONE_HOURS is deselected.
    The phone hours during which callees can call (in pronounceable form).
    """
    expected_duration: builtins.str
    """Required unless SubFlow.EXPECTED_DURATION is deselected.
    The expected duration of the survey (in pronounceable form)
    """
    purpose: builtins.str
    """Required unless SubFlow.PURPOSE is deselected.
    An explanation regarding the purpose of the survey (in pronounceable form)
    """
    topic: builtins.str
    """Required.
    A one-word explanation of the survey topic (in pronounceable form)
    """
    legal_disclaimer: builtins.str
    """Required.
    A pronounceable explanation of the legal implications of participating in the survey.
    For example:
     "Your answers during this survey will be stored anonymously for the next two years and then deleted."
    Should be formulated such that the agent can afterwards ask for the consent of the user.
    Example for how the agent could continue: "Are you willing to participate in this survey?"
    """
    anonymous: builtins.bool
    """Optional.
    Defaults to False. Allows the definition of a survey as anonymous or not.
    If the survey is not anonymous, the name of the people as well as their number will be recorded
    """
    def __init__(
        self,
        *,
        legal_entity: builtins.str = ...,
        postal_address: builtins.str = ...,
        email_address: builtins.str = ...,
        phone_number: builtins.str = ...,
        phone_hours: builtins.str = ...,
        expected_duration: builtins.str = ...,
        purpose: builtins.str = ...,
        topic: builtins.str = ...,
        legal_disclaimer: builtins.str = ...,
        anonymous: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["anonymous", b"anonymous", "email_address", b"email_address", "expected_duration", b"expected_duration", "legal_disclaimer", b"legal_disclaimer", "legal_entity", b"legal_entity", "phone_hours", b"phone_hours", "phone_number", b"phone_number", "postal_address", b"postal_address", "purpose", b"purpose", "topic", b"topic"]) -> None: ...

global___SurveyInfo = SurveyInfo

@typing_extensions.final
class Question(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPEN_QUESTION_FIELD_NUMBER: builtins.int
    SINGLE_CHOICE_QUESTION_FIELD_NUMBER: builtins.int
    MULTIPLE_CHOICE_QUESTION_FIELD_NUMBER: builtins.int
    SCALE_QUESTION_FIELD_NUMBER: builtins.int
    SINGLE_PARAMETER_QUESTION_FIELD_NUMBER: builtins.int
    MULTIPLE_PARAMETER_QUESTION_FIELD_NUMBER: builtins.int
    @property
    def open_question(self) -> global___OpenQuestion: ...
    @property
    def single_choice_question(self) -> global___SingleChoiceQuestion: ...
    @property
    def multiple_choice_question(self) -> global___MultipleChoiceQuestion: ...
    @property
    def scale_question(self) -> global___ScaleQuestion:
        """convenience wrapper around a SingleChoiceQuestion"""
    @property
    def single_parameter_question(self) -> global___SingleParameterQuestion: ...
    @property
    def multiple_parameter_question(self) -> global___MultipleParameterQuestion: ...
    def __init__(
        self,
        *,
        open_question: global___OpenQuestion | None = ...,
        single_choice_question: global___SingleChoiceQuestion | None = ...,
        multiple_choice_question: global___MultipleChoiceQuestion | None = ...,
        scale_question: global___ScaleQuestion | None = ...,
        single_parameter_question: global___SingleParameterQuestion | None = ...,
        multiple_parameter_question: global___MultipleParameterQuestion | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["multiple_choice_question", b"multiple_choice_question", "multiple_parameter_question", b"multiple_parameter_question", "open_question", b"open_question", "question", b"question", "scale_question", b"scale_question", "single_choice_question", b"single_choice_question", "single_parameter_question", b"single_parameter_question"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["multiple_choice_question", b"multiple_choice_question", "multiple_parameter_question", b"multiple_parameter_question", "open_question", b"open_question", "question", b"question", "scale_question", b"scale_question", "single_choice_question", b"single_choice_question", "single_parameter_question", b"single_parameter_question"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["question", b"question"]) -> typing_extensions.Literal["open_question", "single_choice_question", "multiple_choice_question", "scale_question", "single_parameter_question", "multiple_parameter_question"] | None: ...

global___Question = Question

@typing_extensions.final
class OpenQuestion(google.protobuf.message.Message):
    """A question to which any kind of reply can be given and recorded
    fixme: not working yet
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["question_text", b"question_text"]) -> None: ...

global___OpenQuestion = OpenQuestion

@typing_extensions.final
class SingleChoiceQuestion(google.protobuf.message.Message):
    """A question for which exactly one out of a predefined set of options is expected as answer
    Example: SingleChoiceQuestion(
         question_text='Who is your favorite movie hero?',
         choices=[
             Choice(synonyms=['Bond', 'James Bond']),
             Choice(synonyms=['Batman']),
             Choice(synonyms=['Superman', 'Clark Kent']),
             ]
         )
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    CHOICES_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    @property
    def choices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Choice]:
        """List of choices which are accepted for this question
        Each Choice is represented by lists of synonyms.
        Note: needs to contain at least 2 choices
        """
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
        choices: collections.abc.Iterable[global___Choice] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["choices", b"choices", "question_text", b"question_text"]) -> None: ...

global___SingleChoiceQuestion = SingleChoiceQuestion

@typing_extensions.final
class MultipleChoiceQuestion(google.protobuf.message.Message):
    """A question for which exactly one or more out of a predefined set of options are expected as answers
    Example: MultipleChoiceQuestion(
         question_text='Which colors do you like?',
         choices=[
             Choice(synonyms=['red', 'reddisch']),
             Choice(synonyms=['blue', 'blueish']),
             Choice(synonyms=['yellow']),
             ]
          )
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    CHOICES_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    @property
    def choices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Choice]:
        """List of choices which are accepted for this question
        Each Choice is represented by lists of synonyms.
        Note: needs to contain at least 2 choices
        """
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
        choices: collections.abc.Iterable[global___Choice] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["choices", b"choices", "question_text", b"question_text"]) -> None: ...

global___MultipleChoiceQuestion = MultipleChoiceQuestion

@typing_extensions.final
class ScaleQuestion(google.protobuf.message.Message):
    """A question for which an answer on a user-defined scale is expected"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ScaleValue(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VALUE_FIELD_NUMBER: builtins.int
        LABEL_FIELD_NUMBER: builtins.int
        value: builtins.int
        label: builtins.str
        def __init__(
            self,
            *,
            value: builtins.int = ...,
            label: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["label", b"label", "value", b"value"]) -> None: ...

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    MIN_VALUE_FIELD_NUMBER: builtins.int
    MAX_VALUE_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    @property
    def min_value(self) -> global___ScaleQuestion.ScaleValue: ...
    @property
    def max_value(self) -> global___ScaleQuestion.ScaleValue: ...
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
        min_value: global___ScaleQuestion.ScaleValue | None = ...,
        max_value: global___ScaleQuestion.ScaleValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["max_value", b"max_value", "min_value", b"min_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["max_value", b"max_value", "min_value", b"min_value", "question_text", b"question_text"]) -> None: ...

global___ScaleQuestion = ScaleQuestion

@typing_extensions.final
class SingleParameterQuestion(google.protobuf.message.Message):
    """SingleParameterQuestion defines a question which prompts the user for one entity of a particular type
    Example: SingleParameterQuestion(question_text='How old are you?', parameter_type='sys.number')
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    PARAMETER_TYPE_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    parameter_type: builtins.str
    """The display name of the entity (type) which is accepted as an answer to this question
    Note: the corresponding entity_type must exist (system entity type) and is not automatically created
    """
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
        parameter_type: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameter_type", b"parameter_type", "question_text", b"question_text"]) -> None: ...

global___SingleParameterQuestion = SingleParameterQuestion

@typing_extensions.final
class MultipleParameterQuestion(google.protobuf.message.Message):
    """MultipleParameterQuestion defines a question which prompts the user for one or several entities of one particular type
    Example: MultipleParameterQuestion(question_text='How old are your children?', parameter_type='sys.number')
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUESTION_TEXT_FIELD_NUMBER: builtins.int
    PARAMETER_TYPE_FIELD_NUMBER: builtins.int
    question_text: builtins.str
    """The text which introduces the question (should be pronounceable)"""
    parameter_type: builtins.str
    """The display name of the entity (type) which is accepted as an answer to this question
    Note: the corresponding entity_type must exist (system entity type) and is not automatically created
    """
    def __init__(
        self,
        *,
        question_text: builtins.str = ...,
        parameter_type: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameter_type", b"parameter_type", "question_text", b"question_text"]) -> None: ...

global___MultipleParameterQuestion = MultipleParameterQuestion

@typing_extensions.final
class Choice(google.protobuf.message.Message):
    """The Choice message defines one "option" for the SingleChoiceQuestion and MultipleChoiceQuestion question types
    Example: Choice(synonyms=["blue", "blueish", "pale blue", "deep blue"])
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYNONYMS_FIELD_NUMBER: builtins.int
    FOLLOW_UP_QUESTION_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def synonyms(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The synonyms which are recognized as equivalent for identifying one option"""
    @property
    def follow_up_question(self) -> global___Question:
        """Optional; Nested question if this specific choice gets chosen.
        Note: the follow-up question is only available for the SingleChoiceQuestion
        """
    value: builtins.str
    """The "canonical value" (i.e. the entity value)"""
    def __init__(
        self,
        *,
        synonyms: collections.abc.Iterable[builtins.str] | None = ...,
        follow_up_question: global___Question | None = ...,
        value: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["follow_up_question", b"follow_up_question"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["follow_up_question", b"follow_up_question", "synonyms", b"synonyms", "value", b"value"]) -> None: ...

global___Choice = Choice

@typing_extensions.final
class Answer(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class UserInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FIRST_NAME_FIELD_NUMBER: builtins.int
        LAST_NAME_FIELD_NUMBER: builtins.int
        PHONE_NUMBER_FIELD_NUMBER: builtins.int
        SESSION_ID_FIELD_NUMBER: builtins.int
        USER_ID_FIELD_NUMBER: builtins.int
        first_name: builtins.str
        """First name of the User to be surveyed"""
        last_name: builtins.str
        """Last name of the User to be surveyed"""
        phone_number: builtins.str
        """Phone number of the User to be surveyed"""
        session_id: builtins.str
        """the ID of the session on which the answer was collected"""
        user_id: builtins.str
        """Unique identifier of the User to be surveyed"""
        def __init__(
            self,
            *,
            first_name: builtins.str = ...,
            last_name: builtins.str = ...,
            phone_number: builtins.str = ...,
            session_id: builtins.str = ...,
            user_id: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["first_name", b"first_name", "last_name", b"last_name", "phone_number", b"phone_number", "session_id", b"session_id", "user_id", b"user_id"]) -> None: ...

    QUESTION_NR_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    ANSWER_TEXT_FIELD_NUMBER: builtins.int
    ANSWER_PARAMETER_FIELD_NUMBER: builtins.int
    ANSWER_PARAMETER_ORIGINAL_FIELD_NUMBER: builtins.int
    ANONYMOUS_FIELD_NUMBER: builtins.int
    USER_INFORMATION_FIELD_NUMBER: builtins.int
    question_nr: builtins.int
    """the number of the question to which this answer belongs"""
    session_id: builtins.str
    """the ID of the session on which the answer was collected"""
    answer_text: builtins.str
    """Required; the full answer text"""
    answer_parameter: builtins.str
    """fixme: better names and doc-strings below
    Optional; contains the normalized value of the selected option (parameter) extracted
    """
    answer_parameter_original: builtins.str
    """Optional; contains the original text of the selected option (parameter) extracted"""
    anonymous: builtins.bool
    @property
    def user_information(self) -> global___Answer.UserInfo: ...
    def __init__(
        self,
        *,
        question_nr: builtins.int = ...,
        session_id: builtins.str = ...,
        answer_text: builtins.str = ...,
        answer_parameter: builtins.str = ...,
        answer_parameter_original: builtins.str = ...,
        anonymous: builtins.bool = ...,
        user_information: global___Answer.UserInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["anonymous", b"anonymous", "is_anonymous", b"is_anonymous", "user_information", b"user_information"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["anonymous", b"anonymous", "answer_parameter", b"answer_parameter", "answer_parameter_original", b"answer_parameter_original", "answer_text", b"answer_text", "is_anonymous", b"is_anonymous", "question_nr", b"question_nr", "session_id", b"session_id", "user_information", b"user_information"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["is_anonymous", b"is_anonymous"]) -> typing_extensions.Literal["anonymous", "user_information"] | None: ...

global___Answer = Answer

@typing_extensions.final
class CreateSurveyRequest(google.protobuf.message.Message):
    """///// Request / Response messages ///////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_FIELD_NUMBER: builtins.int
    @property
    def survey(self) -> global___Survey: ...
    def __init__(
        self,
        *,
        survey: global___Survey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["survey", b"survey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey", b"survey"]) -> None: ...

global___CreateSurveyRequest = CreateSurveyRequest

@typing_extensions.final
class GetSurveyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    """
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey_id", b"survey_id"]) -> None: ...

global___GetSurveyRequest = GetSurveyRequest

@typing_extensions.final
class UpdateSurveyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def survey(self) -> global___Survey:
        """Updated survey. Note: the ID must refer to an existing survey which will be updated"""
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Optional. Field mask that defines which fields get updated. Default: all fields are updated.
        Example:
                 - update_mask = FieldMask( [ 'survey.display_name', 'survey.questions' ] )
        """
    def __init__(
        self,
        *,
        survey: global___Survey | None = ...,
        update_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["survey", b"survey", "update_mask", b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey", b"survey", "update_mask", b"update_mask"]) -> None: ...

global___UpdateSurveyRequest = UpdateSurveyRequest

@typing_extensions.final
class DeleteSurveyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    """
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey_id", b"survey_id"]) -> None: ...

global___DeleteSurveyRequest = DeleteSurveyRequest

@typing_extensions.final
class GetSurveyAnswersRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    USER_ID_FIELD_NUMBER: builtins.int
    USER_PHONE_NUMBER_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    session_id: builtins.str
    """ID of one specific session on which survey answers were collected (contains survey_id)"""
    user_id: builtins.str
    """User Identifier. Note, if the survey is anonymous there will no identifier to filter on"""
    user_phone_number: builtins.str
    """User phone number. Note, if the survey is anonymous there will no identifier to filter on"""
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
        session_id: builtins.str = ...,
        user_id: builtins.str = ...,
        user_phone_number: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["identifier", b"identifier", "session_id", b"session_id", "user_id", b"user_id", "user_phone_number", b"user_phone_number"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["identifier", b"identifier", "session_id", b"session_id", "survey_id", b"survey_id", "user_id", b"user_id", "user_phone_number", b"user_phone_number"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["identifier", b"identifier"]) -> typing_extensions.Literal["session_id", "user_id", "user_phone_number"] | None: ...

global___GetSurveyAnswersRequest = GetSurveyAnswersRequest

@typing_extensions.final
class GetAllSurveyAnswersRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    """
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey_id", b"survey_id"]) -> None: ...

global___GetAllSurveyAnswersRequest = GetAllSurveyAnswersRequest

@typing_extensions.final
class SurveyAnswersResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    ANSWERS_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    """
    @property
    def answers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Answer]:
        """all requested answers"""
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
        answers: collections.abc.Iterable[global___Answer] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["answers", b"answers", "survey_id", b"survey_id"]) -> None: ...

global___SurveyAnswersResponse = SurveyAnswersResponse

@typing_extensions.final
class ListSurveysRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    page_token: builtins.str
    """Optional. The next_page_token value returned from a previous list request.
    Example:
         "current_index-10--page_size-20"
         Start page -> 10
         Page size -> 20
    """
    def __init__(
        self,
        *,
        page_token: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_token", b"page_token"]) -> None: ...

global___ListSurveysRequest = ListSurveysRequest

@typing_extensions.final
class ListSurveysResponse(google.protobuf.message.Message):
    """The response message for [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents]."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEYS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def surveys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Survey]:
        """The list of surveys. There will be a maximum number of items
        returned based on the page_token field in the request.
        """
    next_page_token: builtins.str
    """Token to retrieve the next page of results, or empty if there are no
    more results in the list.
    """
    def __init__(
        self,
        *,
        surveys: collections.abc.Iterable[global___Survey] | None = ...,
        next_page_token: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token", b"next_page_token", "surveys", b"surveys"]) -> None: ...

global___ListSurveysResponse = ListSurveysResponse

@typing_extensions.final
class AgentSurveyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SURVEY_ID_FIELD_NUMBER: builtins.int
    survey_id: builtins.str
    """The project identifier for this survey. Equal to the parent of the corresponding Agent.
    Format: `projects/<Project ID>/agent`.
    """
    def __init__(
        self,
        *,
        survey_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["survey_id", b"survey_id"]) -> None: ...

global___AgentSurveyRequest = AgentSurveyRequest

@typing_extensions.final
class AgentSurveyResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARENT_FIELD_NUMBER: builtins.int
    parent: builtins.str
    """The parent of an agent. Equal to the survey ID.
    Format: `projects/<Project ID>/agent`.
    """
    def __init__(
        self,
        *,
        parent: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent", b"parent"]) -> None: ...

global___AgentSurveyResponse = AgentSurveyResponse
