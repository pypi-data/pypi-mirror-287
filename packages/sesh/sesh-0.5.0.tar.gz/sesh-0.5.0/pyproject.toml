
[project]
name = "sesh"
description = "sesh provides session management using redis"
dynamic = ["version"]
authors = [
    {name = "Brian Farrell", email = "brian.farrell@me.com"},
]
license = {text = "AGPLv3"}
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed"
]
keywords = ["session", "redis"]

dependencies = [
    ##### app #####
    # A modern, fast, web framework for building APIs with Python based on standard Python type hints.
    "fastapi>=0.111.1",
    # Cryptographically sign data before sending to untrusted enviroments.
    "itsdangerous>=2.2.0",
    # Data validation
    "pydantic[email]>=2.8.2",
    # Pydantic features for loading a settings or config class from environment variables or secrets files
    "pydantic-settings>=2.3.4",
    # Redis key/value store.
    "redis[hiredis]>=5.0.7",
]

[project.optional-dependencies]
dev = [
    # A utility for publishing Python packages on PyPI.
    "twine>=5.1.1"
]

doc = [
    # A Sphinx extension to parse MyST, a rich and extensible flavour of Markdown.
    "myst-parser>=3.0.1",
    # Include setuptools-scm as a doc dependancy here, as it imported into the Sphinx conf.py module
    "setuptools-scm>=8.1.0",
    # Tool to create intelligent and beautiful documentation
    "sphinx>=7.4.6",
    # Napoleon is a pre-processor that parses NumPy and Google style docstrings and converts them to reStructuredText.
    "sphinxcontrib-napoleon>=0.7",
    # Responsive Material Design theme for Sphinx documentation
    "sphinx-material>=0.0.36",
]

test = [
    # Programmatically send startup/shutdown lifespan events into ASGI applications.  Useful for testing.
    "asgi-lifespan>=2.1.0",
    # Tool for measuring code coverage of Python programs
    "coverage[toml]>=7.6.0",
    # Useful comparisons for unit testing
    "dirty-equals>=0.7.1.post0",
    # HTTPX is a fully featured HTTP client for Python 3, which provides sync and async APIs, HTTP/1.1 and HTTP/2.
    "httpx>=0.27.0",
    # Static type checker for Python
    "mypy>=1.11.0",
    # Simple powerful testing with Python
    "pytest>=8.2.2",
    # A much friendlier pytest asyncio plugin - run everything in the same event loop.
    "alt-pytest-asyncio>=0.8.1",
    # Enhanced support when using pytest with coverage
    "pytest-cov>=5.0.0",
    # pytest plugin that enables you to set environment variables in a pytest.ini or pyproject.toml file.
    "pytest-env>=1.1.3"
]

[project.urls]
repository = "https://gitlab.com/brianfarrell/sesh/"
documentation = "https://brianfarrell.gitlab.io/sesh/"

[build-system]
requires = ["build[virtualenv]", "setuptools", "setuptools-scm[toml]>=8.1.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["sesh*"]

[tool.setuptools_scm]
# include arbitrary keyword arguments in that section to be supplied to get_version().
version_scheme = "python-simplified-semver"
write_to = "sesh/_version.py"

[tool.coverage.run]
source = [ "sesh" ]
omit = [ "sesh/_version.py", "sesh/app/db/migrations/*", "sesh/app/db/tasks.py", "sesh/tests/*" ]

[tool.coverage.html]
directory = "reports/coverage/html"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.pytest_env]
SESH_DEPLOYMENT_STAGE="TEST"
