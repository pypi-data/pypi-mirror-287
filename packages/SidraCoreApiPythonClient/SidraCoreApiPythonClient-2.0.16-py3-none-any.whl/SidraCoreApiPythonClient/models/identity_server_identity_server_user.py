# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentityServerIdentityServerUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_principal_name': 'str',
        'display_name': 'str',
        'given_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'photo_base64': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_principal_name': 'userPrincipalName',
        'display_name': 'displayName',
        'given_name': 'givenName',
        'last_name': 'lastName',
        'email': 'email',
        'photo_base64': 'photoBase64'
    }

    def __init__(self, id=None, user_principal_name=None, display_name=None, given_name=None, last_name=None, email=None, photo_base64=None):  # noqa: E501
        """IdentityServerIdentityServerUser - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_principal_name = None
        self._display_name = None
        self._given_name = None
        self._last_name = None
        self._email = None
        self._photo_base64 = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if display_name is not None:
            self.display_name = display_name
        if given_name is not None:
            self.given_name = given_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if photo_base64 is not None:
            self.photo_base64 = photo_base64

    @property
    def id(self):
        """Gets the id of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The id of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityServerIdentityServerUser.


        :param id: The id of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The user_principal_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this IdentityServerIdentityServerUser.


        :param user_principal_name: The user_principal_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def display_name(self):
        """Gets the display_name of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The display_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IdentityServerIdentityServerUser.


        :param display_name: The display_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def given_name(self):
        """Gets the given_name of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The given_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this IdentityServerIdentityServerUser.


        :param given_name: The given_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def last_name(self):
        """Gets the last_name of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The last_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this IdentityServerIdentityServerUser.


        :param last_name: The last_name of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The email of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IdentityServerIdentityServerUser.


        :param email: The email of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def photo_base64(self):
        """Gets the photo_base64 of this IdentityServerIdentityServerUser.  # noqa: E501


        :return: The photo_base64 of this IdentityServerIdentityServerUser.  # noqa: E501
        :rtype: str
        """
        return self._photo_base64

    @photo_base64.setter
    def photo_base64(self, photo_base64):
        """Sets the photo_base64 of this IdentityServerIdentityServerUser.


        :param photo_base64: The photo_base64 of this IdentityServerIdentityServerUser.  # noqa: E501
        :type: str
        """

        self._photo_base64 = photo_base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityServerIdentityServerUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityServerIdentityServerUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
