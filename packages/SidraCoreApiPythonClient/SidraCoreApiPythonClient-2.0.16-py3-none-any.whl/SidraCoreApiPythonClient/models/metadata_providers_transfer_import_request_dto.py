# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataProvidersTransferImportRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_installation_id': 'str',
        'datafactory_id': 'int',
        'provider_item_ids': 'list[str]'
    }

    attribute_map = {
        'source_installation_id': 'sourceInstallationId',
        'datafactory_id': 'datafactoryId',
        'provider_item_ids': 'providerItemIds'
    }

    def __init__(self, source_installation_id=None, datafactory_id=None, provider_item_ids=None):  # noqa: E501
        """MetadataProvidersTransferImportRequestDto - a model defined in Swagger"""  # noqa: E501
        self._source_installation_id = None
        self._datafactory_id = None
        self._provider_item_ids = None
        self.discriminator = None
        if source_installation_id is not None:
            self.source_installation_id = source_installation_id
        if datafactory_id is not None:
            self.datafactory_id = datafactory_id
        if provider_item_ids is not None:
            self.provider_item_ids = provider_item_ids

    @property
    def source_installation_id(self):
        """Gets the source_installation_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501


        :return: The source_installation_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._source_installation_id

    @source_installation_id.setter
    def source_installation_id(self, source_installation_id):
        """Sets the source_installation_id of this MetadataProvidersTransferImportRequestDto.


        :param source_installation_id: The source_installation_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :type: str
        """

        self._source_installation_id = source_installation_id

    @property
    def datafactory_id(self):
        """Gets the datafactory_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501


        :return: The datafactory_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._datafactory_id

    @datafactory_id.setter
    def datafactory_id(self, datafactory_id):
        """Sets the datafactory_id of this MetadataProvidersTransferImportRequestDto.


        :param datafactory_id: The datafactory_id of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :type: int
        """

        self._datafactory_id = datafactory_id

    @property
    def provider_item_ids(self):
        """Gets the provider_item_ids of this MetadataProvidersTransferImportRequestDto.  # noqa: E501


        :return: The provider_item_ids of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._provider_item_ids

    @provider_item_ids.setter
    def provider_item_ids(self, provider_item_ids):
        """Sets the provider_item_ids of this MetadataProvidersTransferImportRequestDto.


        :param provider_item_ids: The provider_item_ids of this MetadataProvidersTransferImportRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._provider_item_ids = provider_item_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataProvidersTransferImportRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataProvidersTransferImportRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
