# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryQueryRequestDtoTextOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_sepataror_character': 'str',
        'null_value_replacement': 'str',
        'encoding': 'str',
        'storage_name': 'str',
        'storage_token': 'str',
        'container_name': 'str',
        'output_folder_name': 'str',
        'id_entity': 'int',
        'comma_separated_attributes': 'str',
        'filter_expression': 'str',
        'id_assets': 'list[int]',
        'include_data_with_sidra_validation_passed': 'bool',
        'overwrite': 'bool'
    }

    attribute_map = {
        'row_sepataror_character': 'rowSepatarorCharacter',
        'null_value_replacement': 'nullValueReplacement',
        'encoding': 'encoding',
        'storage_name': 'storageName',
        'storage_token': 'storageToken',
        'container_name': 'containerName',
        'output_folder_name': 'outputFolderName',
        'id_entity': 'idEntity',
        'comma_separated_attributes': 'commaSeparatedAttributes',
        'filter_expression': 'filterExpression',
        'id_assets': 'idAssets',
        'include_data_with_sidra_validation_passed': 'includeDataWithSidraValidationPassed',
        'overwrite': 'overwrite'
    }

    def __init__(self, row_sepataror_character=None, null_value_replacement=None, encoding=None, storage_name=None, storage_token=None, container_name=None, output_folder_name=None, id_entity=None, comma_separated_attributes=None, filter_expression=None, id_assets=None, include_data_with_sidra_validation_passed=None, overwrite=None):  # noqa: E501
        """QueryQueryRequestDtoTextOutput - a model defined in Swagger"""  # noqa: E501
        self._row_sepataror_character = None
        self._null_value_replacement = None
        self._encoding = None
        self._storage_name = None
        self._storage_token = None
        self._container_name = None
        self._output_folder_name = None
        self._id_entity = None
        self._comma_separated_attributes = None
        self._filter_expression = None
        self._id_assets = None
        self._include_data_with_sidra_validation_passed = None
        self._overwrite = None
        self.discriminator = None
        if row_sepataror_character is not None:
            self.row_sepataror_character = row_sepataror_character
        if null_value_replacement is not None:
            self.null_value_replacement = null_value_replacement
        if encoding is not None:
            self.encoding = encoding
        if storage_name is not None:
            self.storage_name = storage_name
        if storage_token is not None:
            self.storage_token = storage_token
        if container_name is not None:
            self.container_name = container_name
        if output_folder_name is not None:
            self.output_folder_name = output_folder_name
        if id_entity is not None:
            self.id_entity = id_entity
        if comma_separated_attributes is not None:
            self.comma_separated_attributes = comma_separated_attributes
        if filter_expression is not None:
            self.filter_expression = filter_expression
        if id_assets is not None:
            self.id_assets = id_assets
        if include_data_with_sidra_validation_passed is not None:
            self.include_data_with_sidra_validation_passed = include_data_with_sidra_validation_passed
        if overwrite is not None:
            self.overwrite = overwrite

    @property
    def row_sepataror_character(self):
        """Gets the row_sepataror_character of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The row_sepataror_character of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._row_sepataror_character

    @row_sepataror_character.setter
    def row_sepataror_character(self, row_sepataror_character):
        """Sets the row_sepataror_character of this QueryQueryRequestDtoTextOutput.


        :param row_sepataror_character: The row_sepataror_character of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._row_sepataror_character = row_sepataror_character

    @property
    def null_value_replacement(self):
        """Gets the null_value_replacement of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The null_value_replacement of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._null_value_replacement

    @null_value_replacement.setter
    def null_value_replacement(self, null_value_replacement):
        """Sets the null_value_replacement of this QueryQueryRequestDtoTextOutput.


        :param null_value_replacement: The null_value_replacement of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._null_value_replacement = null_value_replacement

    @property
    def encoding(self):
        """Gets the encoding of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The encoding of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this QueryQueryRequestDtoTextOutput.


        :param encoding: The encoding of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def storage_name(self):
        """Gets the storage_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The storage_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this QueryQueryRequestDtoTextOutput.


        :param storage_name: The storage_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._storage_name = storage_name

    @property
    def storage_token(self):
        """Gets the storage_token of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The storage_token of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._storage_token

    @storage_token.setter
    def storage_token(self, storage_token):
        """Sets the storage_token of this QueryQueryRequestDtoTextOutput.


        :param storage_token: The storage_token of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._storage_token = storage_token

    @property
    def container_name(self):
        """Gets the container_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The container_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this QueryQueryRequestDtoTextOutput.


        :param container_name: The container_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._container_name = container_name

    @property
    def output_folder_name(self):
        """Gets the output_folder_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The output_folder_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._output_folder_name

    @output_folder_name.setter
    def output_folder_name(self, output_folder_name):
        """Sets the output_folder_name of this QueryQueryRequestDtoTextOutput.


        :param output_folder_name: The output_folder_name of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._output_folder_name = output_folder_name

    @property
    def id_entity(self):
        """Gets the id_entity of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The id_entity of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this QueryQueryRequestDtoTextOutput.


        :param id_entity: The id_entity of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def comma_separated_attributes(self):
        """Gets the comma_separated_attributes of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The comma_separated_attributes of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._comma_separated_attributes

    @comma_separated_attributes.setter
    def comma_separated_attributes(self, comma_separated_attributes):
        """Sets the comma_separated_attributes of this QueryQueryRequestDtoTextOutput.


        :param comma_separated_attributes: The comma_separated_attributes of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._comma_separated_attributes = comma_separated_attributes

    @property
    def filter_expression(self):
        """Gets the filter_expression of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The filter_expression of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this QueryQueryRequestDtoTextOutput.


        :param filter_expression: The filter_expression of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: str
        """

        self._filter_expression = filter_expression

    @property
    def id_assets(self):
        """Gets the id_assets of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The id_assets of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: list[int]
        """
        return self._id_assets

    @id_assets.setter
    def id_assets(self, id_assets):
        """Sets the id_assets of this QueryQueryRequestDtoTextOutput.


        :param id_assets: The id_assets of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: list[int]
        """

        self._id_assets = id_assets

    @property
    def include_data_with_sidra_validation_passed(self):
        """Gets the include_data_with_sidra_validation_passed of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The include_data_with_sidra_validation_passed of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: bool
        """
        return self._include_data_with_sidra_validation_passed

    @include_data_with_sidra_validation_passed.setter
    def include_data_with_sidra_validation_passed(self, include_data_with_sidra_validation_passed):
        """Sets the include_data_with_sidra_validation_passed of this QueryQueryRequestDtoTextOutput.


        :param include_data_with_sidra_validation_passed: The include_data_with_sidra_validation_passed of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: bool
        """

        self._include_data_with_sidra_validation_passed = include_data_with_sidra_validation_passed

    @property
    def overwrite(self):
        """Gets the overwrite of this QueryQueryRequestDtoTextOutput.  # noqa: E501


        :return: The overwrite of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this QueryQueryRequestDtoTextOutput.


        :param overwrite: The overwrite of this QueryQueryRequestDtoTextOutput.  # noqa: E501
        :type: bool
        """

        self._overwrite = overwrite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryQueryRequestDtoTextOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryQueryRequestDtoTextOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
