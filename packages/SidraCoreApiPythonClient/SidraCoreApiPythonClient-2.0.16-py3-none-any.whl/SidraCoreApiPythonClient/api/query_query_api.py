# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class QueryQueryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_query_entity_id_entity_csv_get(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_csv_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_csv_get(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_entity: (required)
        :param str storage_name:
        :param str storage_token:
        :param str container_name:
        :param str output_folder_name:
        :param str comma_separated_attributes:
        :param str filter_expression:
        :param list[int] id_assets:
        :param bool include_data_with_sidra_validation_passed:
        :param bool overwrite:
        :param str row_sepataror_character:
        :param str null_value_replacement:
        :param str encoding:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_query_entity_id_entity_csv_get_with_http_info(id_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.api_query_entity_id_entity_csv_get_with_http_info(id_entity, **kwargs)  # noqa: E501
            return data

    def api_query_entity_id_entity_csv_get_with_http_info(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_csv_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_csv_get_with_http_info(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_entity: (required)
        :param str storage_name:
        :param str storage_token:
        :param str container_name:
        :param str output_folder_name:
        :param str comma_separated_attributes:
        :param str filter_expression:
        :param list[int] id_assets:
        :param bool include_data_with_sidra_validation_passed:
        :param bool overwrite:
        :param str row_sepataror_character:
        :param str null_value_replacement:
        :param str encoding:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_entity', 'storage_name', 'storage_token', 'container_name', 'output_folder_name', 'comma_separated_attributes', 'filter_expression', 'id_assets', 'include_data_with_sidra_validation_passed', 'overwrite', 'row_sepataror_character', 'null_value_replacement', 'encoding', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_query_entity_id_entity_csv_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_entity' is set
        if ('id_entity' not in params or
                params['id_entity'] is None):
            raise ValueError("Missing the required parameter `id_entity` when calling `api_query_entity_id_entity_csv_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_entity' in params:
            path_params['idEntity'] = params['id_entity']  # noqa: E501

        query_params = []
        if 'storage_name' in params:
            query_params.append(('storageName', params['storage_name']))  # noqa: E501
        if 'storage_token' in params:
            query_params.append(('storageToken', params['storage_token']))  # noqa: E501
        if 'container_name' in params:
            query_params.append(('containerName', params['container_name']))  # noqa: E501
        if 'output_folder_name' in params:
            query_params.append(('outputFolderName', params['output_folder_name']))  # noqa: E501
        if 'comma_separated_attributes' in params:
            query_params.append(('commaSeparatedAttributes', params['comma_separated_attributes']))  # noqa: E501
        if 'filter_expression' in params:
            query_params.append(('filterExpression', params['filter_expression']))  # noqa: E501
        if 'id_assets' in params:
            query_params.append(('idAssets', params['id_assets']))  # noqa: E501
            collection_formats['idAssets'] = 'multi'  # noqa: E501
        if 'include_data_with_sidra_validation_passed' in params:
            query_params.append(('includeDataWithSidraValidationPassed', params['include_data_with_sidra_validation_passed']))  # noqa: E501
        if 'overwrite' in params:
            query_params.append(('overwrite', params['overwrite']))  # noqa: E501
        if 'row_sepataror_character' in params:
            query_params.append(('rowSepatarorCharacter', params['row_sepataror_character']))  # noqa: E501
        if 'null_value_replacement' in params:
            query_params.append(('nullValueReplacement', params['null_value_replacement']))  # noqa: E501
        if 'encoding' in params:
            query_params.append(('encoding', params['encoding']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Query/entity/{idEntity}/csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_query_entity_id_entity_csv_post(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_csv_post(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_entity: (required)
        :param QueryQueryRequestDtoTextOutput body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_query_entity_id_entity_csv_post_with_http_info(id_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.api_query_entity_id_entity_csv_post_with_http_info(id_entity, **kwargs)  # noqa: E501
            return data

    def api_query_entity_id_entity_csv_post_with_http_info(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_csv_post_with_http_info(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_entity: (required)
        :param QueryQueryRequestDtoTextOutput body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_entity', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_query_entity_id_entity_csv_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_entity' is set
        if ('id_entity' not in params or
                params['id_entity'] is None):
            raise ValueError("Missing the required parameter `id_entity` when calling `api_query_entity_id_entity_csv_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_entity' in params:
            path_params['idEntity'] = params['id_entity']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Query/entity/{idEntity}/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_query_entity_id_entity_parquet_get(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_parquet_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_parquet_get(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_entity: (required)
        :param str storage_name:
        :param str storage_token:
        :param str container_name:
        :param str output_folder_name:
        :param str comma_separated_attributes:
        :param str filter_expression:
        :param list[int] id_assets:
        :param bool include_data_with_sidra_validation_passed:
        :param bool overwrite:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_query_entity_id_entity_parquet_get_with_http_info(id_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.api_query_entity_id_entity_parquet_get_with_http_info(id_entity, **kwargs)  # noqa: E501
            return data

    def api_query_entity_id_entity_parquet_get_with_http_info(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_parquet_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_parquet_get_with_http_info(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_entity: (required)
        :param str storage_name:
        :param str storage_token:
        :param str container_name:
        :param str output_folder_name:
        :param str comma_separated_attributes:
        :param str filter_expression:
        :param list[int] id_assets:
        :param bool include_data_with_sidra_validation_passed:
        :param bool overwrite:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_entity', 'storage_name', 'storage_token', 'container_name', 'output_folder_name', 'comma_separated_attributes', 'filter_expression', 'id_assets', 'include_data_with_sidra_validation_passed', 'overwrite', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_query_entity_id_entity_parquet_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_entity' is set
        if ('id_entity' not in params or
                params['id_entity'] is None):
            raise ValueError("Missing the required parameter `id_entity` when calling `api_query_entity_id_entity_parquet_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_entity' in params:
            path_params['idEntity'] = params['id_entity']  # noqa: E501

        query_params = []
        if 'storage_name' in params:
            query_params.append(('storageName', params['storage_name']))  # noqa: E501
        if 'storage_token' in params:
            query_params.append(('storageToken', params['storage_token']))  # noqa: E501
        if 'container_name' in params:
            query_params.append(('containerName', params['container_name']))  # noqa: E501
        if 'output_folder_name' in params:
            query_params.append(('outputFolderName', params['output_folder_name']))  # noqa: E501
        if 'comma_separated_attributes' in params:
            query_params.append(('commaSeparatedAttributes', params['comma_separated_attributes']))  # noqa: E501
        if 'filter_expression' in params:
            query_params.append(('filterExpression', params['filter_expression']))  # noqa: E501
        if 'id_assets' in params:
            query_params.append(('idAssets', params['id_assets']))  # noqa: E501
            collection_formats['idAssets'] = 'multi'  # noqa: E501
        if 'include_data_with_sidra_validation_passed' in params:
            query_params.append(('includeDataWithSidraValidationPassed', params['include_data_with_sidra_validation_passed']))  # noqa: E501
        if 'overwrite' in params:
            query_params.append(('overwrite', params['overwrite']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Query/entity/{idEntity}/parquet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_query_entity_id_entity_parquet_post(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_parquet_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_parquet_post(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_entity: (required)
        :param QueryQueryRequestV1Dto body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_query_entity_id_entity_parquet_post_with_http_info(id_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.api_query_entity_id_entity_parquet_post_with_http_info(id_entity, **kwargs)  # noqa: E501
            return data

    def api_query_entity_id_entity_parquet_post_with_http_info(self, id_entity, **kwargs):  # noqa: E501
        """api_query_entity_id_entity_parquet_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_query_entity_id_entity_parquet_post_with_http_info(id_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_entity: (required)
        :param QueryQueryRequestV1Dto body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_entity', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_query_entity_id_entity_parquet_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_entity' is set
        if ('id_entity' not in params or
                params['id_entity'] is None):
            raise ValueError("Missing the required parameter `id_entity` when calling `api_query_entity_id_entity_parquet_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_entity' in params:
            path_params['idEntity'] = params['id_entity']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Query/entity/{idEntity}/parquet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_status_route(self, run_id, **kwargs):  # noqa: E501
        """query_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_status_route(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int run_id: (required)
        :param str polling_token:
        :param str output_folder_name:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_status_route_with_http_info(run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_status_route_with_http_info(run_id, **kwargs)  # noqa: E501
            return data

    def query_status_route_with_http_info(self, run_id, **kwargs):  # noqa: E501
        """query_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_status_route_with_http_info(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int run_id: (required)
        :param str polling_token:
        :param str output_folder_name:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id', 'polling_token', 'output_folder_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_status_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `query_status_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []
        if 'polling_token' in params:
            query_params.append(('pollingToken', params['polling_token']))  # noqa: E501
        if 'output_folder_name' in params:
            query_params.append(('outputFolderName', params['output_folder_name']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Query/{runId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
