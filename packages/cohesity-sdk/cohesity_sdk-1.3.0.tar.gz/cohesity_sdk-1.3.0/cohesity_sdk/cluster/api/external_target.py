"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.cluster.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.cluster.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.cluster.model.archival_media_info import ArchivalMediaInfo
from cohesity_sdk.cluster.model.error import Error
from cohesity_sdk.cluster.model.external_target import ExternalTarget
from cohesity_sdk.cluster.model.external_targets import ExternalTargets
from cohesity_sdk.cluster.model.global_bandwidth_settings import GlobalBandwidthSettings


class ExternalTargetApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_external_target(
            self,
            body,
            **kwargs
        ):
            """Create a External Target.  # noqa: E501

            Create a External Target.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_external_target(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (ExternalTarget): Specifies the parameters to create a External Target.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExternalTarget
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_external_target = _Endpoint(
            settings={
                'response_type': (ExternalTarget,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets',
                'operation_id': 'create_external_target',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (ExternalTarget,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_external_target
        )

        def __delete_external_target(
            self,
            id,
            **kwargs
        ):
            """Delete a External Target.  # noqa: E501

            Returns Success if the External Target is deleted.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_external_target(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the External Target.

            Keyword Args:
                force_delete (bool): Specifies whether to force delete the External target.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_external_target = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/{id}',
                'operation_id': 'delete_external_target',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'force_delete',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'force_delete':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'force_delete': 'forceDelete',
                },
                'location_map': {
                    'id': 'path',
                    'force_delete': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_external_target
        )

        def __get_external_target_by_id(
            self,
            id,
            **kwargs
        ):
            """List details about single External Target.  # noqa: E501

            Returns the External Target corresponding to the specified Group id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_external_target_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the External Target.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExternalTarget
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_external_target_by_id = _Endpoint(
            settings={
                'response_type': (ExternalTarget,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/{id}',
                'operation_id': 'get_external_target_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_external_target_by_id
        )

        def __get_external_target_encryption_key_info(
            self,
            id,
            **kwargs
        ):
            """Get the encryption key info for an external target  # noqa: E501

            Get the encryption key info for an external target  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_external_target_encryption_key_info(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies the id of the External Target.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_external_target_encryption_key_info = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/{id}/encryption-key',
                'operation_id': 'get_external_target_encryption_key_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_external_target_encryption_key_info
        )

        def __get_external_target_media_info(
            self,
            cluster_id,
            cluster_incarnation_id,
            archival_job_id,
            **kwargs
        ):
            """List archive media information  # noqa: E501

            Returns the media information about the specified archive service uid (such as a QStar tape archive service).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_external_target_media_info(cluster_id, cluster_incarnation_id, archival_job_id, async_req=True)
            >>> result = thread.get()

            Args:
                cluster_id (int): Specifies the id of the Cohesity cluster which archived to a QStart media target.
                cluster_incarnation_id (int): Specifies the incarnation Id of the Cohesity cluster which archived to a QStart media target.
                archival_job_id (int): Specifies the id of the Job that archived to a QStar media Vault.

            Keyword Args:
                restore_task_id (int): Specifies the id of the restore task to optionally filter by.. [optional]
                entity_ids ([int]): Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ArchivalMediaInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['cluster_id'] = \
                cluster_id
            kwargs['cluster_incarnation_id'] = \
                cluster_incarnation_id
            kwargs['archival_job_id'] = \
                archival_job_id
            return self.call_with_http_info(**kwargs)

        self.get_external_target_media_info = _Endpoint(
            settings={
                'response_type': (ArchivalMediaInfo,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/media-info',
                'operation_id': 'get_external_target_media_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'cluster_incarnation_id',
                    'archival_job_id',
                    'restore_task_id',
                    'entity_ids',
                ],
                'required': [
                    'cluster_id',
                    'cluster_incarnation_id',
                    'archival_job_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (int,),
                    'cluster_incarnation_id':
                        (int,),
                    'archival_job_id':
                        (int,),
                    'restore_task_id':
                        (int,),
                    'entity_ids':
                        ([int],),
                },
                'attribute_map': {
                    'cluster_id': 'clusterId',
                    'cluster_incarnation_id': 'clusterIncarnationId',
                    'archival_job_id': 'archivalJobId',
                    'restore_task_id': 'restoreTaskId',
                    'entity_ids': 'entityIds',
                },
                'location_map': {
                    'cluster_id': 'query',
                    'cluster_incarnation_id': 'query',
                    'archival_job_id': 'query',
                    'restore_task_id': 'query',
                    'entity_ids': 'query',
                },
                'collection_format_map': {
                    'entity_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_external_target_media_info
        )

        def __get_external_target_settings(
            self,
            **kwargs
        ):
            """Get the list of External Target Settings.  # noqa: E501

            Get the list of External Target Settings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_external_target_settings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExternalTarget
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_external_target_settings = _Endpoint(
            settings={
                'response_type': (ExternalTarget,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/settings',
                'operation_id': 'get_external_target_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_external_target_settings
        )

        def __get_external_targets(
            self,
            **kwargs
        ):
            """Get the list of External Targets.  # noqa: E501

            Get the list of External Targets.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_external_targets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                ids ([int]): Filter by a list of External Target ids.. [optional]
                global_ids ([str]): Filter by a list of External Target global ids.. [optional]
                names ([str]): Filter by a list of External Target names.. [optional]
                purpose_types ([str]): Filter by a list of External Target purpose types.. [optional]
                storage_types ([str]): Filter by a list of External Target storage types. Nas option in archival_target_storage_type will soon be deprecated. Please use NAS instead.. [optional]
                storage_classes ([str]): Filter by a list of External Target storage classes.. [optional]
                ownership_contexts ([str]): Specifies whether how this external target is being consumed either Local or FortKnox.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExternalTargets
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_external_targets = _Endpoint(
            settings={
                'response_type': (ExternalTargets,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets',
                'operation_id': 'get_external_targets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'global_ids',
                    'names',
                    'purpose_types',
                    'storage_types',
                    'storage_classes',
                    'ownership_contexts',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'purpose_types',
                    'storage_types',
                    'storage_classes',
                    'ownership_contexts',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('purpose_types',): {

                        "ARCHIVAL": "Archival",
                        "TIERING": "Tiering",
                        "RPAAS": "Rpaas"
                    },
                    ('storage_types',): {

                        "AZURE": "Azure",
                        "GOOGLE": "Google",
                        "AWS": "AWS",
                        "ORACLE": "Oracle",
                        "NAS": "Nas",
                        "NAS": "NAS",
                        "QSTARTAPE": "QStarTape",
                        "S3COMPATIBLE": "S3Compatible"
                    },
                    ('storage_classes',): {

                        "AMAZONS3STANDARD": "AmazonS3Standard",
                        "AMAZONS3STANDARDIA": "AmazonS3StandardIA",
                        "AMAZONS3ONEZONEIA": "AmazonS3OneZoneIA",
                        "AMAZONS3INTELLIGENTTIERING": "AmazonS3IntelligentTiering",
                        "AMAZONS3GLACIER": "AmazonS3Glacier",
                        "AMAZONS3GLACIERDEEPARCHIVE": "AmazonS3GlacierDeepArchive",
                        "AMAZONGLACIER": "AmazonGlacier",
                        "AMAZONS3GLACIERIR": "AmazonS3GlacierIR",
                        "AZUREARCHIVEBLOB": "AzureArchiveBlob",
                        "AZURECOOLBLOB": "AzureCoolBlob",
                        "AZUREHOTBLOB": "AzureHotBlob",
                        "GCPSTANDARD": "GCPStandard",
                        "GCPCOLDLINE": "GCPColdline",
                        "GCPNEARLINE": "GCPNearline",
                        "ORACLEOBJECTSTORAGE": "OracleObjectStorage",
                        "ORACLEARCHIVESTORAGE": "OracleArchiveStorage",
                        "S3COMPATIBLEREGULAR": "S3CompatibleRegular",
                        "S3COMPATIBLETAPEBASED": "S3CompatibleTapeBased"
                    },
                    ('ownership_contexts',): {

                        "LOCAL": "Local",
                        "FORTKNOX": "FortKnox"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([int],),
                    'global_ids':
                        ([str],),
                    'names':
                        ([str],),
                    'purpose_types':
                        ([str],),
                    'storage_types':
                        ([str],),
                    'storage_classes':
                        ([str],),
                    'ownership_contexts':
                        ([str],),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'global_ids': 'globalIds',
                    'names': 'names',
                    'purpose_types': 'purposeTypes',
                    'storage_types': 'storageTypes',
                    'storage_classes': 'storageClasses',
                    'ownership_contexts': 'ownershipContexts',
                },
                'location_map': {
                    'ids': 'query',
                    'global_ids': 'query',
                    'names': 'query',
                    'purpose_types': 'query',
                    'storage_types': 'query',
                    'storage_classes': 'query',
                    'ownership_contexts': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'global_ids': 'csv',
                    'names': 'csv',
                    'purpose_types': 'csv',
                    'storage_types': 'csv',
                    'storage_classes': 'csv',
                    'ownership_contexts': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_external_targets
        )

        def __update_external_target(
            self,
            id,
            body,
            **kwargs
        ):
            """Update a External Target.  # noqa: E501

            Update the specified External Target.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_external_target(id, body, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies the id of the External Target.
                body (ExternalTarget): Specifies the parameters to update a External Target.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExternalTarget
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_external_target = _Endpoint(
            settings={
                'response_type': (ExternalTarget,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/{id}',
                'operation_id': 'update_external_target',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'body',
                ],
                'required': [
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'body':
                        (ExternalTarget,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_external_target
        )

        def __update_external_target_settings(
            self,
            body,
            **kwargs
        ):
            """Update External Target Settings  # noqa: E501

            Update External Target Settings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_external_target_settings(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (GlobalBandwidthSettings): Specifies the parameters to update a External Target Settings.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GlobalBandwidthSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_external_target_settings = _Endpoint(
            settings={
                'response_type': (GlobalBandwidthSettings,),
                'auth': [
                    'TokenHeader',
        
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/external-targets/settings',
                'operation_id': 'update_external_target_settings',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (GlobalBandwidthSettings,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_external_target_settings
        )
