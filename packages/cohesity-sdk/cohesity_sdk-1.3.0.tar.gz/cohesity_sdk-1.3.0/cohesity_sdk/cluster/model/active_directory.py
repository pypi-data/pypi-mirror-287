"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.cluster.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from cohesity_sdk.cluster.model.active_directory_all_of import ActiveDirectoryAllOf
    from cohesity_sdk.cluster.model.active_directory_error import ActiveDirectoryError
    from cohesity_sdk.cluster.model.centrify_zones import CentrifyZones
    from cohesity_sdk.cluster.model.common_active_directory_params import CommonActiveDirectoryParams
    from cohesity_sdk.cluster.model.domain_controller import DomainController
    from cohesity_sdk.cluster.model.domain_controllers import DomainControllers
    from cohesity_sdk.cluster.model.machine_account import MachineAccount
    from cohesity_sdk.cluster.model.security_principal import SecurityPrincipal
    from cohesity_sdk.cluster.model.task_logs import TaskLogs
    from cohesity_sdk.cluster.model.tenant import Tenant
    globals()['ActiveDirectoryAllOf'] = ActiveDirectoryAllOf
    globals()['ActiveDirectoryError'] = ActiveDirectoryError
    globals()['CentrifyZones'] = CentrifyZones
    globals()['CommonActiveDirectoryParams'] = CommonActiveDirectoryParams
    globals()['DomainController'] = DomainController
    globals()['DomainControllers'] = DomainControllers
    globals()['MachineAccount'] = MachineAccount
    globals()['SecurityPrincipal'] = SecurityPrincipal
    globals()['TaskLogs'] = TaskLogs
    globals()['Tenant'] = Tenant


class ActiveDirectory(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.

      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.

    """

    allowed_values = {
    }

    validations = {
        ('machine_accounts',): {
            'min_items': 1,
        },

    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'machine_accounts': ([MachineAccount], none_type,),  # noqa: E501
            'connection_id': (int, none_type,),  # noqa: E501
            'domain_controllers_deny_list': ([str, none_type],),  # noqa: E501
            'id': (int, none_type,),  # noqa: E501
            'ldap_provider_id': (int, none_type,),  # noqa: E501
            'nis_provider_domain_name': (str, none_type,),  # noqa: E501
            'organizational_unit_name': (str, none_type,),  # noqa: E501
            'preferred_domain_controllers': ([DomainController], none_type,),  # noqa: E501
            'trusted_domain_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'work_group_name': (str, none_type,),  # noqa: E501
            'centrify_zones': ([CentrifyZones], none_type,),  # noqa: E501
            'domain_controllers': ([DomainControllers], none_type,),  # noqa: E501
            'domain_name': (str, none_type,),  # noqa: E501
            'error': (ActiveDirectoryError,),  # noqa: E501
            'id_mapping_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'permissions': ([Tenant], none_type,),  # noqa: E501
            'security_principals': ([SecurityPrincipal], none_type,),  # noqa: E501
            'task_logs': (TaskLogs,),  # noqa: E501
            'transitive_ad_trust_level_limit': (int, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None



    attribute_map = {
        'machine_accounts': 'machineAccounts',  # noqa: E501
        'connection_id': 'connectionId',  # noqa: E501
        'domain_controllers_deny_list': 'domainControllersDenyList',  # noqa: E501
        'id': 'id',  # noqa: E501
        'ldap_provider_id': 'ldapProviderId',  # noqa: E501
        'nis_provider_domain_name': 'nisProviderDomainName',  # noqa: E501
        'organizational_unit_name': 'organizationalUnitName',  # noqa: E501
        'preferred_domain_controllers': 'preferredDomainControllers',  # noqa: E501
        'trusted_domain_params': 'trustedDomainParams',  # noqa: E501
        'work_group_name': 'workGroupName',  # noqa: E501
        'centrify_zones': 'centrifyZones',  # noqa: E501
        'domain_controllers': 'domainControllers',  # noqa: E501
        'domain_name': 'domainName',  # noqa: E501
        'error': 'error',  # noqa: E501
        'id_mapping_params': 'idMappingParams',  # noqa: E501
        'permissions': 'permissions',  # noqa: E501
        'security_principals': 'securityPrincipals',  # noqa: E501
        'task_logs': 'taskLogs',  # noqa: E501
        'transitive_ad_trust_level_limit': 'transitiveAdTrustLevelLimit',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, machine_accounts, *args, **kwargs):  # noqa: E501
        """ActiveDirectory - a model defined in OpenAPI

        Args:
            machine_accounts ([MachineAccount], none_type): Specifies a list of computer names used to identify the Cohesity Cluster on the Active Directory domain. The first machine account is used as primary machine account and it can not be modified.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)

            connection_id (int, none_type): Specifies the id of the connection.. [optional]  # noqa: E501
            domain_controllers_deny_list ([str, none_type]): Specifies a list of denied domain controllers of this Active Directory Domain.. [optional]  # noqa: E501
            id (int, none_type): Specifies the id of the Active Directory.. [optional]  # noqa: E501
            ldap_provider_id (int, none_type): Specifies the LDAP provider id which is mapped to this Active Directory. [optional]  # noqa: E501
            nis_provider_domain_name (str, none_type): Specifies the name of the NIS Provider which is mapped to this Active Directory.. [optional]  # noqa: E501
            organizational_unit_name (str, none_type): Specifies an optional organizational unit name.. [optional]  # noqa: E501
            preferred_domain_controllers ([DomainController], none_type): Specifies a list of preferred domain controllers of this Active Directory.. [optional]  # noqa: E501
            trusted_domain_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Specifies the params of trusted domain info of an Active Directory.. [optional]  # noqa: E501
            work_group_name (str, none_type): Specifies a work group name.. [optional]  # noqa: E501
            centrify_zones ([CentrifyZones], none_type): Specifies a list of Centrify zones.. [optional]  # noqa: E501
            domain_controllers ([DomainControllers], none_type): A list of domain names with a list of it's domain controllers.. [optional]  # noqa: E501
            domain_name (str, none_type): Specifies the domain name of the Active Directory.. [optional]  # noqa: E501
            error (ActiveDirectoryError): [optional]  # noqa: E501
            id_mapping_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Specifies the params of the user id mapping info of an Active Directory.. [optional]  # noqa: E501
            permissions ([Tenant], none_type): Specifies the list of tenants that have permissions for this Active Directory.. [optional]  # noqa: E501
            security_principals ([SecurityPrincipal], none_type): Specifies a list of security principals.. [optional]  # noqa: E501
            task_logs (TaskLogs): [optional]  # noqa: E501
            transitive_ad_trust_level_limit (int, none_type): Specifies level of transitive Active Directory trust domains to be used.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)


        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'machine_accounts': machine_accounts,
        }
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)


    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              ActiveDirectoryAllOf,
              CommonActiveDirectoryParams,
          ],
          'oneOf': [
          ],
        }

