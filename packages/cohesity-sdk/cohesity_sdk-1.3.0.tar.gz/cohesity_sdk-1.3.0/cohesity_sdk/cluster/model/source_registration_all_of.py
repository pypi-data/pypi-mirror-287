"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.cluster.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from cohesity_sdk.cluster.model.aws_source_registration_params import AwsSourceRegistrationParams
    from cohesity_sdk.cluster.model.azure_source_registration_params import AzureSourceRegistrationParams
    from cohesity_sdk.cluster.model.cassandra_source_registration_params import CassandraSourceRegistrationParams
    from cohesity_sdk.cluster.model.couchbase_source_registration_params import CouchbaseSourceRegistrationParams
    from cohesity_sdk.cluster.model.elastifile_registration_params import ElastifileRegistrationParams
    from cohesity_sdk.cluster.model.entity_external_metadata import EntityExternalMetadata
    from cohesity_sdk.cluster.model.flashblade_registration_params import FlashbladeRegistrationParams
    from cohesity_sdk.cluster.model.generic_nas_registration_params import GenericNasRegistrationParams
    from cohesity_sdk.cluster.model.gpfs_registration_params import GpfsRegistrationParams
    from cohesity_sdk.cluster.model.hbase_source_registration_params import HbaseSourceRegistrationParams
    from cohesity_sdk.cluster.model.hdfs_source_registration_params import HdfsSourceRegistrationParams
    from cohesity_sdk.cluster.model.hive_source_registration_params import HiveSourceRegistrationParams
    from cohesity_sdk.cluster.model.hyper_v_source_registration_params import HyperVSourceRegistrationParams
    from cohesity_sdk.cluster.model.isilon_registration_params import IsilonRegistrationParams
    from cohesity_sdk.cluster.model.mongo_db_source_registration_params import MongoDBSourceRegistrationParams
    from cohesity_sdk.cluster.model.netapp_registration_params import NetappRegistrationParams
    from cohesity_sdk.cluster.model.office365_source_registration_params import Office365SourceRegistrationParams
    from cohesity_sdk.cluster.model.physical_source_registration_params import PhysicalSourceRegistrationParams
    from cohesity_sdk.cluster.model.sfdc_source_registration_params import SfdcSourceRegistrationParams
    from cohesity_sdk.cluster.model.uda_source_registration_params import UdaSourceRegistrationParams
    from cohesity_sdk.cluster.model.vmware_source_registration_params import VmwareSourceRegistrationParams
    globals()['AwsSourceRegistrationParams'] = AwsSourceRegistrationParams
    globals()['AzureSourceRegistrationParams'] = AzureSourceRegistrationParams
    globals()['CassandraSourceRegistrationParams'] = CassandraSourceRegistrationParams
    globals()['CouchbaseSourceRegistrationParams'] = CouchbaseSourceRegistrationParams
    globals()['ElastifileRegistrationParams'] = ElastifileRegistrationParams
    globals()['EntityExternalMetadata'] = EntityExternalMetadata
    globals()['FlashbladeRegistrationParams'] = FlashbladeRegistrationParams
    globals()['GenericNasRegistrationParams'] = GenericNasRegistrationParams
    globals()['GpfsRegistrationParams'] = GpfsRegistrationParams
    globals()['HbaseSourceRegistrationParams'] = HbaseSourceRegistrationParams
    globals()['HdfsSourceRegistrationParams'] = HdfsSourceRegistrationParams
    globals()['HiveSourceRegistrationParams'] = HiveSourceRegistrationParams
    globals()['HyperVSourceRegistrationParams'] = HyperVSourceRegistrationParams
    globals()['IsilonRegistrationParams'] = IsilonRegistrationParams
    globals()['MongoDBSourceRegistrationParams'] = MongoDBSourceRegistrationParams
    globals()['NetappRegistrationParams'] = NetappRegistrationParams
    globals()['Office365SourceRegistrationParams'] = Office365SourceRegistrationParams
    globals()['PhysicalSourceRegistrationParams'] = PhysicalSourceRegistrationParams
    globals()['SfdcSourceRegistrationParams'] = SfdcSourceRegistrationParams
    globals()['UdaSourceRegistrationParams'] = UdaSourceRegistrationParams
    globals()['VmwareSourceRegistrationParams'] = VmwareSourceRegistrationParams


class SourceRegistrationAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.

      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.

    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'aws_params': (AwsSourceRegistrationParams,),  # noqa: E501
            'azure_params': (AzureSourceRegistrationParams,),  # noqa: E501
            'cassandra_params': (CassandraSourceRegistrationParams,),  # noqa: E501
            'couchbase_params': (CouchbaseSourceRegistrationParams,),  # noqa: E501
            'elastifile_params': (ElastifileRegistrationParams,),  # noqa: E501
            'external_metadata': (EntityExternalMetadata,),  # noqa: E501
            'flashblade_params': (FlashbladeRegistrationParams,),  # noqa: E501
            'generic_nas_params': (GenericNasRegistrationParams,),  # noqa: E501
            'gpfs_params': (GpfsRegistrationParams,),  # noqa: E501
            'hbase_params': (HbaseSourceRegistrationParams,),  # noqa: E501
            'hdfs_params': (HdfsSourceRegistrationParams,),  # noqa: E501
            'hive_params': (HiveSourceRegistrationParams,),  # noqa: E501
            'hyperv_params': (HyperVSourceRegistrationParams,),  # noqa: E501
            'isilon_params': (IsilonRegistrationParams,),  # noqa: E501
            'mongodb_params': (MongoDBSourceRegistrationParams,),  # noqa: E501
            'netapp_params': (NetappRegistrationParams,),  # noqa: E501
            'office365_params': (Office365SourceRegistrationParams,),  # noqa: E501
            'physical_params': (PhysicalSourceRegistrationParams,),  # noqa: E501
            'sfdc_params': (SfdcSourceRegistrationParams,),  # noqa: E501
            'uda_params': (UdaSourceRegistrationParams,),  # noqa: E501
            'vmware_params': (VmwareSourceRegistrationParams,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None



    attribute_map = {
        'aws_params': 'awsParams',  # noqa: E501
        'azure_params': 'azureParams',  # noqa: E501
        'cassandra_params': 'cassandraParams',  # noqa: E501
        'couchbase_params': 'couchbaseParams',  # noqa: E501
        'elastifile_params': 'elastifileParams',  # noqa: E501
        'external_metadata': 'externalMetadata',  # noqa: E501
        'flashblade_params': 'flashbladeParams',  # noqa: E501
        'generic_nas_params': 'genericNasParams',  # noqa: E501
        'gpfs_params': 'gpfsParams',  # noqa: E501
        'hbase_params': 'hbaseParams',  # noqa: E501
        'hdfs_params': 'hdfsParams',  # noqa: E501
        'hive_params': 'hiveParams',  # noqa: E501
        'hyperv_params': 'hypervParams',  # noqa: E501
        'isilon_params': 'isilonParams',  # noqa: E501
        'mongodb_params': 'mongodbParams',  # noqa: E501
        'netapp_params': 'netappParams',  # noqa: E501
        'office365_params': 'office365Params',  # noqa: E501
        'physical_params': 'physicalParams',  # noqa: E501
        'sfdc_params': 'sfdcParams',  # noqa: E501
        'uda_params': 'udaParams',  # noqa: E501
        'vmware_params': 'vmwareParams',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SourceRegistrationAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)

            aws_params (AwsSourceRegistrationParams): [optional]  # noqa: E501
            azure_params (AzureSourceRegistrationParams): [optional]  # noqa: E501
            cassandra_params (CassandraSourceRegistrationParams): [optional]  # noqa: E501
            couchbase_params (CouchbaseSourceRegistrationParams): [optional]  # noqa: E501
            elastifile_params (ElastifileRegistrationParams): [optional]  # noqa: E501
            external_metadata (EntityExternalMetadata): [optional]  # noqa: E501
            flashblade_params (FlashbladeRegistrationParams): [optional]  # noqa: E501
            generic_nas_params (GenericNasRegistrationParams): [optional]  # noqa: E501
            gpfs_params (GpfsRegistrationParams): [optional]  # noqa: E501
            hbase_params (HbaseSourceRegistrationParams): [optional]  # noqa: E501
            hdfs_params (HdfsSourceRegistrationParams): [optional]  # noqa: E501
            hive_params (HiveSourceRegistrationParams): [optional]  # noqa: E501
            hyperv_params (HyperVSourceRegistrationParams): [optional]  # noqa: E501
            isilon_params (IsilonRegistrationParams): [optional]  # noqa: E501
            mongodb_params (MongoDBSourceRegistrationParams): [optional]  # noqa: E501
            netapp_params (NetappRegistrationParams): [optional]  # noqa: E501
            office365_params (Office365SourceRegistrationParams): [optional]  # noqa: E501
            physical_params (PhysicalSourceRegistrationParams): [optional]  # noqa: E501
            sfdc_params (SfdcSourceRegistrationParams): [optional]  # noqa: E501
            uda_params (UdaSourceRegistrationParams): [optional]  # noqa: E501
            vmware_params (VmwareSourceRegistrationParams): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)


        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)


