# coding: utf-8

"""
    BespokeLabs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Contact: company@bespokelabs.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from bespokelabs.models.example import Example
from typing import Optional, Set
from typing_extensions import Self

class QAC(BaseModel):
    """
    QAC
    """ # noqa: E501
    scores: Optional[List[Any]] = None
    feedbacks: Optional[List[Any]] = None
    question: StrictStr
    answer: StrictStr
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    context: Optional[List[StrictStr]] = None
    self_instruct_round: Optional[StrictInt] = 0
    improved_example: Optional[Example] = None
    __properties: ClassVar[List[str]] = ["scores", "feedbacks", "question", "answer", "rating", "context", "self_instruct_round", "improved_example"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QAC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of improved_example
        if self.improved_example:
            _dict['improved_example'] = self.improved_example.to_dict()
        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        # set to None if improved_example (nullable) is None
        # and model_fields_set contains the field
        if self.improved_example is None and "improved_example" in self.model_fields_set:
            _dict['improved_example'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QAC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scores": obj.get("scores"),
            "feedbacks": obj.get("feedbacks"),
            "question": obj.get("question"),
            "answer": obj.get("answer"),
            "rating": obj.get("rating"),
            "context": obj.get("context"),
            "self_instruct_round": obj.get("self_instruct_round") if obj.get("self_instruct_round") is not None else 0,
            "improved_example": Example.from_dict(obj["improved_example"]) if obj.get("improved_example") is not None else None
        })
        return _obj


