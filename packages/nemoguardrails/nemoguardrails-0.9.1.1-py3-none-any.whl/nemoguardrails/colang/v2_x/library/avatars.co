################################################################
# COLANG 2 STANDARD LIBRARY
# VERSION 0.3.0
#---------------------------------------------------------------
# CHANGELOG
#-------
# 0.3.0 (2/14/2024)
#  - Refactored standard libraries
#-------
################################################################

# meta: exclude from llm
import core
import llm
import timing

# -----------------------------------
# User Event Flows
# -----------------------------------

@meta(user_action='selected choice "{$choice}"')
flow user selected choice $choice_id -> $choice
  """Wait for a UI selection."""
  match VisualChoiceSceneAction.ChoiceUpdated(current_choice=[$choice_id]) as $event
  $choice = $event.current_choice

@meta(user_action=True)
flow user has selected choice $choice_id
  """Wait for a UI selection to have happened (considering also choices that happened right before)."""
  activate tracking visual choice selection state
  global $choice_selection_state
  if $choice_selection_state == None or $choice_selection_state != $choice_id
    match VisualChoiceSceneAction.ChoiceUpdated(current_choice=[$choice_id]) as $event

@meta(user_action=True)
flow user typing $text -> $inputs
  """Wait for user entering keystrokes in UI text field."""
  match VisualFormSceneAction.InputUpdated(interim_inputs=[{"value": regex(".*({$text})((\s*\w+\s*){0,2})\W*$")}]) as $event
  $inputs = $event.interim_inputs

@meta(user_action=True)
flow user gestured $gesture -> $final_gesture
  """Wait for user to make a gesture."""
  match GestureUserAction.Finished(gesture=$gesture) as $event
  $final_gesture = $event.gesture

@meta(user_action=True)
flow user became present -> $user_id
  """Wait for user to be detected as present (e.g. camera ROI)."""
  match PresenceUserAction.Finished() as $event
  $user_id = $event.user_id

@meta(user_intent=True)
flow user interrupted bot talking $sentence_length=15
  """Wait for when the user talked while bot is speaking."""
  activate tracking bot talking state
  global $bot_talking_state
  while True
    if not $bot_talking_state
      bot started saying something
    while True
      when user saying something as $user_saying_ref
        $transcript = $user_saying_ref.transcript
      or when user said something as $user_said_ref
        $transcript = $user_said_ref.transcript
      or when bot said something
        break

      if len($transcript) > $sentence_length
        log 'bot interrupted by user with: "{$transcript}"'
        return

# ----------------------------------
# Bot Action Flows
# -----------------------------------

@meta(bot_action=True)
flow bot gesture $gesture
  """Trigger a specific bot gesture."""
  await GestureBotAction(gesture=$gesture) as $action

@meta(bot_action=True)
flow bot gesture with delay $gesture $delay
  """Trigger a specific bot gesture delayed."""
  wait $delay
  bot gesture $gesture

@meta(bot_action=True)
flow bot posture $posture
  """Trigger a specific bot posture."""
  await PostureBotAction(posture=$posture) as $action

@meta(bot_action=True)
flow scene show choice $prompt
  """Show a 2D UI with some options to select from"""
  await VisualChoiceSceneAction(prompt=$prompt,choice_type="selection", allow_multiple_choices=False) as $action

@meta(bot_action=True)
flow scene show textual information $title $text $header_image
  """Show a 2D UI with detailed information."""
  await VisualInformationSceneAction(title=$title, support_prompts=[], content=[{"image":$header_image},{"text":$text}]) as $action

@meta(bot_action=True)
flow scene show short information $info
  """Show a 2D UI with a short information."""
  await VisualInformationSceneAction(title=$info, support_prompts=[], content=[]) as $action

@meta(bot_action=True)
flow scene show form $prompt
  """Show a 2D UI with some input fields to be filled in."""
  await VisualInformationSceneAction(prompt=$prompt) as $action

# ----------------------------------
# Bot Event Flows
# ----------------------------------

flow bot started gesture $gesture
  """Wait for the bot to start with the given gesture."""
  match FlowStarted(flow_id="bot gesture", gesture=$gesture) as $event

flow bot started a gesture -> $gesture
  """Wait for the bot to start with any gesture."""
  match FlowStarted(flow_id="bot gesture") as $event
  $gesture = $event.gesture

flow bot started posture $posture
  """Wait for the bot to start with the given posture."""
  match FlowStarted(flow_id="bot posture", posture=$posture) as $event

flow bot started a posture -> $posture
  """Wait for the bot to start with any posture."""
  match FlowStarted(flow_id="bot posture") as $event
  $posture = $event.posture

flow bot started an action -> $action
  """Wait for the bot to start with any action."""
  match (bot started saying something).Finished() as $action
    or (bot started a gesture).Finished() as $action
    or (bot started a posture).Finished() as $action

# ----------------------------------
# State Tracking Flows
# -----------------------------------

@loop("state_tracking")
flow tracking visual choice selection state
  global $choice_selection_state
  when VisualChoiceSceneAction.Started()
    $choice_selection_state = None
  or when VisualChoiceSceneAction.ChoiceUpdated() as $event
    if len($event.current_choice) > 0
      $choice_selection_state = $event.current_choice[0]
    else
      $choice_selection_state = None
  or when VisualChoiceSceneAction.Finished()
    $choice_selection_state = None

# ----------------------------------
# Utility flows
# ----------------------------------

flow finish all bot actions
  """Stops all the current bot actions."""
  send FinishFlow(flow_id="_bot_say")
  send FinishFlow(flow_id="bot gesture")
  send FinishFlow(flow_id="bot posture")

flow finish all scene actions
  """Stops all the current scene actions."""
  send FinishFlow(flow_id="scene show choice")
  send FinishFlow(flow_id="scene show textual information")
  send FinishFlow(flow_id="scene show short information")
  send FinishFlow(flow_id="scene show form")

@loop("bot_interruption")
flow handling bot talking interruption $mode="inform"
  """Handling the bot talking interruption reaction."""
  user interrupted bot talking
  if $mode == "interrupt"
    finish all bot actions
  elif $mode == "inform"
    start VisualInformationSceneAction(title="Please wait with talking!", support_prompts=["You should only talk after the avatar."], content=[])
    wait 3.0
  elif $mode == "ignore"
    log "bot ignored user interruption"


# --------------------------------------
# Posture Management Flows
# --------------------------------------

@loop("managing_bot_postures")
flow managing bot postures
  """Activates all the posture management."""
  activate tracking bot talking state
  activate managing listening posture
  activate managing thinking posture
  activate managing talking posture
  activate managing idle posture
  start bot posture "attentive"

@loop("managing_listening_posture")
flow managing listening posture
  """Start and stop listening posture."""
  user started saying something
  start bot posture "listening"
  match UtteranceUserAction.Finished()

@loop("managing_talking_posture")
flow managing talking posture
  """Start and stop talking posture."""
  bot started saying something
  start bot posture "talking"
  bot said something

@loop("managing_thinking_posture")
flow managing thinking posture
  """Start and stop thinking posture."""
  activate tracking bot talking state
  global $bot_talking_state

  match UtteranceUserAction.Finished()
  if not $bot_talking_state
    start bot posture "thinking"
    bot started saying something

@loop("managing_idle_posture")
flow managing idle posture
  """Start and stop idle posture."""
  match (polling llm request response).Started()
  start bot posture "Thinking, idle" as $posture
  match (polling llm request response).Finished()
