# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pylode',
 'pylode.profiles',
 'pylode.profiles.supermodel',
 'pylode.profiles.supermodel.component',
 'pylode.profiles.supermodel.query']

package_data = \
{'': ['*'], 'pylode': ['rdf/*', 'static/*']}

install_requires = \
['Markdown>=3.3.7,<4.0.0',
 'dominate>=2.6.0,<3.0.0',
 'html5lib>=1.1,<2.0',
 'httpx>=0.25.0,<1.0.0',
 'rdflib>=7.0.0,<8.0.0']

entry_points = \
{'console_scripts': ['pylode = pylode.cli:main']}

setup_kwargs = {
    'name': 'pylode',
    'version': '3.2.0',
    'description': 'An OWL ontology documentation tool using Python, based on LODE.',
    'long_description': '.. image:: https://rawcdn.githack.com/RDFLib/pyLODE/master/img/pyLODE-250.png\n.. image:: https://badge.fury.io/py/pyLODE.svg\n    :target: https://badge.fury.io/py/pyLODE\n\npyLODE\n******\n\nAn OWL ontology documentation tool using Python, based on LODE.\n\nIn addition to making web page, human-readable forms of ontologies, pyLODE encourages ontology annotation *best\npractice* by only producing good results for well documented inputs! pyLODE defines what it considers \'well documented\'\nin sections below, e.g. `What pyLODE understands`_.\n\n**New mode**: In v3.1.0, pyLODE now has a new mode called ``supermodel``, in addition to the existing ``ontpub`` mode. This new mode allows for documenting **profiles and modules** of multi-part models. See `supermodel.md <supermodel.md>`_ for more information.\n\n----\n\n**A note on the v 3.x change**\n\nThis is pyLODE version 3.0.1 and it\'s vastly different from pyLODE 2.x. It doesn\'t yet handle all the various "profiles" that pyLODE 2.13.2 does, such as SKOS \'vocabularies\' & Profiles Vocabulary \'profiles\', it only handles OWL \'ontologies\', nor all the special data types, such as JSON literals, BUT, it generates HTML in a much more straightforward manner and the code is both more efficient and much more maintainable, which is why it\'s been made.\n\nv 3.x will eventually catch up to all of v 2.13.2\'s features.\n\nTo access v 2.13.2 of pyLODE, either `download it from PyPI <https://pypi.org/project/pylode/2.13.2/>`_ , `check it out from GitHub <https://github.com/RDFLib/pyLODE/releases/tag/2.13.2>`_ or access it via the `online service <http://pylode.surroundaustralia.com/>`_ .\n\n----\n\nContents\n========\n\n1. `Quick Intro`_\n2. Use_\n3. `What pyLODE understands`_\n4. Examples_\n5. Installation_\n6. Testing_\n7. `Differences from LODE`_\n8. `Releases`_\n9. License_\n10. Citation_\n11. Collaboration_\n12. Contacts_\n\nQuick Intro\n===========\n\nThe Live OWL Documentation Environment tool\n(`LODE <https://github.com/essepuntato/LODE>`__) is a well-known (in\nSemantic Web circles) Java & XSLT-based tool used to generate\nhuman-readable HTML documents for OWL and RDF ontologies. That tool is\nnow a bit dated (old-style HTML, use of older technologies like XSLT)\nand its (`online version <https://essepuntato.it/lode>`__) is not always\nonline.\n\nThis tool is a complete re-implementation of LODE\'s functionality using\nPython and Python\'s RDF manipulation module,\n`rdflib <https://pypi.org/project/rdflib/>`__. An ontology to be\ndocumented is parsed and inspected using rdflib and HTML is generated\ndirectly, using Python\'s `dominate <https://pypi.org/project/dominate/>`__\npackage.\n\nUse\n===\n\nThe tool can be used in multiple ways:\n\n- BASH command line script\n    - pyLODE.sh in bin/\n- Windows EXE\n    - pyLODE.exe in bin/\n- Mac executable\n    - pyLODE in bin/\n- Python Script\n    - cli.py or module\n- as-a-service locally\n    - via the popular `Falcon framework <https://falconframework.org/>`__.\n    - see server.py in the main folder\n- as-a-service online\n    - hosted at https://pylode.surroundaustralia.com\n\nCommand line arguments\n----------------------\n\nThe BASH, Windows EXE and Python Script methods all use the same command line\narguments:\n\n.. code-block:: text\n\n    usage: cli.py [-h] [-v] [-o OUTPUTFILE] [-c {true,false}] input\n\n    positional arguments:\n        input                 Input file location or URL\n\n    optional arguments:\n        -h, --help          show this help message and exit\n        -v, --version       show program\'s version number and exit\n        -o OUTPUTFILE,\n        --outputfile OUTPUTFILE\n                            A name you wish to assign to the output file. Will be\n                            postfixed with .html if not already added. If no\n                            output file is given, output will be printed to screen\n        -c {true,false},\n        --css {true,false}\n                            Whether (true) or not (false) to include CSS within an\n                            output HTML file.\n\nBasic Use\n^^^^^^^^^\n\n* as a Python script\n* executed in this directory\n\n::\n\n    python pylode examples/ontpub/minimal.ttl -o minimal.html\n\nThis will produce the file ``minimal.html`` in this directory which should\nmatch exactly the file ``examples/minimal.html``.\n\n* as a docker container\n\nbuild the docker image:\n\n.. code-block:: bash\n\n    docker build -t pylode:latest .\n\ncopy the example directory, mount it to the container and run cli.py in the container:\n\n.. code-block:: bash\n\n    docker  run  --mount \'type=bind,src=<ttl_directory>,target=/app/pylode/data\' pylode:latest  python3.10 pylode/cli.py data/<ttl_file> -o data/<html_file>\n\nNote: ``<ttl_directory>`` must be absolute\n\nModule Use\n^^^^^^^^^^\n\nfor OWL:\n\n.. code-block:: python\n\n    from pylode.profiles.ontpub import OntPub\n\n    # initialise\n    od = OntPub(ontology="some-ontology-file.ttl")\n\n    # produce HTML\n    html = od.make_html()\n\n    # or save HTML to a file\n    od.make_html(destination="some-resulting-html-file.html")\n\nfor SKOS:\n\n.. code-block:: python\n\n    from pylode.profiles.vocpub import VocPub\n\n    # initialise\n    od = VocPub(ontology="some-ontology-file.ttl")\n\n    # produce HTML\n    html = od.make_html()\n\n    # or save HTML to a file\n    od.make_html(destination="some-resulting-html-file.html")\n\nThis will read from ``some-ontology-file.ttl`` to produce the file ``some-resulting-html-file.html`` in this directory.\n\nExamples\n========\n\nThe `examples/ directory <https://github.com/RDFLib/pyLODE/tree/master/examples>`_\ncontains multiple pairs of RDF & HTML files generated from them using this\nversion of pyLODE.\n\nYou can also see rendered versions of these example files online too:\n\n* `minimal.html <https://rdflib.dev/pyLODE/examples/ontpub/minimal.html>`_\n* `agift.html <https://rdflib.dev/pyLODE/examples/ontpub/agrif.html>`_\n* `alternates.html <https://rdflib.dev/pyLODE/examples/ontpub/alternates.html>`_\n* `asgs.html <https://rdflib.dev/pyLODE/examples/ontpub/asgs.html>`_\n\nWhat pyLODE understands\n=======================\n\npyLODE knows about definitional ontologies (``owl:Ontology``) and the major\nelements usually found in them, such as classes (``owl:Class`` or ``rdf:Class``)\nand properties (``rdf:Property`` & ``owl:ObjectProperty`` etc.).\n\nTo see what properties for ontology, class and RDF property documentation\npyLODE currently supports, just look in the ``rdf_elements.py`` file. All\nelements\' properties supported are given in property lists there.\n\npyLODES won\'t just translate everything that you can describe in RDF into\nHTML! This is a conscious design choice to ensure that a certain conventional\nstyle of documented ontology is produced. However, support for new\nproperties and ontology patterns can be made - just create an Issue on\n`this project\'s Issue tracker <https://github.com/RDFLib/pyLODE/issues>`__.\n\nWhile it *does* know about instance data, such as Named Individuals, it\'s\nnot really designed to document large ontologies containing class instances.\n\nNotes on Agents\n---------------\n\npyLODE can understand both simple and complex Agent objects. You can use\nsimple string properties like ``dc:contributor "Nicholas J. Car"`` too if\nyou really must but better would be to take advantage of real Linked Data\nrepresentation, e.g. complex Agent objects with web addresses, emails,\naffiliations, ORCIDs and so on, e.g.:\n\n.. code-block:: turtle\n\n    <ontology_x>\n        dct:creator [\n            sdo:name "Nicholas J. Car" ;\n            sdo:identifier <http://orcid.org/0000-0002-8742-7730> ;\n            sdo:affiliation [\n                sdo:name "SURROUND Australia Pty Ldt." ;\n                sdo:url "https://surroundaustralia.com"^^xsd:anyURI ;\n            ] ;\n        ] ;\n    .\n\nSee all the properties in ``rdf_elements.py:AGENT_PROPS`` for a list of\nall the Agent properties pyLODE can handle.\n\nInstallation\n============\n\npyLODE is `on PyPI <https://pypi.org/project/pyLODE/>`_, so you can install\nit using `pip <https://pypi.org/project/pip/>`_ as normal:\n\n::\n\n    pip install pylode\n\nTesting\n=======\n\nIt\'s best to disable warnings to hide pointless warnings from the RDFLib library.\n\n::\n\n    python -m pytest tests --disable-warnings\n\nDifferences from LODE\n=====================\n\n-  command line access\n\n   -  you can use this on your own desktop so you don\'t need me to\n      maintain a live service for use\n\n-  use of modern simple HTML\n\n   - no JavaScript: pyLODE generates static HTML pages\n\n-  catering for a wider range of ontology options such as:\n\n   -  schema.org ``domainIncludes`` & ``rangeIncludes`` for properties\n\n-  better Agent representation\n\n   - see the `Notes on Agents`_ section above\n\n-  smarter CURIES\n\n   -  pyLODE caches and looks up well-known prefixes to make more/better\n      CURIES\n   -  it tries to be smart with CURIE presentation by CURIE-ising all\n      URIs it finds, rather than printing them\n\n-  reference ontologies property labels\n\n   - pyLODE caches ~ 10 well-known ontologies (RDFS, SKOS etc), properties from which people often use for their ontology documentation. Where these properties are used, the background ontology\'s labels are use\n\n-  **active development**\n\n   -  pyLODE has been under active development since mid-2019 and is\n      still very much actively developed - it\'s not just staying still\n   -  it will be improved in foreseeable to cater for more and more things\n   -  recent ontology documentation initiatives such as the `MOD\n      Ontology <https://github.com/FAIR-IMPACT/MOD>`__ will be\n      handled, if requested\n\n\nReleases\n========\n\npyLODE is under continual and constant development. The current developers have a roadmap for enhancements in mind,\nwhich is given here, however, since this is an open source project, new developers may join the pyLODE dev community\nand change/add development priorities.\n\nCurrent Release\n---------------\n\nThe current release, as of July, 2024, is **3.2.0**.\n\nRelease Schedule\n----------------\n\n.. csv-table:: **pyLODE Release Schedule**\n   :header: "Version", "Date", "Description"\n   :widths: 15, 10, 30\n\n   3.2.0, 27 July 2024, "dependency updates and merged multiple small PRs"\n   3.1.4, 6 April 2024, "Fix load_ontology function\'s detection of data input"\n   3.1.3, 18 March 2024, "Relax rdflib version constraint"\n   3.1.2, 18 March 2024, "Relax httpx version constraint"\n   3.1.1, 19 February 2024, "Fix release"\n   3.1.0, 19 February 2024, "Add supermodel mode - supports documenting profiles and modules"\n   3.0.5, 27 April 2023, "Minor patching"\n   3.0.4, 24 May 2022, "Use of Poetry"\n   3.0.2, 24 May 2022, "Support for preformatted skos:example literals"\n   3.0.1, 6 Jan 2022, "Direct HTML generation using dominate; easier to maintain and extend"\n   2.13.2, 21 December 2021, "Updated RDFlib to 6.1.1, improved test to properly use pytest"\n   2.10.0, 24 May 2021, "Update Windows EXE build process, simplified versioning"\n   2.9.1, 28 Apr 2021, "Support for ASCIIDOC format (OntDoc profile only)"\n   2.8.11, 28 Apr 2021, "Further changes for PyPI only"\n   2.8.10, 27 Apr 2021, "Further changes for PyPI only"\n   2.8.9, 27 Apr 2021, "PyPI enhancements only"\n   2.8.8, 27 Apr 2021, "Several small bugs fixed, auto-generation of version no. from Git tag"\n   2.8.6, 23 Feb 2021, "Fixing char encoding issues, updated examples, new test files style - per issue"\n   2.8.5, 5 Jan 2021, "Small enhancements to the Falcon server deployment option"\n   2.8.3, 3 July 2020, "Packaging bugfixes only"\n   2.7, 1 July 2020, "Much refactoring for new profile creation ease"\n   2.6, June 2020, "Supports PROF profiles as well as taxonomies & ontologies"\n   2.4, 27 May 2020, "Small improvements over 2.0"\n   2.0, 18 Apr 2020, "Includes multiple profiles - OWP & vocpub"\n   1.0, 15 Dec 2019, "Initial working release"\n\nLicense\n=======\n\nThis code is licensed using the BSD 3-Clause licence. See the `LICENSE\nfile <LICENSE>`_ for the deed. Note *Citation* below though for\nattribution.\n\nCitation\n========\n\nIf you use pyLODE, please leave the pyLODE logo with a hyperlink back\nhere in the top left of published HTML pages.\n\nCollaboration\n=============\n\nThe maintainers welcome any collaboration.\n\nIf you have suggestions, please email the contacts below or leave Issues\nin this repository\'s `Issue tracker <https://github.com/rdflib/pyLODE/issues>`_.\n\nBut the very best thing you could do is create a Pull Request for us to\naction!\n\nContacts\n========\n\n| *Author*:\n| **Nicholas Car**\n| *Data Architect*\n| `Kurrawong AI <https://kurrawong.ai>`_\n| nick@kurrawong.ai\n',
    'author': 'Nicholas Car',
    'author_email': 'nick@kurrawong.net',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
