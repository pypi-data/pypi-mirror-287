# coding: utf-8

"""
    ioTium Orchestrator REST API

    The ioTium Orchestrator REST API allows you to interact with the Orchestrator programmatically. Use the REST APIs to script your interactions with, integrate with, or build your applications on top of ioTium Orchestrator.  # noqa: E501

    OpenAPI spec version: 21.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

class ServicePortsVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'port': 'int',
        'node_port': 'int'
    }

    attribute_map = {
        'protocol': 'protocol',
        'port': 'port',
        'node_port': 'node_port'
    }

    def __init__(self, protocol=None, port=None, node_port=None):  # noqa: E501
        """ServicePortsVO - a model defined in Swagger"""  # noqa: E501

        self._protocol = None
        self._port = None
        self._node_port = None
        self.discriminator = None

        self.protocol = protocol
        self.port = port
        self.node_port = node_port

    @property
    def protocol(self):
        """Gets the protocol of this ServicePortsVO.  # noqa: E501

        Protocol, defaults to ANY  # noqa: E501

        :return: The protocol of this ServicePortsVO.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ServicePortsVO.

        Protocol, defaults to ANY  # noqa: E501

        :param protocol: The protocol of this ServicePortsVO.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if (protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this ServicePortsVO.  # noqa: E501

        Listening port of the serivce  # noqa: E501

        :return: The port of this ServicePortsVO.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServicePortsVO.

        Listening port of the serivce  # noqa: E501

        :param port: The port of this ServicePortsVO.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501
        if (port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (port is not None and port < 1):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def node_port(self):
        """Gets the node_port of this ServicePortsVO.  # noqa: E501

        Port value that will expose the service  # noqa: E501

        :return: The node_port of this ServicePortsVO.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this ServicePortsVO.

        Port value that will expose the service  # noqa: E501

        :param node_port: The node_port of this ServicePortsVO.  # noqa: E501
        :type: int
        """
        if node_port is None:
            raise ValueError("Invalid value for `node_port`, must not be `None`")  # noqa: E501
        if (node_port is not None and node_port > 32767):  # noqa: E501
            raise ValueError("Invalid value for `node_port`, must be a value less than or equal to `32767`")  # noqa: E501
        if (node_port is not None and node_port < 1024):  # noqa: E501
            raise ValueError("Invalid value for `node_port`, must be a value greater than or equal to `30000`")  # noqa: E501

        self._node_port = node_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePortsVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePortsVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicePortsVO):
            return True

        return self.to_dict() != other.to_dict()
