# Generated by Django 5.0.7 on 2024-07-27 19:10

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MetaInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "view_name",
                    models.CharField(
                        db_comment="The view or route name associated with this meta information.",
                        help_text="The name of the view or page this meta information applies to.",
                        max_length=255,
                        verbose_name="View Name",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_comment="SEO title of the page.",
                        help_text="The title of the page for SEO purposes.",
                        max_length=255,
                        verbose_name="Title",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        db_comment="SEO description of the page, used in search engine listings.",
                        help_text="A brief description of the page content for SEO purposes. Ideally 155 to 160 characters.",
                        max_length=160,
                        verbose_name="Description",
                    ),
                ),
                (
                    "keywords",
                    models.TextField(
                        db_comment="List of SEO keywords associated with the page.",
                        help_text="A list of keywords relevant to the page content, used for SEO purposes.",
                        verbose_name="SEO Keywords",
                    ),
                ),
                (
                    "json_ld",
                    models.TextField(
                        blank=True,
                        db_comment="JSON-LD structured data for enhancing search engine listings with rich snippets.",
                        help_text="Structured JSON-LD data for rich snippets. Enter valid JSON.",
                        null=True,
                    ),
                ),
                (
                    "index_page",
                    models.BooleanField(
                        db_comment="Flag indicating if the page should be indexed by search engines.",
                        default=True,
                        help_text="Indicates whether search engines should index this page.",
                    ),
                ),
                (
                    "follow_page_links",
                    models.BooleanField(
                        db_comment="Controls whether search engine crawlers are advised to follow links found on this page.",
                        default=True,
                        help_text="Determines if search engine crawlers should follow links on this page. 'True' allows following links, enhancing link equity distribution.",
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        db_comment="Canonical URL of the page to prevent SEO issues related to duplicate content.",
                        help_text="The preferred URL for this page, used to avoid duplicate content issues.",
                        unique=True,
                        verbose_name="Canonical URL",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScriptTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="Name of the script tag",
                        help_text="Unique name of the script tag.",
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        db_comment="HTML/JavaScript content of the script tag",
                        help_text="The HTML/JavaScript content to be injected.",
                        verbose_name="Content",
                    ),
                ),
                (
                    "placement",
                    models.CharField(
                        choices=[
                            ("head", "Head"),
                            ("start_body", "Start of Body"),
                            ("end_body", "End of Body"),
                        ],
                        db_comment="Placement location in the HTML document",
                        default="head",
                        help_text="Location in the HTML document where the script will be injected.",
                        max_length=10,
                        verbose_name="Placement",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_comment="Active status of the script tag",
                        default=True,
                        help_text="Status to indicate whether the script is active or not.",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Script Tag",
                "verbose_name_plural": "Script Tags",
                "db_table": "script_tag",
                "ordering": ["created_at"],
            },
        ),
    ]
