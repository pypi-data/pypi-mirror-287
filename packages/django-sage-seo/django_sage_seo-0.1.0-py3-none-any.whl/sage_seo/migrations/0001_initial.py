# Generated by Django 5.0.7 on 2024-07-26 00:22

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import sage_seo.funcs


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="MetaInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "view_name",
                    models.CharField(
                        db_comment="The view or route name associated with this meta information.",
                        help_text="The name of the view or page this meta information applies to.",
                        max_length=255,
                        verbose_name="View Name",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_comment="SEO title of the page.",
                        help_text="The title of the page for SEO purposes.",
                        max_length=255,
                        verbose_name="Title",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        db_comment="SEO description of the page, used in search engine listings.",
                        help_text="A brief description of the page content for SEO purposes. Ideally 155 to 160 characters.",
                        max_length=160,
                        verbose_name="Description",
                    ),
                ),
                (
                    "keywords",
                    models.TextField(
                        db_comment="List of SEO keywords associated with the page.",
                        default=list,
                        help_text="A list of keywords relevant to the page content, used for SEO purposes.",
                        verbose_name="SEO Keywords",
                    ),
                ),
                (
                    "index_page",
                    models.BooleanField(
                        db_comment="Flag indicating if the page should be indexed by search engines.",
                        default=True,
                        help_text="Indicates whether search engines should index this page.",
                    ),
                ),
                (
                    "follow_page_links",
                    models.BooleanField(
                        db_comment="Controls whether search engine crawlers are advised to follow links found on this page.",
                        default=True,
                        help_text="Determines if search engine crawlers should follow links on this page. 'True' allows following links, enhancing link equity distribution.",
                    ),
                ),
                (
                    "json_ld",
                    models.JSONField(
                        blank=True,
                        db_comment="JSON-LD structured data for enhancing search engine listings with rich snippets.",
                        help_text="Structured JSON-LD data for rich snippets. Enter valid JSON.",
                        null=True,
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        db_comment="Canonical URL of the page to prevent SEO issues related to duplicate content.",
                        help_text="The preferred URL for this page, used to avoid duplicate content issues.",
                        unique=True,
                        verbose_name="Canonical URL",
                    ),
                ),
                (
                    "og_title",
                    models.CharField(
                        blank=True,
                        db_comment="Open Graph title for social sharing.",
                        help_text="The title of the content as it should appear when shared on social networks like Facebook.",
                        max_length=255,
                        null=True,
                        verbose_name="OG Title",
                    ),
                ),
                (
                    "og_type",
                    models.CharField(
                        blank=True,
                        db_comment="Open Graph type for defining the type of content for social sharing.",
                        help_text="The type of object as it should appear when shared on social networks (e.g., 'website', 'article').",
                        max_length=50,
                        null=True,
                        verbose_name="OG Type",
                    ),
                ),
                (
                    "og_image",
                    models.URLField(
                        blank=True,
                        db_comment="Open Graph image URL for social sharing.",
                        help_text="The URL to an image that represents the content. This image is used when the content is shared on social networks.",
                        null=True,
                        verbose_name="OG Image",
                    ),
                ),
                (
                    "og_description",
                    models.TextField(
                        blank=True,
                        db_comment="Open Graph description for social sharing.",
                        help_text="A brief description of the content as it should appear when shared on social networks.",
                        null=True,
                        verbose_name="OG Description",
                    ),
                ),
                (
                    "twitter_card",
                    models.CharField(
                        blank=True,
                        db_comment="Twitter card type for defining content display on Twitter.",
                        help_text="The type of Twitter card (e.g., 'summary', 'summary_large_image') that defines how content is displayed on Twitter.",
                        max_length=50,
                        null=True,
                        verbose_name="Twitter Card",
                    ),
                ),
                (
                    "twitter_site",
                    models.CharField(
                        blank=True,
                        db_comment="Twitter site username for the card footer.",
                        help_text="The Twitter @username of the website. Used in the card footer.",
                        max_length=100,
                        null=True,
                        verbose_name="Twitter Site",
                    ),
                ),
                (
                    "twitter_creator",
                    models.CharField(
                        blank=True,
                        db_comment="Twitter creator username for giving content credit.",
                        help_text="The Twitter @username of the content creator. Used to give credit.",
                        max_length=100,
                        null=True,
                        verbose_name="Twitter Creator",
                    ),
                ),
                (
                    "twitter_image",
                    models.URLField(
                        blank=True,
                        db_comment="Twitter image URL for representing the content on Twitter.",
                        help_text="The URL to an image that represents the content on Twitter. Overrides the OG image for Twitter.",
                        null=True,
                        verbose_name="Twitter Image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScriptTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="Name of the script tag",
                        help_text="Unique name of the script tag.",
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        db_comment="HTML/JavaScript content of the script tag",
                        help_text="The HTML/JavaScript content to be injected.",
                        verbose_name="Content",
                    ),
                ),
                (
                    "placement",
                    models.CharField(
                        choices=[
                            ("head", "Head"),
                            ("start_body", "Start of Body"),
                            ("end_body", "End of Body"),
                        ],
                        db_comment="Placement location in the HTML document",
                        default="head",
                        help_text="Location in the HTML document where the script will be injected.",
                        max_length=10,
                        verbose_name="Placement",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_comment="Active status of the script tag",
                        default=True,
                        help_text="Status to indicate whether the script is active or not.",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Script Tag",
                "verbose_name_plural": "Script Tags",
                "db_table": "script_tag",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="URLMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "old_url",
                    models.CharField(
                        help_text="The old URL that was replaced.",
                        max_length=255,
                        verbose_name="Old URL",
                    ),
                ),
                (
                    "new_url",
                    models.CharField(
                        help_text="The new URL that replaced the old one.",
                        max_length=255,
                        verbose_name="New URL",
                    ),
                ),
                (
                    "redirect_type",
                    models.CharField(
                        choices=[("primary", "primary"), ("temporary", "temporary")],
                        default="primary",
                        help_text="The HTTP status code used to redirect a user from one URL to another.",
                        max_length=20,
                        validators=[django.core.validators.MaxLengthValidator(20)],
                        verbose_name="Redirect Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "URL Mapping",
                "verbose_name_plural": "URL Mappings",
            },
        ),
        migrations.CreateModel(
            name="LinkShortener",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "original_url",
                    models.URLField(
                        help_text="The full original URL that will be shortened. This URL should be the complete path to the resource or page that the short URL will redirect to."
                    ),
                ),
                (
                    "short_code",
                    models.CharField(
                        default=sage_seo.funcs.generate_short_code,
                        help_text="A unique, randomly generated string serving as the identifier for the shortened URL. This code is appended to the base URL of the site to form the complete short URL.",
                        max_length=6,
                        unique=True,
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The primary key of the associated model instance. Used in conjunction with 'content_type' to uniquely identify the target object for the short URL.",
                        null=True,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="The Django ContentType of the object that this shortened URL is associated with. This allows the short URL to be linked to any model instance in the project.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SlugSwap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modified at"),
                ),
                (
                    "old_slug",
                    models.SlugField(
                        allow_unicode=True,
                        editable=False,
                        help_text="Slug is a newspaper term. A short label for something containing only letters, numbers, underscores, or hyphens. They are generally used in URLs.",
                        max_length=255,
                        verbose_name="Old Slug",
                    ),
                ),
                (
                    "new_slug",
                    models.SlugField(
                        allow_unicode=True,
                        editable=False,
                        help_text="Slug is a newspaper term. A short label for something containing only letters, numbers, underscores, or hyphens. They are generally used in URLs.",
                        max_length=255,
                        verbose_name="New Slug",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(help_text="ID of the related object."),
                ),
                (
                    "redirect_type",
                    models.CharField(
                        choices=[("primary", "primary"), ("temporary", "temporary")],
                        default="primary",
                        help_text="refers to the HTTP status code that is used toredirect a user from one URL to another",
                        max_length=20,
                        validators=[django.core.validators.MaxLengthValidator(20)],
                        verbose_name="redirect type",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="Content type of the related object.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Slug Swap",
                "verbose_name_plural": "Slug Swaps",
            },
        ),
    ]
