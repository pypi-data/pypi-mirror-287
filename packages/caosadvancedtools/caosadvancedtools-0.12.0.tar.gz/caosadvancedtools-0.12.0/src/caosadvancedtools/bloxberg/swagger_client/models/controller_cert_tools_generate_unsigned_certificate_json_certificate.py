# coding: utf-8

"""
    Research Object Certification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ControllerCertToolsGenerateUnsignedCertificateJsonCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'list[str]',
        'id': 'str',
        'type': 'list[str]',
        'issuer': 'str',
        'issuance_date': 'str',
        'credential_subject': 'object',
        'display_html': 'str',
        'crid': 'str',
        'crid_type': 'str',
        'metadata_json': 'str',
        'proof': 'object'
    }

    attribute_map = {
        'context': '@context',
        'id': 'id',
        'type': 'type',
        'issuer': 'issuer',
        'issuance_date': 'issuanceDate',
        'credential_subject': 'credentialSubject',
        'display_html': 'displayHtml',
        'crid': 'crid',
        'crid_type': 'cridType',
        'metadata_json': 'metadataJson',
        'proof': 'proof'
    }

    def __init__(self, context=None, id=None, type=None, issuer=None, issuance_date=None, credential_subject=None, display_html=None, crid=None, crid_type=None, metadata_json=None, proof=None):  # noqa: E501
        """ControllerCertToolsGenerateUnsignedCertificateJsonCertificate - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._issuer = None
        self._issuance_date = None
        self._credential_subject = None
        self._display_html = None
        self._crid = None
        self._crid_type = None
        self._metadata_json = None
        self._proof = None
        self.discriminator = None
        if context is not None:
            self.context = context
        self.id = id
        self.type = type
        self.issuer = issuer
        self.issuance_date = issuance_date
        self.credential_subject = credential_subject
        if display_html is not None:
            self.display_html = display_html
        self.crid = crid
        if crid_type is not None:
            self.crid_type = crid_type
        if metadata_json is not None:
            self.metadata_json = metadata_json
        self.proof = proof

    @property
    def context(self):
        """Gets the context of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501

        Relevant JSON-LD context links in order to validate Verifiable Credentials according to their spec.  # noqa: E501

        :return: The context of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: list[str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.

        Relevant JSON-LD context links in order to validate Verifiable Credentials according to their spec.  # noqa: E501

        :param context: The context of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: list[str]
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The id of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param id: The id of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param type: The type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: list[str]
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def issuer(self):
        """Gets the issuer of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The issuer of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param issuer: The issuer of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501

        self._issuer = issuer

    @property
    def issuance_date(self):
        """Gets the issuance_date of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The issuance_date of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuance_date

    @issuance_date.setter
    def issuance_date(self, issuance_date):
        """Sets the issuance_date of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param issuance_date: The issuance_date of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """
        if issuance_date is None:
            raise ValueError("Invalid value for `issuance_date`, must not be `None`")  # noqa: E501

        self._issuance_date = issuance_date

    @property
    def credential_subject(self):
        """Gets the credential_subject of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The credential_subject of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: object
        """
        return self._credential_subject

    @credential_subject.setter
    def credential_subject(self, credential_subject):
        """Sets the credential_subject of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param credential_subject: The credential_subject of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: object
        """
        if credential_subject is None:
            raise ValueError("Invalid value for `credential_subject`, must not be `None`")  # noqa: E501

        self._credential_subject = credential_subject

    @property
    def display_html(self):
        """Gets the display_html of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The display_html of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._display_html

    @display_html.setter
    def display_html(self, display_html):
        """Sets the display_html of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param display_html: The display_html of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """

        self._display_html = display_html

    @property
    def crid(self):
        """Gets the crid of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The crid of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._crid

    @crid.setter
    def crid(self, crid):
        """Sets the crid of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param crid: The crid of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """
        if crid is None:
            raise ValueError("Invalid value for `crid`, must not be `None`")  # noqa: E501

        self._crid = crid

    @property
    def crid_type(self):
        """Gets the crid_type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The crid_type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._crid_type

    @crid_type.setter
    def crid_type(self, crid_type):
        """Sets the crid_type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param crid_type: The crid_type of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """

        self._crid_type = crid_type

    @property
    def metadata_json(self):
        """Gets the metadata_json of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The metadata_json of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: str
        """
        return self._metadata_json

    @metadata_json.setter
    def metadata_json(self, metadata_json):
        """Sets the metadata_json of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param metadata_json: The metadata_json of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: str
        """

        self._metadata_json = metadata_json

    @property
    def proof(self):
        """Gets the proof of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501


        :return: The proof of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :rtype: object
        """
        return self._proof

    @proof.setter
    def proof(self, proof):
        """Sets the proof of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.


        :param proof: The proof of this ControllerCertToolsGenerateUnsignedCertificateJsonCertificate.  # noqa: E501
        :type: object
        """
        if proof is None:
            raise ValueError("Invalid value for `proof`, must not be `None`")  # noqa: E501

        self._proof = proof

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControllerCertToolsGenerateUnsignedCertificateJsonCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControllerCertToolsGenerateUnsignedCertificateJsonCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
