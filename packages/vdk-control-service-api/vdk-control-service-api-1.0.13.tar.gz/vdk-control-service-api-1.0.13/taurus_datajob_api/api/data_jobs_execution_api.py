# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time). The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning. Implementation of the API is not considered stable nor well tested. Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade. The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import List, Optional

from taurus_datajob_api.models.data_job_execution import DataJobExecution
from taurus_datajob_api.models.data_job_execution_logs import DataJobExecutionLogs
from taurus_datajob_api.models.data_job_execution_request import DataJobExecutionRequest

from taurus_datajob_api.api_client import ApiClient
from taurus_datajob_api.api_response import ApiResponse
from taurus_datajob_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DataJobsExecutionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def data_job_deployment_execution_list(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], deployment_id : Annotated[StrictStr, Field(..., description="Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented.")], execution_status : Annotated[Optional[conlist(StrictStr)], Field(description="Execution status")] = None, **kwargs) -> List[DataJobExecution]:  # noqa: E501
        """Get Data Jobs (recent) executions.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_deployment_execution_list(team_name, job_name, deployment_id, execution_status, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param deployment_id: Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented. (required)
        :type deployment_id: str
        :param execution_status: Execution status
        :type execution_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DataJobExecution]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_deployment_execution_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_deployment_execution_list_with_http_info(team_name, job_name, deployment_id, execution_status, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_deployment_execution_list_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], deployment_id : Annotated[StrictStr, Field(..., description="Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented.")], execution_status : Annotated[Optional[conlist(StrictStr)], Field(description="Execution status")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Data Jobs (recent) executions.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_deployment_execution_list_with_http_info(team_name, job_name, deployment_id, execution_status, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param deployment_id: Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented. (required)
        :type deployment_id: str
        :param execution_status: Execution status
        :type execution_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DataJobExecution], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'deployment_id',
            'execution_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_deployment_execution_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']

        if _params['deployment_id']:
            _path_params['deployment_id'] = _params['deployment_id']


        # process the query parameters
        _query_params = []
        if _params.get('execution_status') is not None:  # noqa: E501
            _query_params.append(('execution_status', _params['execution_status']))
            _collection_formats['execution_status'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[DataJobExecution]",
            '404': "Error",
        }

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments/{deployment_id}/executions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def data_job_execution_cancel(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], **kwargs) -> None:  # noqa: E501
        """Cancel (if running) Data Job Execution  # noqa: E501

        <i>(Introduced in v1.0)</i> | Cancel the execution of a Data Job with a given execution ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_cancel(team_name, job_name, execution_id, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_execution_cancel_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_execution_cancel_with_http_info(team_name, job_name, execution_id, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_execution_cancel_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel (if running) Data Job Execution  # noqa: E501

        <i>(Introduced in v1.0)</i> | Cancel the execution of a Data Job with a given execution ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_cancel_with_http_info(team_name, job_name, execution_id, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'execution_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_execution_cancel" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']

        if _params['execution_id']:
            _path_params['execution_id'] = _params['execution_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions/{execution_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def data_job_execution_list(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_status : Annotated[Optional[conlist(StrictStr)], Field(description="Execution status")] = None, **kwargs) -> List[DataJobExecution]:  # noqa: E501
        """Get Data Jobs (recent) executions.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_list(team_name, job_name, execution_status, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_status: Execution status
        :type execution_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DataJobExecution]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_execution_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_execution_list_with_http_info(team_name, job_name, execution_status, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_execution_list_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_status : Annotated[Optional[conlist(StrictStr)], Field(description="Execution status")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Data Jobs (recent) executions.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_list_with_http_info(team_name, job_name, execution_status, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_status: Execution status
        :type execution_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DataJobExecution], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'execution_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_execution_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']


        # process the query parameters
        _query_params = []
        if _params.get('execution_status') is not None:  # noqa: E501
            _query_params.append(('execution_status', _params['execution_status']))
            _collection_formats['execution_status'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[DataJobExecution]",
            '404': "Error",
        }

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def data_job_execution_read(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], **kwargs) -> DataJobExecution:  # noqa: E501
        """Get Data Job Execution details.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_read(team_name, job_name, execution_id, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataJobExecution
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_execution_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_execution_read_with_http_info(team_name, job_name, execution_id, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_execution_read_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Data Job Execution details.  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_read_with_http_info(team_name, job_name, execution_id, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataJobExecution, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'execution_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_execution_read" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']

        if _params['execution_id']:
            _path_params['execution_id'] = _params['execution_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "DataJobExecution",
            '404': "Error",
        }

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions/{execution_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def data_job_execution_start(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], deployment_id : Annotated[StrictStr, Field(..., description="Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented.")], data_job_execution_request : Optional[DataJobExecutionRequest] = None, **kwargs) -> None:  # noqa: E501
        """Trigger Data Job Execution.  # noqa: E501

        <i>(Introduced in v1.0)</i> | Trigger new execution of a Data Job. If Data Job deployment is currently being executed it will return an error (409 Conflict). Only deployed Data Jobs can be executed. Currently the Data Job arguments ('args') are ignored. Note: in the future it will be possible to trigger different deployments.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_start(team_name, job_name, deployment_id, data_job_execution_request, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param deployment_id: Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented. (required)
        :type deployment_id: str
        :param data_job_execution_request:
        :type data_job_execution_request: DataJobExecutionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_execution_start_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_execution_start_with_http_info(team_name, job_name, deployment_id, data_job_execution_request, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_execution_start_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], deployment_id : Annotated[StrictStr, Field(..., description="Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented.")], data_job_execution_request : Optional[DataJobExecutionRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Trigger Data Job Execution.  # noqa: E501

        <i>(Introduced in v1.0)</i> | Trigger new execution of a Data Job. If Data Job deployment is currently being executed it will return an error (409 Conflict). Only deployed Data Jobs can be executed. Currently the Data Job arguments ('args') are ignored. Note: in the future it will be possible to trigger different deployments.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_execution_start_with_http_info(team_name, job_name, deployment_id, data_job_execution_request, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param deployment_id: Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented. (required)
        :type deployment_id: str
        :param data_job_execution_request:
        :type data_job_execution_request: DataJobExecutionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'deployment_id',
            'data_job_execution_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_execution_start" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']

        if _params['deployment_id']:
            _path_params['deployment_id'] = _params['deployment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data_job_execution_request'] is not None:
            _body_params = _params['data_job_execution_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments/{deployment_id}/executions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def data_job_logs_download(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], tail_lines : Annotated[Optional[StrictInt], Field(description="tail_lines when set to positive value, the number of lines from the end of the logs to return.")] = None, **kwargs) -> DataJobExecutionLogs:  # noqa: E501
        """Download data job logs. This API is guranteed to provide logs only if the jobs is currently running. For logs from older job executions - use logsUrl field passed by GET execution API or jobsQuery API.   # noqa: E501

        <i>(Introduced in v1.2.9)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_logs_download(team_name, job_name, execution_id, tail_lines, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param tail_lines: tail_lines when set to positive value, the number of lines from the end of the logs to return.
        :type tail_lines: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataJobExecutionLogs
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the data_job_logs_download_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.data_job_logs_download_with_http_info(team_name, job_name, execution_id, tail_lines, **kwargs)  # noqa: E501

    @validate_arguments
    def data_job_logs_download_with_http_info(self, team_name : Annotated[StrictStr, Field(..., description="Team Name")], job_name : Annotated[StrictStr, Field(..., description="Data Job Name.")], execution_id : Annotated[StrictStr, Field(..., description="Execution ID.")], tail_lines : Annotated[Optional[StrictInt], Field(description="tail_lines when set to positive value, the number of lines from the end of the logs to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download data job logs. This API is guranteed to provide logs only if the jobs is currently running. For logs from older job executions - use logsUrl field passed by GET execution API or jobsQuery API.   # noqa: E501

        <i>(Introduced in v1.2.9)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_job_logs_download_with_http_info(team_name, job_name, execution_id, tail_lines, async_req=True)
        >>> result = thread.get()

        :param team_name: Team Name (required)
        :type team_name: str
        :param job_name: Data Job Name. (required)
        :type job_name: str
        :param execution_id: Execution ID. (required)
        :type execution_id: str
        :param tail_lines: tail_lines when set to positive value, the number of lines from the end of the logs to return.
        :type tail_lines: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataJobExecutionLogs, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'team_name',
            'job_name',
            'execution_id',
            'tail_lines'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_logs_download" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['team_name']:
            _path_params['team_name'] = _params['team_name']

        if _params['job_name']:
            _path_params['job_name'] = _params['job_name']

        if _params['execution_id']:
            _path_params['execution_id'] = _params['execution_id']


        # process the query parameters
        _query_params = []
        if _params.get('tail_lines') is not None:  # noqa: E501
            _query_params.append(('tail_lines', _params['tail_lines']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "DataJobExecutionLogs",
            '400': "Error",
            '404': "Error",
        }

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions/{execution_id}/logs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
