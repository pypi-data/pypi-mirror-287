{"version":3,"sources":["justGageComponent.tsx","index.tsx"],"names":["JustGageComponent","props","value","second_value","second_pointer","min_value","max_value","title","title_fontsize","title_color","key","customCSS","id","width","height","valueFontColor","valueFontFamily","symbol","minTxt","maxTxt","reverse","textRenderer","gaugeWidthScale","gaugeColor","label","labelFontColor","shadowOpacity","shadowSize","shadowVerticalOffset","levelColors","startAnimationTime","startAnimationType","refreshAnimationTime","refreshAnimationType","donutStartAngle","valueMinFontSize","labelMinFontSize","minLabelMinFontSize","maxLabelMinFontSize","hideValue","hideMinMax","showInnerShadow","humanFriendly","noGradient","donut","differential","relativeGaugeSize","counter","decimals","customSectors","formatNumber","pointer","pointerOptions","displayRemaining","args","gaugeRef1","useRef","gaugeRef2","textRendererfunc","eval","createGauge","ref","gaugeOptions","JustGage","parentNode","current","useEffect","Streamlit","setFrameHeight","gaugeOptions2","min","max","toplength","bottomlength","bottomwidth","color","React","createElement","Fragment","dangerouslySetInnerHTML","__html","style","display","flexDirection","alignItems","justifyContent","marginBottom","textAlign","margin","fontSize","position","zIndex","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65285eee.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport JustGage from \"justgage\";\r\n\r\nconst JustGageComponent = (props: ComponentProps) => {\r\n  // Destructuring to extract variables from props.args\r\n  const {\r\n    value,second_value,second_pointer, min_value, max_value, title,title_fontsize,title_color, key, customCSS, id, width, height,\r\n    valueFontColor, valueFontFamily, symbol, minTxt, maxTxt, reverse, \r\n    textRenderer, gaugeWidthScale, gaugeColor, label, labelFontColor,\r\n    shadowOpacity, shadowSize, shadowVerticalOffset, levelColors, startAnimationTime,\r\n    startAnimationType, refreshAnimationTime, refreshAnimationType, donutStartAngle, valueMinFontSize,\r\n    labelMinFontSize, minLabelMinFontSize, maxLabelMinFontSize, hideValue, hideMinMax, showInnerShadow,\r\n    humanFriendly, noGradient, donut, differential, relativeGaugeSize, counter, decimals, customSectors,\r\n    formatNumber, pointer, pointerOptions, displayRemaining,\r\n  } = props.args;\r\n\r\n   // Refs for both gauges\r\n  const gaugeRef1 = useRef(null);\r\n  const gaugeRef2 = useRef(null);\r\n \r\n  const textRendererfunc = eval('(' + textRenderer + ')');\r\n  // Adjusted function with types for the parameters\r\n  const createGauge = (ref: React.RefObject<HTMLDivElement>, gaugeOptions: any) => {\r\n    new JustGage({\r\n      ...gaugeOptions,\r\n      parentNode: ref.current,\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    // Set the frame height dynamically based on the passed height\r\n    Streamlit.setFrameHeight(); // Adjust the buffer or make it dynamic as needed\r\n    // Options for the first gauge\r\n    const gaugeOptions1 = {\r\n      id: id || \"gauge1\",\r\n      value: value,\r\n      min: min_value,\r\n      max: max_value,\r\n      label: label,\r\n      width: width || 350,\r\n      height: height || 350,\r\n      valueFontColor: valueFontColor,\r\n      valueFontFamily: valueFontFamily,\r\n      symbol: symbol,\r\n      minTxt: minTxt,\r\n      maxTxt: maxTxt,\r\n      reverse: reverse,\r\n      textRenderer: textRendererfunc,\r\n      gaugeWidthScale: gaugeWidthScale,\r\n      gaugeColor: gaugeColor,\r\n      labelFontColor: labelFontColor,\r\n      shadowOpacity: shadowOpacity,\r\n      shadowSize: shadowSize,\r\n      shadowVerticalOffset: shadowVerticalOffset,\r\n      levelColors: levelColors,\r\n      startAnimationTime: startAnimationTime,\r\n      startAnimationType: startAnimationType,\r\n      refreshAnimationTime: refreshAnimationTime,\r\n      refreshAnimationType: refreshAnimationType,\r\n      donutStartAngle: donutStartAngle,\r\n      valueMinFontSize: valueMinFontSize,\r\n      labelMinFontSize: labelMinFontSize,\r\n      minLabelMinFontSize: minLabelMinFontSize,\r\n      maxLabelMinFontSize: maxLabelMinFontSize,\r\n      hideValue: hideValue,\r\n      hideMinMax: hideMinMax,\r\n      showInnerShadow: showInnerShadow,\r\n      humanFriendly: humanFriendly,\r\n      noGradient: noGradient,\r\n      donut: donut,\r\n      differential: differential,\r\n      relativeGaugeSize: relativeGaugeSize,\r\n      counter: counter,\r\n      decimals: decimals,\r\n      customSectors: customSectors,\r\n      formatNumber: formatNumber,\r\n      pointer: pointer,\r\n      pointerOptions: pointerOptions,\r\n      displayRemaining: displayRemaining,\r\n    };\r\n\r\n    // Options for the second gauge (overlay)\r\n    const gaugeOptions2 = {\r\n      id: id || \"gauge2\",\r\n      value: second_value,\r\n      min: min_value,\r\n      max: max_value,\r\n      width: width || 350,\r\n      height: height || 350,\r\n      gaugeWidthScale:  0.1,\r\n      gaugeColor: null,\r\n      levelColors: [null],\r\n      hideValue: true,\r\n      hideMinMax: true,\r\n      pointer: second_pointer,\r\n      pointerOptions: {\r\n        toplength: 8,\r\n        bottomlength: -20,\r\n        bottomwidth: 6,\r\n        color: '#8e8e93'\r\n      },\r\n      // ... (customize as needed for the overlaying gauge)\r\n    };\r\n    // Create both gauges\r\n    createGauge(gaugeRef1, gaugeOptions1);\r\n    createGauge(gaugeRef2, gaugeOptions2);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <style dangerouslySetInnerHTML={{ __html: customCSS }} />\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center',\r\n        width: width, marginBottom: '1px' }}>\r\n      <h1 style={{ textAlign: 'center', margin: 0, width: '100%', fontSize: title_fontsize,\r\n          color: title_color }}>\r\n        {title}\r\n      </h1>\r\n    </div>\r\n    <div style={{ position: 'relative', width: width || 350, height: height || 350}}>\r\n      <div id={id || \"gauge1\"} ref={gaugeRef1} style={{ width: '100%', height: '100%', position: 'absolute', zIndex: 1 }}/>\r\n      <div id={id || \"gauge2\"} ref={gaugeRef2} style={{ width: '100%', height: '100%', position: 'absolute', zIndex: 2 }}/>\r\n    </div>\r\n  </>\r\n\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(JustGageComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport JustGageComponent from \"./justGageComponent\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <JustGageComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}