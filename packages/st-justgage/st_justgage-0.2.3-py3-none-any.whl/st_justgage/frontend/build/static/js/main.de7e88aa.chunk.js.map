{"version":3,"sources":["justGageComponent.tsx","index.tsx"],"names":["JustGageComponent","props","tooltip","setTooltip","useState","visible","x","y","content","value","second_value","second_pointer","min_value","max_value","title","title_fontsize","title_color","key","customCSS","width","height","valueFontColor","valueFontFamily","symbol","minTxt","maxTxt","reverse","textRenderer","gaugeWidthScale","gaugeColor","label","labelFontColor","shadowOpacity","shadowSize","shadowVerticalOffset","levelColors","startAnimationTime","startAnimationType","refreshAnimationTime","refreshAnimationType","donutStartAngle","valueMinFontSize","labelMinFontSize","minLabelMinFontSize","maxLabelMinFontSize","hideValue","hideMinMax","showInnerShadow","humanFriendly","noGradient","donut","differential","relativeGaugeSize","counter","decimals","customSectors","formatNumber","pointer","pointerOptions","second_pointerOptions","displayRemaining","imageDataEncoded","tooltipPosition","enableTooltip","tooltipText","args","gaugeRef1","useRef","gaugeRef2","calculateTooltipPosition","rect","position","left","top","right","bottom","showTooltip","e","gaugeElement","current","getBoundingClientRect","console","error","hideTooltip","textRendererfunc","eval","createGauge","ref","gaugeOptions","JustGage","parentNode","useEffect","Streamlit","setFrameHeight","gaugeOptions2","id","min","max","captureAndSendScreenshot","element","document","getElementById","setTimeout","html2canvas","then","canvas","base64Image","toDataURL","setComponentValue","React","createElement","Fragment","dangerouslySetInnerHTML","__html","style","display","flexDirection","alignItems","justifyContent","marginBottom","textAlign","margin","fontSize","color","onMouseOver","onMouseOut","zIndex","className","withStreamlitConnection","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.de7e88aa.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport JustGage from \"justgage\";\r\nimport html2canvas from 'html2canvas';\r\n\r\n\r\nconst JustGageComponent = (props: ComponentProps) => {\r\n  // State for tooltip\r\n  const [tooltip, setTooltip] = useState({ visible: false, x: 0, y: 0, content: \"\" });\r\n\r\n  // Destructuring to extract variables from props.args\r\n  const {\r\n    value,second_value,second_pointer, min_value, max_value, title,title_fontsize,title_color, key, customCSS, width, height,\r\n    valueFontColor, valueFontFamily, symbol, minTxt, maxTxt, reverse, \r\n    textRenderer, gaugeWidthScale, gaugeColor, label, labelFontColor,\r\n    shadowOpacity, shadowSize, shadowVerticalOffset, levelColors, startAnimationTime,\r\n    startAnimationType, refreshAnimationTime, refreshAnimationType, donutStartAngle, valueMinFontSize,\r\n    labelMinFontSize, minLabelMinFontSize, maxLabelMinFontSize, hideValue, hideMinMax, showInnerShadow,\r\n    humanFriendly, noGradient, donut, differential, relativeGaugeSize, counter, decimals, customSectors,\r\n    formatNumber, pointer, pointerOptions,second_pointerOptions, displayRemaining,imageDataEncoded,\r\n    tooltipPosition,enableTooltip,tooltipText\r\n  } = props.args;\r\n\r\n   // Refs for both gauges\r\n  const gaugeRef1 = useRef<HTMLDivElement>(null);\r\n  const gaugeRef2 = useRef<HTMLDivElement>(null);\r\n\r\n  const calculateTooltipPosition = (rect: DOMRect, position: string) => {\r\n    switch (position) {\r\n      case 'top left':\r\n        return { x: rect.left, y: rect.top };\r\n      case 'top center':\r\n        return { x: rect.left + rect.width / 2, y: rect.top };\r\n      case 'top right':\r\n        return { x: rect.right, y: rect.top };\r\n      case 'center left':\r\n        return { x: rect.left, y: rect.top + rect.height / 2 };\r\n      case 'center':\r\n        return { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\r\n      case 'center right':\r\n        return { x: rect.right, y: rect.top + rect.height / 2 };\r\n      case 'bottom left':\r\n        return { x: rect.left, y: rect.bottom-25};\r\n      case 'bottom center':\r\n        return { x: rect.left + rect.width / 2, y: rect.bottom-25 };\r\n      case 'bottom right':\r\n        return { x: rect.right, y: rect.bottom-25 };\r\n      default:\r\n        return { x: rect.right, y: rect.top }; // Standardposition\r\n    }\r\n  };\r\n  \r\n  const showTooltip = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (enableTooltip) {\r\n      const gaugeElement = gaugeRef1.current;\r\n      if (gaugeElement) {\r\n        const rect = gaugeElement.getBoundingClientRect();\r\n        const position = calculateTooltipPosition(rect, tooltipPosition);\r\n        setTooltip({ visible: true, x: position.x, y: position.y, content: tooltipText});\r\n      } else {\r\n        console.error(\"Gauge element not found.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  const hideTooltip = () => {\r\n    if (enableTooltip) {\r\n      setTooltip({ ...tooltip, visible: false });\r\n    }\r\n  };\r\n\r\n \r\n  const textRendererfunc = eval('(' + textRenderer + ')');\r\n  // Adjusted function with types for the parameters\r\n  const createGauge = (ref: React.RefObject<HTMLDivElement>, gaugeOptions: any) => {\r\n    new JustGage({\r\n      ...gaugeOptions,\r\n      parentNode: ref.current,\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Set the frame height dynamically based on the passed height\r\n    Streamlit.setFrameHeight(); // Adjust the buffer or make it dynamic as needed\r\n    // Options for the first gauge\r\n    const gaugeOptions1 = {\r\n      id:  \"gauge1\",\r\n      value: value,\r\n      min: min_value,\r\n      max: max_value,\r\n      label: label,\r\n      width: width || 350,\r\n      height: height || 350,\r\n      valueFontColor: valueFontColor,\r\n      valueFontFamily: valueFontFamily,\r\n      symbol: symbol,\r\n      minTxt: minTxt,\r\n      maxTxt: maxTxt,\r\n      reverse: reverse,\r\n      textRenderer: textRendererfunc,\r\n      gaugeWidthScale: gaugeWidthScale,\r\n      gaugeColor: gaugeColor,\r\n      labelFontColor: labelFontColor,\r\n      shadowOpacity: shadowOpacity,\r\n      shadowSize: shadowSize,\r\n      shadowVerticalOffset: shadowVerticalOffset,\r\n      levelColors: levelColors,\r\n      startAnimationTime: startAnimationTime,\r\n      startAnimationType: startAnimationType,\r\n      refreshAnimationTime: refreshAnimationTime,\r\n      refreshAnimationType: refreshAnimationType,\r\n      donutStartAngle: donutStartAngle,\r\n      valueMinFontSize: valueMinFontSize,\r\n      labelMinFontSize: labelMinFontSize,\r\n      minLabelMinFontSize: minLabelMinFontSize,\r\n      maxLabelMinFontSize: maxLabelMinFontSize,\r\n      hideValue: hideValue,\r\n      hideMinMax: hideMinMax,\r\n      showInnerShadow: showInnerShadow,\r\n      humanFriendly: humanFriendly,\r\n      noGradient: noGradient,\r\n      donut: donut,\r\n      differential: differential,\r\n      relativeGaugeSize: relativeGaugeSize,\r\n      counter: counter,\r\n      decimals: decimals,\r\n      customSectors: customSectors,\r\n      formatNumber: formatNumber,\r\n      pointer: pointer,\r\n      pointerOptions: pointerOptions,\r\n      displayRemaining: displayRemaining,\r\n    };\r\n\r\n    // Options for the second gauge (overlay)\r\n    const gaugeOptions2 = {\r\n      id: \"gauge2\",\r\n      value: second_value,\r\n      min: min_value,\r\n      max: max_value,\r\n      width: width || 350,\r\n      height: height || 350,\r\n      gaugeWidthScale:  0.1,\r\n      gaugeColor: null,\r\n      levelColors: [null],\r\n      hideValue: true,\r\n      hideMinMax: true,\r\n      pointer: second_pointer,\r\n      startAnimationTime: startAnimationTime,\r\n      startAnimationType: startAnimationType,\r\n      pointerOptions: second_pointerOptions,\r\n      displayRemaining: displayRemaining,\r\n      reverse: reverse,\r\n      donut: donut,\r\n      donutStartAngle: donutStartAngle,\r\n      \r\n      \r\n    };\r\n    // Create both gauges\r\n    createGauge(gaugeRef1, gaugeOptions1);\r\n    if (second_pointer) {\r\n      createGauge(gaugeRef2, gaugeOptions2);\r\n    }\r\n    // Function to capture and send screenshot\r\n    const captureAndSendScreenshot = () => {\r\n      const element = document.getElementById(\"gauge-container\");\r\n\r\n      if (element) {\r\n          // Introduce a delay before taking the screenshot\r\n          setTimeout(() => {\r\n              html2canvas(element).then(canvas => {\r\n                  const base64Image = canvas.toDataURL(\"image/png\");\r\n                  Streamlit.setComponentValue(base64Image);\r\n              });\r\n          }, 1000); // Delay of 1000 milliseconds\r\n      } else {\r\n          console.error(\"Element for screenshot is not available.\");\r\n      }\r\n    };\r\n\r\n    if(imageDataEncoded){\r\n      // Call the screenshot function\r\n      captureAndSendScreenshot();\r\n    }\r\n\r\n  }, [second_pointer]);\r\n\r\n  return (\r\n    <>\r\n    <style dangerouslySetInnerHTML={{ __html: customCSS }} />\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', width: width || 350, marginBottom: '0px' }}>\r\n        <h1 style={{ textAlign: 'center', margin: 0, width: '100%', fontSize: title_fontsize, color: title_color }}>\r\n          {title}\r\n        </h1>\r\n      </div>\r\n    <div id=\"gauge-container\" style={{ position: 'relative', width: width || 350, height: height || 340}}onMouseOver={showTooltip} \r\n           onMouseOut={hideTooltip}>\r\n      <div id={ \"gauge1\"} ref={gaugeRef1} style={{ width: '100%', height: '100%', position: 'absolute', zIndex: 1 }}/>\r\n      <div id={ \"gauge2\"} ref={gaugeRef2} style={{ width: '100%', height: '100%', position: 'absolute', zIndex: 2 }}/>\r\n      {tooltip.visible && (\r\n          <div className=\"tooltip_gauge\" style={{ position: 'absolute', left: tooltip.x, top: tooltip.y, zIndex: 3 }} dangerouslySetInnerHTML={{ __html: tooltip.content }} />\r\n        )}\r\n      </div> \r\n  </>\r\n\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(JustGageComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport JustGageComponent from \"./justGageComponent\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <JustGageComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}