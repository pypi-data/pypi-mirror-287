% 
% This is an example on how to import an sbml file
% create a report for a time course simulation 
% and run a time course simulation
% 

COPASI

%!assert( swig_this(CRootContainer.getRoot()) != 0);
% create a datamodel
dataModel = CRootContainer.addDatamodel();
%!assert( CRootContainer.getDatamodelList().size() == 1);
% the only argument to the main routine should be the name of an SBML file
if (length(argv()) == 1)
  filename = argv(){1};
  
  try
    % load the model 
    dataModel.importSBML(filename);
  catch
    error("Error while importing the model from file named \"%s\".\n", filename);
    quit(1);
  end_try_catch

  model = dataModel.getModel();
  %!assert( swig_this(model) != 0);
  % create a report with the correct filename and all the species against
  % time.
  reports = dataModel.getReportDefinitionList();
  % create a report definition object
  report = reports.createReportDefinition("Report", "Output for timecourse");
  % set the task type for the report definition to timecourse
  report.setTaskType(CTaskEnum_Task_timeCourse);
  % we don't want a table
  report.setIsTable(false);
  % the entries in the output should be seperated by a ", "
  report.setSeparator(CCopasiReportSeparator(", "));

  % we need a handle to the header and the body
  % the header will display the ids of the metabolites and "time" for
  % the first column
  % the body will contain the actual timecourse data
  header = report.getHeaderAddr();
  body = report.getBodyAddr();
  
  body.push_back(CRegisteredCommonName(CCommonName(strcat(dataModel.getModel().getCN().getString() , ",Reference=Time")).getString()));
  body.push_back(CRegisteredCommonName(report.getSeparator().getCN().getString()));
  header.push_back(CRegisteredCommonName(CDataString("time").getCN().getString()));
  header.push_back(CRegisteredCommonName(report.getSeparator().getCN().getString()));

  iMax = model.getMetabolites().size()-1;
  for i = 0:iMax
    metab = model.getMetabolite(i);
    %!assert( swig_this(metab) != 0);
    % we don't want output for FIXED metabolites right now
    if (metab.getStatus() != CModelEntity_Status_FIXED)
      % we want the concentration oin the output
      % alternatively, we could use "Reference=Amount" to get the
      % particle number
      body.push_back(CRegisteredCommonName(metab.getObject(CCommonName("Reference=Concentration")).getCN().getString()));
      % add the corresponding id to the header
      header.push_back(CRegisteredCommonName(CDataString(metab.getSBMLId()).getCN().getString()));
      % after each entry, we need a seperator
      if(i != iMax)
        body.push_back(CRegisteredCommonName(report.getSeparator().getCN().getString()));
        header.push_back(CRegisteredCommonName(report.getSeparator().getCN().getString()));
      endif
    endif
  endfor
  % get the trajectory task object
  trajectoryTask = dataModel.getTask("Time-Course");
  % if there isn't one
  if (swig_this(trajectoryTask) == 0)
    % create a one
    trajectoryTask = CTrajectoryTask();
    % add the time course task to the task list
    % this method makes sure the object is now owned by the list
    % and that SWIG does not delete it
    dataModel.getTaskList().addAndOwn(trajectoryTask);
  endif

  % run a deterministic time course
  trajectoryTask.setMethodType(CTaskEnum_Method_deterministic);

  % pass a pointer of the model to the problem
  trajectoryTask.getProblem().setModel(dataModel.getModel());

  % actiavate the task so that it will be run when the model is saved
  % and passed to CopasiSE
  trajectoryTask.setScheduled(true);

  % set the report for the task
  trajectoryTask.getReport().setReportDefinition(report);
  % set the output filename
  trajectoryTask.getReport().setTarget("example3.txt");
  % don't append output if the file exists, but overwrite the file
  trajectoryTask.getReport().setAppend(false);

  % get the problem for the task to set some parameters
  problem = trajectoryTask.getProblem();

  % simulate 100 steps
  problem.setStepNumber(100);
  % start at time 0
  dataModel.getModel().setInitialTime(0.0);
  % simulate a duration of 10 time units
  problem.setDuration(10);
  % tell the problem to actually generate time series data
  problem.setTimeSeriesRequested(true);

  % set some parameters for the LSODA method through the method
  method = trajectoryTask.getMethod();

  parameter = method.getParameter("Absolute Tolerance");
  %!assert( swig_this(parameter) != 0);
  %!assert( parameter.getType() == CCopasiParameter_UDOUBLE);
  parameter.setDblValue(1.0e-12);

  result=true;
  try
    % now we run the actual trajectory
    result=trajectoryTask.process(true);
  catch
    error("Error. Running the time course simulation failed.\n" );
    % check if there are additional error messages
    if (CCopasiMessage.size() > 0)
      % print the messages in chronological order
      error("%s\n",CCopasiMessage.getAllMessageText(true));
    endif
    quit(1);
  end_try_catch

  if (result == false)
    error("Error. Running the time course simulation failed.\n");
    % check if there are additional error messages
    if (CCopasiMessage.size() > 0)
      % print the messages in chronological order
      error("%s\n",CCopasiMessage.getAllMessageText(true));
    endif
    quit(1);
  endif
  % look at the timeseries
  timeSeries = trajectoryTask.getTimeSeries();
  % we simulated 100 steps, including the initial state, this should be
  % 101 step in the timeseries
  %!assert( timeSeries.getRecordedSteps() == 101);
  printf( "The time series consists of %d.\n" , timeSeries.getRecordedSteps());
  printf( "Each step contains %d variables.\n" , timeSeries.getNumVariables());
  printf( "The final state is: \n" );
  iMax = timeSeries.getNumVariables()-1;
  lastIndex = timeSeries.getRecordedSteps() - 1
  for i = 0:iMax
    % here we get the particle number (at least for the species)
    % the unit of the other variables may not be particle numbers
    % the concentration data can be acquired with getConcentrationData
    printf("%s: %f\n" , timeSeries.getTitle(i), timeSeries.getData(lastIndex, i) );
  endfor
else
  error("Usage: example3 SBMLFILE\n" );
  quit(1);
endif



