/**
 * @file DataBlockType.h
 * @brief  enumeration of types for C
 * 
 * This file is part of SBW.  Please visit http://sbw.sf.org for more
 * information about SBW, and the latest version of libSBW.
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the New BSD license.
 *
 * Copyright (c) 2010-2014, Frank T. Bergmann and 
 *                          University of Washington
 * Copyright (c) 2008-2010, University of Washington and 
 *                          Keck Graduate Institute.
 * Copyright (c) 2005-2008, Keck Graduate Institute.
 * Copyright (c) 2001-2004, California Institute of Technology and
 *               Japan Science and Technology Corporation.
 * 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are 
 * met: 
 * 
 * 1. Redistributions of source code must retain the above 
 *    copyright notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 * 
 * 3. Neither the name of the copyright holder nor the names of its 
 *    contributors may be used to endorse or promote products derived from 
 *    this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 * The original code contained here was initially developed by:
 *
 *     Andrew Finney, Herbert Sauro, Michael Hucka, Hamid Bolouri
 *     The Systems Biology Workbench Development Group
 *     ERATO Kitano Systems Biology Project
 *     Control and Dynamical Systems, MC 107-81
 *     California Institute of Technology
 *     Pasadena, CA, 91125, USA
 *
 *
 * Contributor(s):
 *
 */

/// include loop block
#ifndef DATABLOCKTYPE
#define DATABLOCKTYPE

/**
* Exception types used in C API.
* uses standard encoding of exceptions used in both in the API and in exception messages.
*/
typedef enum sbwExceptionCode
{
  SBWApplicationExceptionCode = 0, /**< generated by a module ie not raised by the SBW infastructure */
  SBWRawExceptionCode = 1, /**< generated by a OS or unhandled exception */
  SBWCommunicationExceptionCode = 2, /**< communication between modules has been disrupted */
  SBWModuleStartExceptionCode = 3, /**< unable to start module when a new module instance was required */
  SBWTypeMismatchExceptionCode = 4, /**< the data contained in a datablock doesn't correspond to the requested type */
  SBWIncomptatibleMethodSignatureExceptionCode = 5, /**< two method signatures do not match */
  SBWModuleIdSyntaxExceptionCode = 6, /**< the syntax of a module instance identifier string is incorrect */
  SBWIncorrectCategorySyntaxExceptionCode = 7, /**< the syntax of a service category string is incorrect */
  SBWServiceNotFoundExceptionCode = 9, /**< the requested service doesn't exist */ 
  SBWMethodTypeNotBlockTypeExceptionCode = 10, /**< thrown during communications if a supplied class uses types which are not data block types (not raised in C++ library) */
  SBWMethodAmbiguousExceptionCode = 11, /**< the given signature matches more than one method on a service */
  SBWUnsupportedObjectTypeExceptionCode = 12, /**< the given valid type is not supported by a client library */
  SBWMethodNotFoundExceptionCode = 13, /**< the given signature or name doesn't match any method on a service */
  SBWSignatureSyntaxExceptionCode = 14, /**< the syntax of the given signature is incorrect */
  SBWModuleDefinitionExceptionCode = 15, /**< exception thrown when an attempt to define a new module fails */
  SBWModuleNotFoundExceptionCode = 16, /**< the requested module doesn't exist */
  SBWBrokerStartExceptionCode = 17, /**< the requested module doesn't exist */
} SBWExceptionType ;

/**
* Datatypes used in C API.
* uses standard encoding of datatypes used in both the API and in datablocks.
*/
typedef enum sbwdataBlockType
{
  SBWByteType = 0 , /**< C API type - unsigned char */
  SBWIntegerType = 1, /**< C API type - SBWInteger */ 
  SBWDoubleType = 2, /**< C API type - SBWDouble */
  SBWBooleanType = 3, /**< C API type - SBWBoolean */
  SBWStringType = 4, /**< C API type - char * */
  SBWArrayType = 5, /**< C API type - <T>* or <T>** */
  SBWListType = 6, /**< C API type - SBWDataBlockReader * or SBWDataBlockWriter * */
  SBWVoidType = 7, /**< placeholder when no value is returned from a method */
  SBWComplexType = 8, /**< C API type - SBWComplex */ 
  SBWTerminateType = -1, /**< value of last byte in a datablock or message */
  SBWErrorType = -2 /**< placeholder when error has occured in an API function */
} SBWDataBlockType;

/**
* The modes in which a given module/application can operate with respect to SBW
*/
typedef enum sbwmoduleMode
{
  SBWNormalMode = 0, /**< either not connected or only consuming services */
  SBWModuleMode = 1, /**< providing services */
  SBWRegisterMode = 2 /**< registering services */
} SBWModuleModeType;

/**
* The ways in which a given module can be managed by the broker.
* Uses standard encoding used by both by the API and the broker interface.
*/
typedef enum sbwmoduleManagementType
{
  SBW_UniqueModule = 0, /**< broker only creates one instance of the module and refers all requests to that instance.*/
  SBW_SelfManagedModule = 1 /**< broker creates a new instance for each module instance request */
  //SBW_SBWManagedModule = 2 /**< not currently used - as for self managed but will shutdown module if other module instances no longer reference the module instance. */
} SBWModuleManagementType;

#endif // DATABLOCKTYPE
