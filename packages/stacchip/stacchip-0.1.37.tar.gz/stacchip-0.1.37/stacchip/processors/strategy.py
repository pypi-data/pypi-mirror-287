import json
import os
import random
from datetime import datetime
from multiprocessing import Pool
from pathlib import Path
from urllib.parse import urlparse

import boto3
import geopandas as gp
import planetary_computer as pc
import pyarrow as pa
import pystac_client
from botocore.exceptions import ClientError
from geoarrow.pyarrow import io

from stacchip.indexer import ModisIndexer

STAC_API = "https://planetarycomputer.microsoft.com/api/stac/v1"
COLLECTION = "modis-09A1-061"
BANDS = [
    "sur_refl_b01",
    "sur_refl_b02",
    "sur_refl_b03",
    "sur_refl_b04",
    "sur_refl_b05",
    "sur_refl_b06",
    "sur_refl_b07",
    "sur_refl_qc_500m",
]
PLATFORM_NAME = "modis"
NODATA_VALUE = -28672
# Sinusoidal Tile Grid https://modis-land.gsfc.nasa.gov/MODLAND_grid.html
SIN_HORIZONTAL_RANGE = range(36)
SIN_VERTICAL_RANGE = range(18)


def tiles_with_at_least_one_result(i, j):

    catalog = pystac_client.Client.open(STAC_API, modifier=pc.sign_inplace)

    items = catalog.search(
        collections=[COLLECTION],
        query={
            "modis:vertical-tile": {
                "eq": i,
            },
            "modis:horizontal-tile": {
                "eq": j,
            },
        },
        max_items=1,
    )
    items = list(items.item_collection())

    if items:
        print(i, j)
        return i, j


# if __name__ == '__main__':
#     with Pool(16) as p:
#         indexes = p.starmap(tiles_with_at_least_one_result, grid)
#     print("done")
#     print(indexes)

# [None, (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (6, 2), (6, 3), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30), (6, 31), (7, 1), (7, 3), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (7, 33), (7, 34), (8, 0), (8, 1), (8, 2), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 30), (8, 31), (8, 32), (8, 33), (8, 34), (8, 35), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 16), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 25), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (9, 33), (9, 34), (9, 35), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 17), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (10, 34), (10, 35), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 8), (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (12, 11), (12, 12), (12, 13), (12, 16), (12, 17), (12, 19), (12, 20), (12, 24), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (13, 5), (13, 12), (13, 13), (13, 17), (13, 20), (13, 21), (13, 22), (13, 28), (13, 29), (13, 30), (13, 31), (14, 13), (14, 14), (14, 15), (14, 16), (14, 18), (14, 22), (14, 27), (14, 28), (15, 14), (15, 15), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (16, 14), (16, 15), (16, 16), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (17, 14), (17, 15), (17, 16), (17, 17), (17, 18), (17, 19), (17, 20), (17, 21)]
SIN_GRID_TILES = [
    (2, 9),
    (2, 10),
    (2, 11),
    (2, 12),
    (2, 13),
    (2, 14),
    (2, 15),
    (2, 16),
    (2, 17),
    (2, 18),
    (2, 19),
    (2, 20),
    (2, 21),
    (2, 22),
    (2, 23),
    (2, 24),
    (2, 25),
    (2, 26),
    (3, 6),
    (3, 7),
    (3, 8),
    (3, 9),
    (3, 10),
    (3, 11),
    (3, 12),
    (3, 13),
    (3, 14),
    (3, 15),
    (3, 17),
    (3, 18),
    (3, 19),
    (3, 20),
    (3, 21),
    (3, 22),
    (3, 23),
    (3, 24),
    (3, 25),
    (3, 26),
    (3, 27),
    (3, 28),
    (3, 29),
    (4, 8),
    (4, 9),
    (4, 10),
    (4, 11),
    (4, 12),
    (4, 13),
    (4, 14),
    (4, 17),
    (4, 18),
    (4, 19),
    (4, 20),
    (4, 21),
    (4, 22),
    (4, 23),
    (4, 24),
    (4, 25),
    (4, 26),
    (4, 27),
    (4, 28),
    (5, 7),
    (5, 8),
    (5, 9),
    (5, 10),
    (5, 11),
    (5, 12),
    (5, 15),
    (5, 16),
    (5, 17),
    (5, 18),
    (5, 19),
    (5, 20),
    (5, 21),
    (5, 22),
    (5, 23),
    (5, 24),
    (5, 25),
    (5, 26),
    (5, 27),
    (5, 28),
    (5, 29),
    (5, 30),
    (6, 2),
    (6, 3),
    (6, 7),
    (6, 8),
    (6, 9),
    (6, 10),
    (6, 11),
    (6, 16),
    (6, 17),
    (6, 18),
    (6, 19),
    (6, 20),
    (6, 21),
    (6, 22),
    (6, 23),
    (6, 24),
    (6, 25),
    (6, 26),
    (6, 27),
    (6, 28),
    (6, 29),
    (6, 30),
    (6, 31),
    (7, 1),
    (7, 3),
    (7, 7),
    (7, 8),
    (7, 9),
    (7, 10),
    (7, 11),
    (7, 12),
    (7, 15),
    (7, 16),
    (7, 17),
    (7, 18),
    (7, 19),
    (7, 20),
    (7, 21),
    (7, 22),
    (7, 23),
    (7, 24),
    (7, 25),
    (7, 26),
    (7, 27),
    (7, 28),
    (7, 29),
    (7, 30),
    (7, 31),
    (7, 32),
    (7, 33),
    (7, 34),
    (8, 0),
    (8, 1),
    (8, 2),
    (8, 8),
    (8, 9),
    (8, 10),
    (8, 11),
    (8, 12),
    (8, 13),
    (8, 16),
    (8, 17),
    (8, 18),
    (8, 19),
    (8, 20),
    (8, 21),
    (8, 22),
    (8, 23),
    (8, 25),
    (8, 26),
    (8, 27),
    (8, 28),
    (8, 29),
    (8, 30),
    (8, 31),
    (8, 32),
    (8, 33),
    (8, 34),
    (8, 35),
    (9, 0),
    (9, 1),
    (9, 2),
    (9, 3),
    (9, 4),
    (9, 8),
    (9, 9),
    (9, 10),
    (9, 11),
    (9, 12),
    (9, 13),
    (9, 14),
    (9, 16),
    (9, 18),
    (9, 19),
    (9, 20),
    (9, 21),
    (9, 22),
    (9, 23),
    (9, 25),
    (9, 27),
    (9, 28),
    (9, 29),
    (9, 30),
    (9, 31),
    (9, 32),
    (9, 33),
    (9, 34),
    (9, 35),
    (10, 0),
    (10, 1),
    (10, 2),
    (10, 3),
    (10, 4),
    (10, 5),
    (10, 10),
    (10, 11),
    (10, 12),
    (10, 13),
    (10, 14),
    (10, 17),
    (10, 19),
    (10, 20),
    (10, 21),
    (10, 22),
    (10, 23),
    (10, 27),
    (10, 28),
    (10, 29),
    (10, 30),
    (10, 31),
    (10, 32),
    (10, 33),
    (10, 34),
    (10, 35),
    (11, 1),
    (11, 2),
    (11, 3),
    (11, 4),
    (11, 5),
    (11, 6),
    (11, 8),
    (11, 10),
    (11, 11),
    (11, 12),
    (11, 13),
    (11, 14),
    (11, 15),
    (11, 19),
    (11, 20),
    (11, 21),
    (11, 22),
    (11, 23),
    (11, 27),
    (11, 28),
    (11, 29),
    (11, 30),
    (11, 31),
    (11, 32),
    (11, 33),
    (12, 11),
    (12, 12),
    (12, 13),
    (12, 16),
    (12, 17),
    (12, 19),
    (12, 20),
    (12, 24),
    (12, 27),
    (12, 28),
    (12, 29),
    (12, 30),
    (12, 31),
    (12, 32),
    (13, 5),
    (13, 12),
    (13, 13),
    (13, 17),
    (13, 20),
    (13, 21),
    (13, 22),
    (13, 28),
    (13, 29),
    (13, 30),
    (13, 31),
    (14, 13),
    (14, 14),
    (14, 15),
    (14, 16),
    (14, 18),
    (14, 22),
    (14, 27),
    (14, 28),
]

from multiprocessing import Pool

import numpy as np
import planetary_computer as pc
import pystac_client
import rasterio

SIN_GRID_TILES = []
for i in SIN_VERTICAL_RANGE:
    for j in SIN_HORIZONTAL_RANGE:
        SIN_GRID_TILES.append((i, j))


def evaluate_nodata(i, j):
    catalog = pystac_client.Client.open(STAC_API, modifier=pc.sign_inplace)
    items = catalog.search(
        collections=[COLLECTION],
        query={
            "modis:vertical-tile": {
                "eq": i,
            },
            "modis:horizontal-tile": {
                "eq": j,
            },
        },
        max_items=1,
    )
    item = list(items.item_collection())[0]

    with rasterio.open(item.assets["sur_refl_b01"].href) as src:
        data = src.read()

    nodata = np.sum(data == -28672)

    if nodata == 0:
        print(i, j)
        return i, j


if __name__ == "__main__":
    with Pool(16) as p:
        indexes = p.starmap(evaluate_nodata, SIN_GRID_TILES)
    print("done")
    print(indexes)

[
    (2, 12),
    (2, 13),
    (2, 14),
    (2, 15),
    (2, 16),
    (2, 17),
    (2, 18),
    (2, 19),
    (2, 20),
    (2, 21),
    (2, 22),
    (2, 23),
    (3, 9),
    (3, 11),
    (3, 12),
    (3, 13),
    (3, 14),
    (3, 15),
    (3, 17),
    (3, 18),
    (3, 19),
    (3, 20),
    (3, 21),
    (3, 22),
    (3, 23),
    (3, 24),
    (3, 25),
    (3, 26),
    (4, 8),
    (4, 10),
    (4, 11),
    (4, 12),
    (4, 13),
    (4, 14),
    (4, 17),
    (4, 18),
    (4, 19),
    (4, 20),
    (4, 21),
    (4, 22),
    (4, 23),
    (4, 24),
    (4, 25),
    (4, 26),
    (4, 27),
    (4, 28),
    (5, 7),
    (5, 8),
    (5, 9),
    (5, 10),
    (5, 11),
    (5, 12),
    (5, 15),
    (5, 16),
    (5, 17),
    (5, 18),
    (5, 19),
    (5, 20),
    (5, 21),
    (5, 23),
    (5, 24),
    (5, 25),
    (5, 26),
    (5, 27),
    (5, 28),
    (5, 29),
    (5, 30),
    (6, 3),
    (6, 7),
    (6, 8),
    (6, 9),
    (6, 10),
    (6, 11),
    (6, 16),
    (6, 17),
    (6, 18),
    (6, 19),
    (6, 20),
    (6, 21),
    (6, 22),
    (6, 23),
    (6, 24),
    (6, 25),
    (6, 26),
    (6, 27),
    (6, 28),
    (6, 29),
    (6, 30),
    (6, 31),
    (7, 3),
    (7, 7),
    (7, 8),
    (7, 9),
    (7, 10),
    (7, 11),
    (7, 15),
    (7, 16),
    (7, 17),
    (7, 18),
    (7, 19),
    (7, 20),
    (7, 21),
    (7, 22),
    (7, 23),
    (7, 24),
    (7, 25),
    (7, 26),
    (7, 27),
    (7, 28),
    (7, 29),
    (7, 30),
    (7, 31),
    (7, 32),
    (7, 33),
    (8, 1),
    (8, 2),
    (8, 8),
    (8, 9),
    (8, 10),
    (8, 11),
    (8, 12),
    (8, 13),
    (8, 16),
    (8, 18),
    (8, 19),
    (8, 20),
    (8, 21),
    (8, 22),
    (8, 23),
    (8, 25),
    (8, 26),
    (8, 27),
    (8, 28),
    (8, 29),
    (8, 30),
    (8, 31),
    (8, 32),
    (8, 33),
    (8, 34),
    (9, 1),
    (9, 2),
    (9, 3),
    (9, 4),
    (9, 8),
    (9, 9),
    (9, 10),
    (9, 11),
    (9, 12),
    (9, 13),
    (9, 14),
    (9, 16),
    (9, 19),
    (9, 21),
    (9, 22),
    (9, 23),
    (9, 25),
    (9, 27),
    (9, 28),
    (9, 29),
    (9, 30),
    (9, 31),
    (9, 32),
    (9, 33),
    (9, 34),
    (10, 2),
    (10, 3),
    (10, 4),
    (10, 5),
    (10, 10),
    (10, 11),
    (10, 12),
    (10, 13),
    (10, 14),
    (10, 17),
    (10, 19),
    (10, 20),
    (10, 21),
    (10, 22),
    (10, 23),
    (10, 27),
    (10, 28),
    (10, 29),
    (10, 30),
    (10, 31),
    (10, 32),
    (10, 33),
    (11, 3),
    (11, 4),
    (11, 5),
    (11, 6),
    (11, 8),
    (11, 10),
    (11, 11),
    (11, 12),
    (11, 13),
    (11, 14),
    (11, 15),
    (11, 19),
    (11, 20),
    (11, 21),
    (11, 22),
    (11, 23),
    (11, 27),
    (11, 28),
    (11, 29),
    (11, 30),
    (11, 31),
    (11, 32),
    (12, 11),
    (12, 12),
    (12, 13),
    (12, 16),
    (12, 17),
    (12, 19),
    (12, 20),
    (12, 24),
    (12, 27),
    (12, 28),
    (12, 29),
    (12, 30),
    (13, 12),
    (13, 13),
    (13, 17),
    (13, 20),
    (13, 21),
    (13, 22),
    (13, 28),
    (14, 13),
    (14, 14),
    (14, 15),
    (14, 16),
    (14, 18),
    (14, 22),
]


# chips = []
# import numpy as np
# from matplotlib import pyplot as plt

# from stacchip.chipper import Chipper

# # Instanciate the chipper
# assets = [
#     "sur_refl_b01",
#     "sur_refl_b03",
#     "sur_refl_b04",
# ]
# chipper = Chipper(indexer, assets=assets)

# # Get first chip for the "image" asset key
# # for chip_id in random.sample(range(0, len(chipper)), 80):
# for chip_id in range(0, len(chipper)):
#     x_index, y_index, chip = chipper[chip_id]
#     chips.append(chip)

# fig, axs = plt.subplots(
#     9, 9, gridspec_kw={"wspace": 0.01, "hspace": 0.01}, squeeze=True
# )

# for idx, ax in enumerate(axs.flatten()):
#     chip = chips[idx]
#     # Visualize the data
#     bla = np.array(
#         [
#             chip["sur_refl_b01"][0],
#             chip["sur_refl_b04"][0],
#             chip["sur_refl_b03"][0],
#         ]
#     )
#     bla = bla.swapaxes(0, 1).swapaxes(1, 2)
#     bla = np.clip(bla.astype("float32") / 2000, 0, 1)
#     ax.imshow(bla)
#     # ax.title = index.

# plt.tight_layout()
# plt.show()
