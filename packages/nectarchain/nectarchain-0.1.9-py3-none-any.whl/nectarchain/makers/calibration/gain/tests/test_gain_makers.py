# # Generated by CodiumAI
# from pathlib import Path
#
# import numpy as np
# import pytest
# from astropy.table import QTable
#
# from nectarchain.makers.calibration.gain.gain_makers import GainMaker
#
# pytest.skip(
#     "Some classes to be imported here were dropped from nectarchain,"
#     "skipping all these tests entirely",
#     allow_module_level=True,
# )
#
#
# class GainMakerforTest(GainMaker):
#     _reduced_name = "test"
#
#     def make():
#         pass
#
#
# @pytest.disable()
# class TestGainMaker:
#     # Tests that an instance of GainMaker can be created with a list of pixel ids as
#     # input.
#     def test_create_instance_with_pixel_ids(self):
#         pixel_ids = [1, 2, 3, 4, 5]
#         gain_maker = GainMakerforTest(pixel_ids)
#         assert isinstance(gain_maker, GainMakerforTest)
#         assert np.array_equal(gain_maker.pixels_id, np.array(pixel_ids))
#
#     # Tests that high gain values can be set and retrieved for all pixels.
#     def test_set_and_get_high_gain_values(self):
#         pixel_ids = [1, 2, 3, 4, 5]
#         gain_maker = GainMakerforTest(pixel_ids)
#         high_gain_values = np.array([0.5, 0.6, 0.7, 0.8, 0.9])
#         gain_maker._high_gain = high_gain_values
#         assert np.array_equal(gain_maker.high_gain, high_gain_values)
#
#     # Tests that low gain values can be set and retrieved for all pixels.
#     def test_set_and_get_low_gain_values(self):
#         pixel_ids = [1, 2, 3, 4, 5]
#         gain_maker = GainMakerforTest(pixel_ids)
#         low_gain_values = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
#         gain_maker._low_gain = low_gain_values
#         assert np.array_equal(gain_maker.low_gain, low_gain_values)
#
#     # Tests that the results can be saved to a file.
#     def test_save_results_to_file(self, tmp_path=Path(f"/tmp/{np.random.rand()}")):
#         pixel_ids = [1, 2, 3, 4, 5]
#         gain_maker = GainMakerforTest(pixel_ids)
#         high_gain_values = np.array([0.5, 0.6, 0.7, 0.8, 0.9])
#         gain_maker._high_gain = high_gain_values
#         low_gain_values = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
#         gain_maker._low_gain = low_gain_values
#         gain_maker.save(tmp_path)
#         assert (tmp_path / "results_test.ecsv").exists()
#
#     # Tests that a copy of the result table can be obtained.
#     def test_get_copy_of_result_table(self):
#         pixel_ids = [1, 2, 3, 4, 5]
#         gain_maker = GainMakerforTest(pixel_ids)
#         result_table_copy = gain_maker.results
#         assert isinstance(result_table_copy, QTable)
#         assert np.array_equal(
#             result_table_copy[GainMakerforTest.PIXELS_ID_COLUMN], np.array(pixel_ids)
#         )
