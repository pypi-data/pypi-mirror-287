Metadata-Version: 2.1
Name: basicbedrock
Version: 0.2.4
Summary: An abstraction layer for AWS Bedrock.  Removes the need to keep track of response/request schemas.
Author-email: cyberitech <mattsod@kaizencyber.io>
Maintainer-email: cyberitech <mattsod@kaizencyber.io>
License: Copyright 2024 
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Project-URL: Homepage, https://github.com/cyberitech/BasicBedrock
Project-URL: Issues, https://github.com/cyberitech/BasicBedrock/issues
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: boto3>=1.34.94
Requires-Dist: pydantic>=2.6.0

# BasicBedrock
AWS Bedrock provides a variety of foundational models to AWS customers.  Each model family requires their own request structure, yet the underlying semantics are roughly common; there is always a field for the textual input prompt, and often there are fields to define maximum desired output, stop words, P, K and Temperature values.

This package aims to abstract away all of that. 

For model requests, top_p, top_k, temp, max_tokens, stop_words and prompts are all abstracted away.  For model responses, the answer itself is extracted, but the caller can also get the raw dict object passed back by boto3 if they wish.

## Design Principles
I designed this around the following design principles:
 * If a paramater is specified, it will be used whenever possible.  If not possible, it is (silently) ignored.
 * If a parameter is not specified, but it is required, a default parameter will be used (see below)
 * If a parameter is required to be in a certain format (such as a prompt) this is done by default
 * If multiple parameters are specified (stop_words), but only 0 or 1 are valid, then the first valid one will be used. If none are valid, then the default will be used

### Default Parameters
There is no default prompt.  The user must always provide their prompt for every call to invoke().  Unless the caller specifies otherwise, the following defaults are used:
```python
top_p: float = 0.5
top_k: int = 125
temp: float = 0.5
max_tokens: int = 250
stop_words: List[str] = []
```


## Usage
### Installation
```bash
pip install basicbedrock
```

### Example
Rather simple to use.  See [examples](./examples) for some usage examples.

```python
import boto3
from basicbedrock import BasicBedrock

session = boto3.session.Session(profile_name="default",region_name="us-west-2")
bb = BasicBedrock(session=session)
model = "anthropic.claude-3-sonnet-20240229-v1:0"
prompt = "Tell me about flowers"
r = bb.invoke(model, prompt)
print(r.get_answer())
```

