from typing import Annotated, Mapping, overload

import _frenetix.trajectory_functions
from numpy.typing import ArrayLike

import _frenetix


class CalculateAccelerationCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateCollisionProbabilityFast(_frenetix.trajectory_functions.CostStrategy):
    @overload
    def __init__(self, function_name: str, cost_weight: float, predictions: Mapping[int, _frenetix.PredictedObject], vehicleLength: float, vehicleWidth: float) -> None: ...

    @overload
    def __init__(self, function_name: str, cost_weight: float, predictions: Mapping[int, _frenetix.PredictedObject], vehicle_length: float, vehicle_width: float, wheelbase_rear: float, off_center_weight: float = 0.5) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

    def printPredictions(self) -> None: ...

class CalculateCollisionProbabilityMahalanobis(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, predictions: Mapping[int, _frenetix.PredictedObject]) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateDistanceToObstacleCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, obstacles: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='None')]) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateDistanceToReferencePathCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateJerkCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLaneCenterOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLateralAccelerationCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLateralJerkCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLateralVelocityCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLongitudinalAccelerationCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLongitudinalJerkCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateLongitudinalVelocityCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateNegativeAccelerationCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateNegativeOrientationOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateNegativeVelocityOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, desiredSpeed: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateOrientationOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculatePositiveAccelerationCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculatePositiveOrientationOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculatePositiveVelocityOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, desiredSpeed: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateSteeringAngleCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateSteeringRateCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateVelocityOffsetCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float, desiredSpeed: float, dT: float, t_min: float, limit_to_t_min: bool, norm_order: int) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...

class CalculateYawCost(_frenetix.trajectory_functions.CostStrategy):
    def __init__(self, function_name: str, cost_weight: float) -> None: ...

    def evaluate_trajectory(self, trajectory: _frenetix.TrajectorySample) -> None: ...
