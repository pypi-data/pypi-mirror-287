# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sql_router_sdk
else:
    import _sql_router_sdk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _sql_router_sdk.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _sql_router_sdk.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sql_router_sdk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sql_router_sdk.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _sql_router_sdk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sql_router_sdk:
_sql_router_sdk.SwigPyIterator_swigregister(SwigPyIterator)

class VectorUint32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.VectorUint32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.VectorUint32___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.VectorUint32___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _sql_router_sdk.VectorUint32___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _sql_router_sdk.VectorUint32___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.VectorUint32___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _sql_router_sdk.VectorUint32___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.VectorUint32___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _sql_router_sdk.VectorUint32___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.VectorUint32___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _sql_router_sdk.VectorUint32_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _sql_router_sdk.VectorUint32_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.VectorUint32_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _sql_router_sdk.VectorUint32_size(self)

    def swap(self, v: "VectorUint32") -> "void":
        return _sql_router_sdk.VectorUint32_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _sql_router_sdk.VectorUint32_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _sql_router_sdk.VectorUint32_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _sql_router_sdk.VectorUint32_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _sql_router_sdk.VectorUint32_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.VectorUint32_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _sql_router_sdk.VectorUint32_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.VectorUint32_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _sql_router_sdk.VectorUint32_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.VectorUint32_swiginit(self, _sql_router_sdk.new_VectorUint32(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _sql_router_sdk.VectorUint32_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _sql_router_sdk.VectorUint32_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _sql_router_sdk.VectorUint32_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _sql_router_sdk.VectorUint32_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.VectorUint32_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.VectorUint32_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _sql_router_sdk.VectorUint32_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _sql_router_sdk.VectorUint32_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_VectorUint32

# Register VectorUint32 in _sql_router_sdk:
_sql_router_sdk.VectorUint32_swigregister(VectorUint32)

class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.VectorString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.VectorString___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _sql_router_sdk.VectorString___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _sql_router_sdk.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.VectorString___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _sql_router_sdk.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.VectorString___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _sql_router_sdk.VectorString___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.VectorString___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _sql_router_sdk.VectorString_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _sql_router_sdk.VectorString_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.VectorString_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _sql_router_sdk.VectorString_size(self)

    def swap(self, v: "VectorString") -> "void":
        return _sql_router_sdk.VectorString_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _sql_router_sdk.VectorString_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _sql_router_sdk.VectorString_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _sql_router_sdk.VectorString_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _sql_router_sdk.VectorString_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.VectorString_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _sql_router_sdk.VectorString_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.VectorString_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _sql_router_sdk.VectorString_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.VectorString_swiginit(self, _sql_router_sdk.new_VectorString(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _sql_router_sdk.VectorString_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _sql_router_sdk.VectorString_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _sql_router_sdk.VectorString_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _sql_router_sdk.VectorString_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.VectorString_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.VectorString_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _sql_router_sdk.VectorString_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _sql_router_sdk.VectorString_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_VectorString

# Register VectorString in _sql_router_sdk:
_sql_router_sdk.VectorString_swigregister(VectorString)

class BasicRouterOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_BasicRouterOptions
    enable_debug = property(_sql_router_sdk.BasicRouterOptions_enable_debug_get, _sql_router_sdk.BasicRouterOptions_enable_debug_set)
    max_sql_cache_size = property(_sql_router_sdk.BasicRouterOptions_max_sql_cache_size_get, _sql_router_sdk.BasicRouterOptions_max_sql_cache_size_set)
    request_timeout = property(_sql_router_sdk.BasicRouterOptions_request_timeout_get, _sql_router_sdk.BasicRouterOptions_request_timeout_set)
    glog_level = property(_sql_router_sdk.BasicRouterOptions_glog_level_get, _sql_router_sdk.BasicRouterOptions_glog_level_set)
    glog_dir = property(_sql_router_sdk.BasicRouterOptions_glog_dir_get, _sql_router_sdk.BasicRouterOptions_glog_dir_set)
    user = property(_sql_router_sdk.BasicRouterOptions_user_get, _sql_router_sdk.BasicRouterOptions_user_set)
    password = property(_sql_router_sdk.BasicRouterOptions_password_get, _sql_router_sdk.BasicRouterOptions_password_set)

    def __init__(self):
        _sql_router_sdk.BasicRouterOptions_swiginit(self, _sql_router_sdk.new_BasicRouterOptions())

# Register BasicRouterOptions in _sql_router_sdk:
_sql_router_sdk.BasicRouterOptions_swigregister(BasicRouterOptions)

class SQLRouterOptions(BasicRouterOptions):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    zk_cluster = property(_sql_router_sdk.SQLRouterOptions_zk_cluster_get, _sql_router_sdk.SQLRouterOptions_zk_cluster_set)
    zk_path = property(_sql_router_sdk.SQLRouterOptions_zk_path_get, _sql_router_sdk.SQLRouterOptions_zk_path_set)
    zk_session_timeout = property(_sql_router_sdk.SQLRouterOptions_zk_session_timeout_get, _sql_router_sdk.SQLRouterOptions_zk_session_timeout_set)
    spark_conf_path = property(_sql_router_sdk.SQLRouterOptions_spark_conf_path_get, _sql_router_sdk.SQLRouterOptions_spark_conf_path_set)
    zk_log_level = property(_sql_router_sdk.SQLRouterOptions_zk_log_level_get, _sql_router_sdk.SQLRouterOptions_zk_log_level_set)
    zk_log_file = property(_sql_router_sdk.SQLRouterOptions_zk_log_file_get, _sql_router_sdk.SQLRouterOptions_zk_log_file_set)
    zk_auth_schema = property(_sql_router_sdk.SQLRouterOptions_zk_auth_schema_get, _sql_router_sdk.SQLRouterOptions_zk_auth_schema_set)
    zk_cert = property(_sql_router_sdk.SQLRouterOptions_zk_cert_get, _sql_router_sdk.SQLRouterOptions_zk_cert_set)

    def to_string(self) -> "std::string":
        return _sql_router_sdk.SQLRouterOptions_to_string(self)

    def __init__(self):
        _sql_router_sdk.SQLRouterOptions_swiginit(self, _sql_router_sdk.new_SQLRouterOptions())
    __swig_destroy__ = _sql_router_sdk.delete_SQLRouterOptions

# Register SQLRouterOptions in _sql_router_sdk:
_sql_router_sdk.SQLRouterOptions_swigregister(SQLRouterOptions)

class StandaloneOptions(BasicRouterOptions):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.StandaloneOptions_swiginit(self, _sql_router_sdk.new_StandaloneOptions(*args))
    host = property(_sql_router_sdk.StandaloneOptions_host_get, _sql_router_sdk.StandaloneOptions_host_set)
    port = property(_sql_router_sdk.StandaloneOptions_port_get, _sql_router_sdk.StandaloneOptions_port_set)
    __swig_destroy__ = _sql_router_sdk.delete_StandaloneOptions

# Register StandaloneOptions in _sql_router_sdk:
_sql_router_sdk.StandaloneOptions_swigregister(StandaloneOptions)

class ExplainInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ExplainInfo

    def GetInputSchema(self) -> "::hybridse::sdk::Schema const &":
        return _sql_router_sdk.ExplainInfo_GetInputSchema(self)

    def GetOutputSchema(self) -> "::hybridse::sdk::Schema const &":
        return _sql_router_sdk.ExplainInfo_GetOutputSchema(self)

    def GetLogicalPlan(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetLogicalPlan(self)

    def GetPhysicalPlan(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetPhysicalPlan(self)

    def GetIR(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetIR(self)

    def GetRequestName(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetRequestName(self)

    def GetRequestDbName(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetRequestDbName(self)

# Register ExplainInfo in _sql_router_sdk:
_sql_router_sdk.ExplainInfo_swigregister(ExplainInfo)

class DAGNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.DAGNode_swiginit(self, _sql_router_sdk.new_DAGNode(*args))
    name = property(_sql_router_sdk.DAGNode_name_get, _sql_router_sdk.DAGNode_name_set)
    sql = property(_sql_router_sdk.DAGNode_sql_get, _sql_router_sdk.DAGNode_sql_set)
    producers = property(_sql_router_sdk.DAGNode_producers_get, _sql_router_sdk.DAGNode_producers_set)

    def __eq__(self, op: "DAGNode") -> "bool":
        return _sql_router_sdk.DAGNode___eq__(self, op)

    def DebugString(self) -> "std::string":
        return _sql_router_sdk.DAGNode_DebugString(self)
    __swig_destroy__ = _sql_router_sdk.delete_DAGNode

# Register DAGNode in _sql_router_sdk:
_sql_router_sdk.DAGNode_swigregister(DAGNode)

class QueryFuture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_QueryFuture

    def GetResultSet(self, status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.QueryFuture_GetResultSet(self, status)

    def IsDone(self) -> "bool":
        return _sql_router_sdk.QueryFuture_IsDone(self)

# Register QueryFuture in _sql_router_sdk:
_sql_router_sdk.QueryFuture_swigregister(QueryFuture)

class SQLRouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_SQLRouter

    def ShowDB(self, dbs: "VectorString", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_ShowDB(self, dbs, status)

    def GetAllTables(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _sql_router_sdk.SQLRouter_GetAllTables(self)

    def CreateDB(self, db: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_CreateDB(self, db, status)

    def DropDB(self, db: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_DropDB(self, db, status)

    def ExecuteDDL(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_ExecuteDDL(self, db, sql, status)

    def ExecuteInsert(self, *args) -> "bool":
        return _sql_router_sdk.SQLRouter_ExecuteInsert(self, *args)

    def ExecuteDelete(self, row: "std::shared_ptr< openmldb::sdk::SQLDeleteRow >", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_ExecuteDelete(self, row, status)

    def GetTableReader(self) -> "std::shared_ptr< openmldb::sdk::TableReader >":
        return _sql_router_sdk.SQLRouter_GetTableReader(self)

    def Explain(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::ExplainInfo >":
        return _sql_router_sdk.SQLRouter_Explain(self, db, sql, status)

    def GetRequestRow(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::SQLRequestRow >":
        return _sql_router_sdk.SQLRouter_GetRequestRow(self, db, sql, status)

    def GetRequestRowByProcedure(self, db: "std::string const &", sp_name: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::SQLRequestRow >":
        return _sql_router_sdk.SQLRouter_GetRequestRowByProcedure(self, db, sp_name, status)

    def GetInsertRow(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLRouter_GetInsertRow(self, db, sql, status)

    def GetInsertRows(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::SQLInsertRows >":
        return _sql_router_sdk.SQLRouter_GetInsertRows(self, db, sql, status)

    def GetDeleteRow(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::SQLDeleteRow >":
        return _sql_router_sdk.SQLRouter_GetDeleteRow(self, db, sql, status)

    def ExecuteSQLRequest(self, db: "std::string const &", sql: "std::string const &", row: "std::shared_ptr< openmldb::sdk::SQLRequestRow >", status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteSQLRequest(self, db, sql, row, status)

    def ExecuteSQL(self, *args) -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteSQL(self, *args)

    def ExecuteSQLParameterized(self, db: "std::string const &", sql: "std::string const &", parameter: "std::shared_ptr< openmldb::sdk::SQLRequestRow >", status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteSQLParameterized(self, db, sql, parameter, status)

    def ExecuteSQLBatchRequest(self, db: "std::string const &", sql: "std::string const &", row_batch: "std::shared_ptr< openmldb::sdk::SQLRequestRowBatch >", status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteSQLBatchRequest(self, db, sql, row_batch, status)

    def RefreshCatalog(self) -> "bool":
        return _sql_router_sdk.SQLRouter_RefreshCatalog(self)

    def ShowProcedure(self, db: "std::string const &", sp_name: "std::string const &", status: "Status") -> "std::shared_ptr< hybridse::sdk::ProcedureInfo >":
        return _sql_router_sdk.SQLRouter_ShowProcedure(self, db, sp_name, status)

    def CallProcedure(self, *args) -> "std::shared_ptr< openmldb::sdk::QueryFuture >":
        return _sql_router_sdk.SQLRouter_CallProcedure(self, *args)

    def CallSQLBatchRequestProcedure(self, *args) -> "std::shared_ptr< openmldb::sdk::QueryFuture >":
        return _sql_router_sdk.SQLRouter_CallSQLBatchRequestProcedure(self, *args)

    def GetTableSchema(self, db: "std::string const &", table_name: "std::string const &") -> "std::shared_ptr< hybridse::sdk::Schema >":
        return _sql_router_sdk.SQLRouter_GetTableSchema(self, db, table_name)

    def GetTableNames(self, db: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _sql_router_sdk.SQLRouter_GetTableNames(self, db)

    def GetTableInfo(self, db: "std::string const &", table: "std::string const &") -> "::openmldb::nameserver::TableInfo":
        return _sql_router_sdk.SQLRouter_GetTableInfo(self, db, table)

    def UpdateOfflineTableInfo(self, info: "::openmldb::nameserver::TableInfo const &") -> "bool":
        return _sql_router_sdk.SQLRouter_UpdateOfflineTableInfo(self, info)

    def ShowJobs(self, only_unfinished: "bool const", job_infos: "std::vector< ::openmldb::taskmanager::JobInfo,std::allocator< ::openmldb::taskmanager::JobInfo > > *") -> "::openmldb::base::Status":
        return _sql_router_sdk.SQLRouter_ShowJobs(self, only_unfinished, job_infos)

    def ShowJob(self, id: "int const", job_info: "::openmldb::taskmanager::JobInfo *") -> "::openmldb::base::Status":
        return _sql_router_sdk.SQLRouter_ShowJob(self, id, job_info)

    def StopJob(self, id: "int const", job_info: "::openmldb::taskmanager::JobInfo *") -> "::openmldb::base::Status":
        return _sql_router_sdk.SQLRouter_StopJob(self, id, job_info)

    def ExecuteOfflineQuery(self, db: "std::string const &", sql: "std::string const &", is_sync_job: "bool", job_timeout: "int", status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteOfflineQuery(self, db, sql, is_sync_job, job_timeout, status)

    def GetJobLog(self, id: "int", status: "Status") -> "std::string":
        return _sql_router_sdk.SQLRouter_GetJobLog(self, id, status)

    def NotifyTableChange(self) -> "bool":
        return _sql_router_sdk.SQLRouter_NotifyTableChange(self)

    def IsOnlineMode(self) -> "bool":
        return _sql_router_sdk.SQLRouter_IsOnlineMode(self)

    def GetDatabase(self) -> "std::string":
        return _sql_router_sdk.SQLRouter_GetDatabase(self)

    def SQLToDAG(self, query: "std::string const &", status: "Status") -> "std::shared_ptr< openmldb::sdk::DAGNode >":
        return _sql_router_sdk.SQLRouter_SQLToDAG(self, query, status)

# Register SQLRouter in _sql_router_sdk:
_sql_router_sdk.SQLRouter_swigregister(SQLRouter)


def NewClusterSQLRouter(options: "SQLRouterOptions") -> "std::shared_ptr< openmldb::sdk::SQLRouter >":
    return _sql_router_sdk.NewClusterSQLRouter(options)

def NewStandaloneSQLRouter(options: "StandaloneOptions") -> "std::shared_ptr< openmldb::sdk::SQLRouter >":
    return _sql_router_sdk.NewStandaloneSQLRouter(options)

def GenDDL(sql: "std::string const &", schemas: "TableColumnDescPairVector") -> "std::vector< std::string,std::allocator< std::string > >":
    return _sql_router_sdk.GenDDL(sql, schemas)

def GenOutputSchema(sql: "std::string const &", db: "std::string const &", schemas: "DBTableColumnDescPairVector") -> "std::shared_ptr< hybridse::sdk::Schema >":
    return _sql_router_sdk.GenOutputSchema(sql, db, schemas)

def ValidateSQLInBatch(sql: "std::string const &", db: "std::string const &", schemas: "DBTableColumnDescPairVector") -> "std::vector< std::string,std::allocator< std::string > >":
    return _sql_router_sdk.ValidateSQLInBatch(sql, db, schemas)

def ValidateSQLInRequest(sql: "std::string const &", db: "std::string const &", schemas: "DBTableColumnDescPairVector") -> "std::vector< std::string,std::allocator< std::string > >":
    return _sql_router_sdk.ValidateSQLInRequest(sql, db, schemas)

def GetDependentTables(sql: "std::string const &", db: "std::string const &", schemas: "DBTableColumnDescPairVector") -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >":
    return _sql_router_sdk.GetDependentTables(sql, db, schemas)
kTypeBool = _sql_router_sdk.kTypeBool
kTypeInt16 = _sql_router_sdk.kTypeInt16
kTypeInt32 = _sql_router_sdk.kTypeInt32
kTypeInt64 = _sql_router_sdk.kTypeInt64
kTypeFloat = _sql_router_sdk.kTypeFloat
kTypeDouble = _sql_router_sdk.kTypeDouble
kTypeString = _sql_router_sdk.kTypeString
kTypeDate = _sql_router_sdk.kTypeDate
kTypeTimestamp = _sql_router_sdk.kTypeTimestamp
kTypeUnknow = _sql_router_sdk.kTypeUnknow

def DataTypeName(type: "hybridse::sdk::DataType const &") -> "std::string const":
    return _sql_router_sdk.DataTypeName(type)
class Schema(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.Schema_swiginit(self, _sql_router_sdk.new_Schema())
    __swig_destroy__ = _sql_router_sdk.delete_Schema

    def GetColumnCnt(self) -> "int32_t":
        return _sql_router_sdk.Schema_GetColumnCnt(self)

    def GetColumnName(self, index: "uint32_t") -> "std::string const &":
        return _sql_router_sdk.Schema_GetColumnName(self, index)

    def GetColumnType(self, index: "uint32_t") -> "hybridse::sdk::DataType const":
        return _sql_router_sdk.Schema_GetColumnType(self, index)

    def IsColumnNotNull(self, index: "uint32_t") -> "bool const":
        return _sql_router_sdk.Schema_IsColumnNotNull(self, index)

    def IsConstant(self, index: "uint32_t") -> "bool const":
        return _sql_router_sdk.Schema_IsConstant(self, index)

# Register Schema in _sql_router_sdk:
_sql_router_sdk.Schema_swigregister(Schema)

class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.Status_swiginit(self, _sql_router_sdk.new_Status(*args))

    def IsOK(self) -> "bool":
        return _sql_router_sdk.Status_IsOK(self)

    def SetOK(self) -> "void":
        return _sql_router_sdk.Status_SetOK(self)

    def SetCode(self, c: "int") -> "void":
        return _sql_router_sdk.Status_SetCode(self, c)

    def SetMsg(self, new_msg: "absl::string_view") -> "void":
        return _sql_router_sdk.Status_SetMsg(self, new_msg)

    def SetTraces(self, new_trace: "absl::string_view") -> "void":
        return _sql_router_sdk.Status_SetTraces(self, new_trace)

    def Prepend(self, pre: "absl::string_view") -> "void":
        return _sql_router_sdk.Status_Prepend(self, pre)

    def Append(self, *args) -> "void":
        return _sql_router_sdk.Status_Append(self, *args)

    def CloneAndPrepend(self, pre_msg: "absl::string_view") -> "hybridse::sdk::Status":
        return _sql_router_sdk.Status_CloneAndPrepend(self, pre_msg)

    def ToString(self) -> "std::string":
        return _sql_router_sdk.Status_ToString(self)
    code = property(_sql_router_sdk.Status_code_get, _sql_router_sdk.Status_code_set)
    msg = property(_sql_router_sdk.Status_msg_get, _sql_router_sdk.Status_msg_set)
    trace = property(_sql_router_sdk.Status_trace_get, _sql_router_sdk.Status_trace_set)
    __swig_destroy__ = _sql_router_sdk.delete_Status

# Register Status in _sql_router_sdk:
_sql_router_sdk.Status_swigregister(Status)

class Table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.Table_swiginit(self, _sql_router_sdk.new_Table())
    __swig_destroy__ = _sql_router_sdk.delete_Table

    def GetName(self) -> "std::string const &":
        return _sql_router_sdk.Table_GetName(self)

    def GetCatalog(self) -> "std::string const &":
        return _sql_router_sdk.Table_GetCatalog(self)

    def GetCreateTime(self) -> "uint64_t":
        return _sql_router_sdk.Table_GetCreateTime(self)

    def GetSchema(self) -> "std::shared_ptr< hybridse::sdk::Schema > const":
        return _sql_router_sdk.Table_GetSchema(self)

# Register Table in _sql_router_sdk:
_sql_router_sdk.Table_swigregister(Table)

class ColumnTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.ColumnTypes_swiginit(self, _sql_router_sdk.new_ColumnTypes())

    def AddColumnType(self, type: "hybridse::sdk::DataType") -> "void":
        return _sql_router_sdk.ColumnTypes_AddColumnType(self, type)

    def GetColumnType(self, idx: "size_t") -> "hybridse::sdk::DataType const":
        return _sql_router_sdk.ColumnTypes_GetColumnType(self, idx)

    def GetTypeSize(self) -> "size_t const":
        return _sql_router_sdk.ColumnTypes_GetTypeSize(self)
    __swig_destroy__ = _sql_router_sdk.delete_ColumnTypes

# Register ColumnTypes in _sql_router_sdk:
_sql_router_sdk.ColumnTypes_swigregister(ColumnTypes)

class TableSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.TableSet_swiginit(self, _sql_router_sdk.new_TableSet())
    __swig_destroy__ = _sql_router_sdk.delete_TableSet

    def Next(self) -> "bool":
        return _sql_router_sdk.TableSet_Next(self)

    def GetTable(self) -> "std::shared_ptr< hybridse::sdk::Table > const":
        return _sql_router_sdk.TableSet_GetTable(self)

    def Size(self) -> "int32_t":
        return _sql_router_sdk.TableSet_Size(self)

# Register TableSet in _sql_router_sdk:
_sql_router_sdk.TableSet_swigregister(TableSet)

kUnknow = _sql_router_sdk.kUnknow
kReqProcedure = _sql_router_sdk.kReqProcedure
kReqDeployment = _sql_router_sdk.kReqDeployment
class ProcedureInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ProcedureInfo

    def GetDbName(self) -> "std::string const &":
        return _sql_router_sdk.ProcedureInfo_GetDbName(self)

    def GetSpName(self) -> "std::string const &":
        return _sql_router_sdk.ProcedureInfo_GetSpName(self)

    def GetSql(self) -> "std::string const &":
        return _sql_router_sdk.ProcedureInfo_GetSql(self)

    def GetInputSchema(self) -> "hybridse::sdk::Schema const &":
        return _sql_router_sdk.ProcedureInfo_GetInputSchema(self)

    def GetOutputSchema(self) -> "hybridse::sdk::Schema const &":
        return _sql_router_sdk.ProcedureInfo_GetOutputSchema(self)

    def GetTables(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _sql_router_sdk.ProcedureInfo_GetTables(self)

    def GetDbs(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _sql_router_sdk.ProcedureInfo_GetDbs(self)

    def GetMainTable(self) -> "std::string const &":
        return _sql_router_sdk.ProcedureInfo_GetMainTable(self)

    def GetMainDb(self) -> "std::string const &":
        return _sql_router_sdk.ProcedureInfo_GetMainDb(self)

    def GetType(self) -> "hybridse::sdk::ProcedureType":
        return _sql_router_sdk.ProcedureInfo_GetType(self)

    def GetOption(self, *args) -> "std::unordered_map< std::string,std::string > const *":
        return _sql_router_sdk.ProcedureInfo_GetOption(self, *args)

    def GetRouterCol(self) -> "int":
        return _sql_router_sdk.ProcedureInfo_GetRouterCol(self)

# Register ProcedureInfo in _sql_router_sdk:
_sql_router_sdk.ProcedureInfo_swigregister(ProcedureInfo)

class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_sql_router_sdk.Date_year_get, _sql_router_sdk.Date_year_set)
    month = property(_sql_router_sdk.Date_month_get, _sql_router_sdk.Date_month_set)
    day = property(_sql_router_sdk.Date_day_get, _sql_router_sdk.Date_day_set)

    def __init__(self):
        _sql_router_sdk.Date_swiginit(self, _sql_router_sdk.new_Date())
    __swig_destroy__ = _sql_router_sdk.delete_Date

# Register Date in _sql_router_sdk:
_sql_router_sdk.Date_swigregister(Date)

class ResultSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ResultSet

    def Reset(self) -> "bool":
        return _sql_router_sdk.ResultSet_Reset(self)

    def Next(self) -> "bool":
        return _sql_router_sdk.ResultSet_Next(self)

    def GetString(self, index: "uint32_t", val: "std::string *") -> "bool":
        return _sql_router_sdk.ResultSet_GetString(self, index, val)

    def GetStringUnsafe(self, index: "int") -> "std::string":
        return _sql_router_sdk.ResultSet_GetStringUnsafe(self, index)

    def GetAsString(self, idx: "uint32_t", val: "std::string &") -> "bool const":
        return _sql_router_sdk.ResultSet_GetAsString(self, idx, val)

    def GetAsStringUnsafe(self, *args) -> "std::string const":
        return _sql_router_sdk.ResultSet_GetAsStringUnsafe(self, *args)

    def GetRowString(self) -> "std::string":
        return _sql_router_sdk.ResultSet_GetRowString(self)

    def GetBool(self, index: "uint32_t", result: "bool *") -> "bool":
        return _sql_router_sdk.ResultSet_GetBool(self, index, result)

    def GetBoolUnsafe(self, index: "int") -> "bool":
        return _sql_router_sdk.ResultSet_GetBoolUnsafe(self, index)

    def GetChar(self, index: "uint32_t", result: "char *") -> "bool":
        return _sql_router_sdk.ResultSet_GetChar(self, index, result)

    def GetCharUnsafe(self, index: "int") -> "char":
        return _sql_router_sdk.ResultSet_GetCharUnsafe(self, index)

    def GetInt16(self, index: "uint32_t", result: "int16_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt16(self, index, result)

    def GetInt16Unsafe(self, index: "int") -> "short":
        return _sql_router_sdk.ResultSet_GetInt16Unsafe(self, index)

    def GetInt32(self, index: "uint32_t", result: "int32_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt32(self, index, result)

    def GetInt32Unsafe(self, index: "int") -> "int":
        return _sql_router_sdk.ResultSet_GetInt32Unsafe(self, index)

    def GetInt64(self, index: "uint32_t", result: "int64_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt64(self, index, result)

    def GetInt64Unsafe(self, index: "int") -> "int64_t":
        return _sql_router_sdk.ResultSet_GetInt64Unsafe(self, index)

    def GetFloat(self, index: "uint32_t", result: "float *") -> "bool":
        return _sql_router_sdk.ResultSet_GetFloat(self, index, result)

    def GetFloatUnsafe(self, index: "int") -> "float":
        return _sql_router_sdk.ResultSet_GetFloatUnsafe(self, index)

    def GetDouble(self, index: "uint32_t", result: "double *") -> "bool":
        return _sql_router_sdk.ResultSet_GetDouble(self, index, result)

    def GetDoubleUnsafe(self, index: "int") -> "double":
        return _sql_router_sdk.ResultSet_GetDoubleUnsafe(self, index)

    def GetDate(self, *args) -> "bool":
        return _sql_router_sdk.ResultSet_GetDate(self, *args)

    def GetStructDateUnsafe(self, index: "int32_t") -> "hybridse::sdk::Date":
        return _sql_router_sdk.ResultSet_GetStructDateUnsafe(self, index)

    def GetDateUnsafe(self, index: "uint32_t") -> "int32_t":
        return _sql_router_sdk.ResultSet_GetDateUnsafe(self, index)

    def GetTime(self, index: "uint32_t", mills: "int64_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetTime(self, index, mills)

    def GetTimeUnsafe(self, index: "int") -> "int64_t":
        return _sql_router_sdk.ResultSet_GetTimeUnsafe(self, index)

    def GetSchema(self) -> "hybridse::sdk::Schema const *":
        return _sql_router_sdk.ResultSet_GetSchema(self)

    def IsNULL(self, index: "int") -> "bool":
        return _sql_router_sdk.ResultSet_IsNULL(self, index)

    def Size(self) -> "int32_t":
        return _sql_router_sdk.ResultSet_Size(self)

    def CopyTo(self, buf: "hybridse::sdk::ByteArrayPtr") -> "void":
        return _sql_router_sdk.ResultSet_CopyTo(self, buf)

    def GetDataLength(self) -> "int32_t":
        return _sql_router_sdk.ResultSet_GetDataLength(self)

# Register ResultSet in _sql_router_sdk:
_sql_router_sdk.ResultSet_swigregister(ResultSet)

class SQLRequestRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.SQLRequestRow_swiginit(self, _sql_router_sdk.new_SQLRequestRow(*args))
    __swig_destroy__ = _sql_router_sdk.delete_SQLRequestRow

    def Init(self, str_length: "int32_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_Init(self, str_length)

    def AppendBool(self, val: "bool") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendBool(self, val)

    def AppendInt32(self, val: "int32_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt32(self, val)

    def AppendInt16(self, val: "int16_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt16(self, val)

    def AppendInt64(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt64(self, val)

    def AppendTimestamp(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendTimestamp(self, val)

    def AppendDate(self, *args) -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendDate(self, *args)

    def AppendFloat(self, val: "float") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendFloat(self, val)

    def AppendDouble(self, val: "double") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendDouble(self, val)

    def AppendString(self, *args) -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendString(self, *args)

    def AppendNULL(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendNULL(self)

    def Build(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_Build(self)

    def OK(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_OK(self)

    def GetRow(self) -> "std::string const &":
        return _sql_router_sdk.SQLRequestRow_GetRow(self)

    def GetSchema(self) -> "std::shared_ptr< hybridse::sdk::Schema > const":
        return _sql_router_sdk.SQLRequestRow_GetSchema(self)

    def GetRecordVal(self, col: "std::string const &", val: "std::string *") -> "bool":
        return _sql_router_sdk.SQLRequestRow_GetRecordVal(self, col, val)

    @staticmethod
    def CreateSQLRequestRowFromColumnTypes(types: "std::shared_ptr< hybridse::sdk::ColumnTypes >") -> "std::shared_ptr< openmldb::sdk::SQLRequestRow >":
        return _sql_router_sdk.SQLRequestRow_CreateSQLRequestRowFromColumnTypes(types)

# Register SQLRequestRow in _sql_router_sdk:
_sql_router_sdk.SQLRequestRow_swigregister(SQLRequestRow)

def SQLRequestRow_CreateSQLRequestRowFromColumnTypes(types: "std::shared_ptr< hybridse::sdk::ColumnTypes >") -> "std::shared_ptr< openmldb::sdk::SQLRequestRow >":
    return _sql_router_sdk.SQLRequestRow_CreateSQLRequestRowFromColumnTypes(types)

class SQLRequestRowBatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, schema: "std::shared_ptr< hybridse::sdk::Schema >", indices: "std::shared_ptr< openmldb::sdk::ColumnIndicesSet >"):
        _sql_router_sdk.SQLRequestRowBatch_swiginit(self, _sql_router_sdk.new_SQLRequestRowBatch(schema, indices))

    def AddRow(self, row: "std::shared_ptr< openmldb::sdk::SQLRequestRow >") -> "bool":
        return _sql_router_sdk.SQLRequestRowBatch_AddRow(self, row)

    def Size(self) -> "int":
        return _sql_router_sdk.SQLRequestRowBatch_Size(self)

    def common_column_indices(self) -> "std::set< size_t > const &":
        return _sql_router_sdk.SQLRequestRowBatch_common_column_indices(self)

    def GetCommonSlice(self) -> "std::string const *":
        return _sql_router_sdk.SQLRequestRowBatch_GetCommonSlice(self)

    def GetNonCommonSlice(self, idx: "uint32_t") -> "std::string const *":
        return _sql_router_sdk.SQLRequestRowBatch_GetNonCommonSlice(self, idx)

    def Clear(self) -> "void":
        return _sql_router_sdk.SQLRequestRowBatch_Clear(self)
    __swig_destroy__ = _sql_router_sdk.delete_SQLRequestRowBatch

# Register SQLRequestRowBatch in _sql_router_sdk:
_sql_router_sdk.SQLRequestRowBatch_swigregister(SQLRequestRowBatch)

class ColumnIndicesSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.ColumnIndicesSet_swiginit(self, _sql_router_sdk.new_ColumnIndicesSet(*args))

    def Empty(self) -> "bool":
        return _sql_router_sdk.ColumnIndicesSet_Empty(self)

    def AddCommonColumnIdx(self, idx: "size_t") -> "void":
        return _sql_router_sdk.ColumnIndicesSet_AddCommonColumnIdx(self, idx)
    __swig_destroy__ = _sql_router_sdk.delete_ColumnIndicesSet

# Register ColumnIndicesSet in _sql_router_sdk:
_sql_router_sdk.ColumnIndicesSet_swigregister(ColumnIndicesSet)

class Condition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", con: "hybridse::node::FnOperator", v: "std::optional< std::string > const &", type: "openmldb::type::DataType"):
        _sql_router_sdk.Condition_swiginit(self, _sql_router_sdk.new_Condition(name, con, v, type))
    col_name = property(_sql_router_sdk.Condition_col_name_get, _sql_router_sdk.Condition_col_name_set)
    op = property(_sql_router_sdk.Condition_op_get, _sql_router_sdk.Condition_op_set)
    val = property(_sql_router_sdk.Condition_val_get, _sql_router_sdk.Condition_val_set)
    data_type = property(_sql_router_sdk.Condition_data_type_get, _sql_router_sdk.Condition_data_type_set)
    __swig_destroy__ = _sql_router_sdk.delete_Condition

# Register Condition in _sql_router_sdk:
_sql_router_sdk.Condition_swigregister(Condition)

class SQLDeleteRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, db: "std::string const &", table_name: "std::string const &", condition_vec: "std::vector< openmldb::sdk::Condition,std::allocator< openmldb::sdk::Condition > > const &", parameter_vec: "std::vector< openmldb::sdk::Condition,std::allocator< openmldb::sdk::Condition > > const &"):
        _sql_router_sdk.SQLDeleteRow_swiginit(self, _sql_router_sdk.new_SQLDeleteRow(db, table_name, condition_vec, parameter_vec))

    def Reset(self) -> "void":
        return _sql_router_sdk.SQLDeleteRow_Reset(self)

    def SetString(self, pos: "int", val: "std::string const &") -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetString(self, pos, val)

    def SetBool(self, pos: "int", val: "bool") -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetBool(self, pos, val)

    def SetInt(self, pos: "int", val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetInt(self, pos, val)

    def SetTimestamp(self, pos: "int", val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetTimestamp(self, pos, val)

    def SetDate(self, *args) -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetDate(self, *args)

    def SetNULL(self, pos: "int") -> "bool":
        return _sql_router_sdk.SQLDeleteRow_SetNULL(self, pos)

    def Build(self) -> "bool":
        return _sql_router_sdk.SQLDeleteRow_Build(self)

    def GetDatabase(self) -> "std::string const &":
        return _sql_router_sdk.SQLDeleteRow_GetDatabase(self)

    def GetTableName(self) -> "std::string const &":
        return _sql_router_sdk.SQLDeleteRow_GetTableName(self)

    def GetValue(self) -> "std::vector< openmldb::sdk::Condition,std::allocator< openmldb::sdk::Condition > > const &":
        return _sql_router_sdk.SQLDeleteRow_GetValue(self)
    __swig_destroy__ = _sql_router_sdk.delete_SQLDeleteRow

# Register SQLDeleteRow in _sql_router_sdk:
_sql_router_sdk.SQLDeleteRow_swigregister(SQLDeleteRow)

class DefaultValueContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, default_map: "openmldb::sdk::DefaultValueMap const &"):
        _sql_router_sdk.DefaultValueContainer_swiginit(self, _sql_router_sdk.new_DefaultValueContainer(default_map))

    def GetAllPosition(self) -> "std::vector< uint32_t,std::allocator< uint32_t > >":
        return _sql_router_sdk.DefaultValueContainer_GetAllPosition(self)

    def IsValid(self, idx: "int") -> "bool":
        return _sql_router_sdk.DefaultValueContainer_IsValid(self, idx)

    def Size(self) -> "int":
        return _sql_router_sdk.DefaultValueContainer_Size(self)

    def IsNull(self, idx: "int") -> "bool":
        return _sql_router_sdk.DefaultValueContainer_IsNull(self, idx)

    def GetBool(self, idx: "int") -> "bool":
        return _sql_router_sdk.DefaultValueContainer_GetBool(self, idx)

    def GetSmallInt(self, idx: "int") -> "int16_t":
        return _sql_router_sdk.DefaultValueContainer_GetSmallInt(self, idx)

    def GetInt(self, idx: "int") -> "int32_t":
        return _sql_router_sdk.DefaultValueContainer_GetInt(self, idx)

    def GetBigInt(self, idx: "int") -> "int64_t":
        return _sql_router_sdk.DefaultValueContainer_GetBigInt(self, idx)

    def GetFloat(self, idx: "int") -> "float":
        return _sql_router_sdk.DefaultValueContainer_GetFloat(self, idx)

    def GetDouble(self, idx: "int") -> "double":
        return _sql_router_sdk.DefaultValueContainer_GetDouble(self, idx)

    def GetDate(self, idx: "int") -> "int32_t":
        return _sql_router_sdk.DefaultValueContainer_GetDate(self, idx)

    def GetTimeStamp(self, idx: "int") -> "int64_t":
        return _sql_router_sdk.DefaultValueContainer_GetTimeStamp(self, idx)

    def GetString(self, idx: "int") -> "std::string":
        return _sql_router_sdk.DefaultValueContainer_GetString(self, idx)
    __swig_destroy__ = _sql_router_sdk.delete_DefaultValueContainer

# Register DefaultValueContainer in _sql_router_sdk:
_sql_router_sdk.DefaultValueContainer_swigregister(DefaultValueContainer)

class SQLInsertRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.SQLInsertRow_swiginit(self, _sql_router_sdk.new_SQLInsertRow(*args))
    __swig_destroy__ = _sql_router_sdk.delete_SQLInsertRow

    def Init(self, str_length: "int") -> "bool":
        return _sql_router_sdk.SQLInsertRow_Init(self, str_length)

    def AppendBool(self, val: "bool") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendBool(self, val)

    def AppendInt32(self, val: "int32_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt32(self, val)

    def AppendInt16(self, val: "int16_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt16(self, val)

    def AppendInt64(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt64(self, val)

    def AppendTimestamp(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendTimestamp(self, val)

    def AppendFloat(self, val: "float") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendFloat(self, val)

    def AppendDouble(self, val: "double") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendDouble(self, val)

    def AppendDate(self, *args) -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendDate(self, *args)

    def AppendNULL(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendNULL(self)

    def IsComplete(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_IsComplete(self)

    def Build(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_Build(self)

    def GetDimensions(self) -> "std::map< uint32_t,std::vector< std::pair< std::string,uint32_t >,std::allocator< std::pair< std::string,uint32_t > > >,std::less< uint32_t >,std::allocator< std::pair< uint32_t const,std::vector< std::pair< std::string,uint32_t >,std::allocator< std::pair< std::string,uint32_t > > > > > > const &":
        return _sql_router_sdk.SQLInsertRow_GetDimensions(self)

    def GetRow(self) -> "std::string const &":
        return _sql_router_sdk.SQLInsertRow_GetRow(self)

    def GetSchema(self) -> "std::shared_ptr< hybridse::sdk::Schema > const":
        return _sql_router_sdk.SQLInsertRow_GetSchema(self)

    def GetHoleIdx(self) -> "std::vector< uint32_t,std::allocator< uint32_t > >":
        return _sql_router_sdk.SQLInsertRow_GetHoleIdx(self)

    def AppendString(self, *args) -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendString(self, *args)

    @staticmethod
    def GetHoleIdxArr(default_map: "openmldb::sdk::DefaultValueMap const &", stmt_column_idx_in_table: "VectorUint32", schema: "std::shared_ptr< ::hybridse::sdk::Schema > const &") -> "std::vector< uint32_t,std::allocator< uint32_t > >":
        return _sql_router_sdk.SQLInsertRow_GetHoleIdxArr(default_map, stmt_column_idx_in_table, schema)

    def GetDefaultValue(self) -> "std::shared_ptr< openmldb::sdk::DefaultValueContainer >":
        return _sql_router_sdk.SQLInsertRow_GetDefaultValue(self)

    def GetTableInfo(self) -> "::openmldb::nameserver::TableInfo":
        return _sql_router_sdk.SQLInsertRow_GetTableInfo(self)

    def IsPutIfAbsent(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_IsPutIfAbsent(self)

# Register SQLInsertRow in _sql_router_sdk:
_sql_router_sdk.SQLInsertRow_swigregister(SQLInsertRow)

def SQLInsertRow_GetHoleIdxArr(default_map: "openmldb::sdk::DefaultValueMap const &", stmt_column_idx_in_table: "VectorUint32", schema: "std::shared_ptr< ::hybridse::sdk::Schema > const &") -> "std::vector< uint32_t,std::allocator< uint32_t > >":
    return _sql_router_sdk.SQLInsertRow_GetHoleIdxArr(default_map, stmt_column_idx_in_table, schema)

class SQLInsertRows(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, table_info: "std::shared_ptr< ::openmldb::nameserver::TableInfo >", schema: "std::shared_ptr< hybridse::sdk::Schema >", default_map: "openmldb::sdk::DefaultValueMap", str_size: "uint32_t", hole_idx_arr: "VectorUint32", put_if_absent: "bool"):
        _sql_router_sdk.SQLInsertRows_swiginit(self, _sql_router_sdk.new_SQLInsertRows(table_info, schema, default_map, str_size, hole_idx_arr, put_if_absent))
    __swig_destroy__ = _sql_router_sdk.delete_SQLInsertRows

    def NewRow(self) -> "std::shared_ptr< openmldb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLInsertRows_NewRow(self)

    def GetCnt(self) -> "uint32_t":
        return _sql_router_sdk.SQLInsertRows_GetCnt(self)

    def GetRow(self, i: "uint32_t") -> "std::shared_ptr< openmldb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLInsertRows_GetRow(self, i)

    def GetSchema(self) -> "std::shared_ptr< hybridse::sdk::Schema > const":
        return _sql_router_sdk.SQLInsertRows_GetSchema(self)

    def GetHoleIdx(self) -> "std::vector< uint32_t,std::allocator< uint32_t > >":
        return _sql_router_sdk.SQLInsertRows_GetHoleIdx(self)

# Register SQLInsertRows in _sql_router_sdk:
_sql_router_sdk.SQLInsertRows_swigregister(SQLInsertRows)

class ScanOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    idx_name = property(_sql_router_sdk.ScanOption_idx_name_get, _sql_router_sdk.ScanOption_idx_name_set)
    limit = property(_sql_router_sdk.ScanOption_limit_get, _sql_router_sdk.ScanOption_limit_set)
    projection = property(_sql_router_sdk.ScanOption_projection_get, _sql_router_sdk.ScanOption_projection_set)

    def __init__(self):
        _sql_router_sdk.ScanOption_swiginit(self, _sql_router_sdk.new_ScanOption())
    __swig_destroy__ = _sql_router_sdk.delete_ScanOption

# Register ScanOption in _sql_router_sdk:
_sql_router_sdk.ScanOption_swigregister(ScanOption)

class ScanFuture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ScanFuture

    def GetResultSet(self, status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.ScanFuture_GetResultSet(self, status)

    def IsDone(self) -> "bool":
        return _sql_router_sdk.ScanFuture_IsDone(self)

# Register ScanFuture in _sql_router_sdk:
_sql_router_sdk.ScanFuture_swigregister(ScanFuture)

class TableReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_TableReader

    def Scan(self, db: "std::string const &", table: "std::string const &", key: "std::string const &", st: "int64_t", et: "int64_t", so: "ScanOption", status: "Status") -> "std::shared_ptr< hybridse::sdk::ResultSet >":
        return _sql_router_sdk.TableReader_Scan(self, db, table, key, st, et, so, status)

    def AsyncScan(self, db: "std::string const &", table: "std::string const &", key: "std::string const &", st: "int64_t", et: "int64_t", so: "ScanOption", timeout_ms: "int64_t", status: "Status") -> "std::shared_ptr< openmldb::sdk::ScanFuture >":
        return _sql_router_sdk.TableReader_AsyncScan(self, db, table, key, st, et, so, timeout_ms, status)

# Register TableReader in _sql_router_sdk:
_sql_router_sdk.TableReader_swigregister(TableReader)

class ColumnDescPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.ColumnDescPair_swiginit(self, _sql_router_sdk.new_ColumnDescPair(*args))
    first = property(_sql_router_sdk.ColumnDescPair_first_get, _sql_router_sdk.ColumnDescPair_first_set)
    second = property(_sql_router_sdk.ColumnDescPair_second_get, _sql_router_sdk.ColumnDescPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _sql_router_sdk.delete_ColumnDescPair

# Register ColumnDescPair in _sql_router_sdk:
_sql_router_sdk.ColumnDescPair_swigregister(ColumnDescPair)

class ColumnDescVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.ColumnDescVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.ColumnDescVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.ColumnDescVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::size_type":
        return _sql_router_sdk.ColumnDescVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::difference_type", j: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::difference_type") -> "std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > *":
        return _sql_router_sdk.ColumnDescVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.ColumnDescVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::difference_type", j: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::difference_type") -> "void":
        return _sql_router_sdk.ColumnDescVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.ColumnDescVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::value_type const &":
        return _sql_router_sdk.ColumnDescVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.ColumnDescVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::value_type":
        return _sql_router_sdk.ColumnDescVector_pop(self)

    def append(self, x: "ColumnDescPair") -> "void":
        return _sql_router_sdk.ColumnDescVector_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.ColumnDescVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::size_type":
        return _sql_router_sdk.ColumnDescVector_size(self)

    def swap(self, v: "ColumnDescVector") -> "void":
        return _sql_router_sdk.ColumnDescVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::iterator":
        return _sql_router_sdk.ColumnDescVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::iterator":
        return _sql_router_sdk.ColumnDescVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::reverse_iterator":
        return _sql_router_sdk.ColumnDescVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::reverse_iterator":
        return _sql_router_sdk.ColumnDescVector_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.ColumnDescVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::allocator_type":
        return _sql_router_sdk.ColumnDescVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.ColumnDescVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::iterator":
        return _sql_router_sdk.ColumnDescVector_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.ColumnDescVector_swiginit(self, _sql_router_sdk.new_ColumnDescVector(*args))

    def push_back(self, x: "ColumnDescPair") -> "void":
        return _sql_router_sdk.ColumnDescVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::value_type const &":
        return _sql_router_sdk.ColumnDescVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::value_type const &":
        return _sql_router_sdk.ColumnDescVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::size_type", x: "ColumnDescPair") -> "void":
        return _sql_router_sdk.ColumnDescVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.ColumnDescVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.ColumnDescVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::size_type") -> "void":
        return _sql_router_sdk.ColumnDescVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,enum hybridse::sdk::DataType > >::size_type":
        return _sql_router_sdk.ColumnDescVector_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_ColumnDescVector

# Register ColumnDescVector in _sql_router_sdk:
_sql_router_sdk.ColumnDescVector_swigregister(ColumnDescVector)

class TableColumnDescPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.TableColumnDescPair_swiginit(self, _sql_router_sdk.new_TableColumnDescPair(*args))
    first = property(_sql_router_sdk.TableColumnDescPair_first_get, _sql_router_sdk.TableColumnDescPair_first_set)
    second = property(_sql_router_sdk.TableColumnDescPair_second_get, _sql_router_sdk.TableColumnDescPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _sql_router_sdk.delete_TableColumnDescPair

# Register TableColumnDescPair in _sql_router_sdk:
_sql_router_sdk.TableColumnDescPair_swigregister(TableColumnDescPair)

class TableColumnDescPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.TableColumnDescPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.TableColumnDescPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.TableColumnDescPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::size_type":
        return _sql_router_sdk.TableColumnDescPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::difference_type") -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > >,std::allocator< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > > > > *":
        return _sql_router_sdk.TableColumnDescPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::difference_type") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::value_type const &":
        return _sql_router_sdk.TableColumnDescPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::value_type":
        return _sql_router_sdk.TableColumnDescPairVector_pop(self)

    def append(self, x: "TableColumnDescPair") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.TableColumnDescPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::size_type":
        return _sql_router_sdk.TableColumnDescPairVector_size(self)

    def swap(self, v: "TableColumnDescPairVector") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::iterator":
        return _sql_router_sdk.TableColumnDescPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::iterator":
        return _sql_router_sdk.TableColumnDescPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::reverse_iterator":
        return _sql_router_sdk.TableColumnDescPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::reverse_iterator":
        return _sql_router_sdk.TableColumnDescPairVector_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::allocator_type":
        return _sql_router_sdk.TableColumnDescPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::iterator":
        return _sql_router_sdk.TableColumnDescPairVector_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.TableColumnDescPairVector_swiginit(self, _sql_router_sdk.new_TableColumnDescPairVector(*args))

    def push_back(self, x: "TableColumnDescPair") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::value_type const &":
        return _sql_router_sdk.TableColumnDescPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::value_type const &":
        return _sql_router_sdk.TableColumnDescPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::size_type", x: "TableColumnDescPair") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::size_type") -> "void":
        return _sql_router_sdk.TableColumnDescPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > >::size_type":
        return _sql_router_sdk.TableColumnDescPairVector_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_TableColumnDescPairVector

# Register TableColumnDescPairVector in _sql_router_sdk:
_sql_router_sdk.TableColumnDescPairVector_swigregister(TableColumnDescPairVector)

class DBTableColumnDescPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.DBTableColumnDescPair_swiginit(self, _sql_router_sdk.new_DBTableColumnDescPair(*args))
    first = property(_sql_router_sdk.DBTableColumnDescPair_first_get, _sql_router_sdk.DBTableColumnDescPair_first_set)
    second = property(_sql_router_sdk.DBTableColumnDescPair_second_get, _sql_router_sdk.DBTableColumnDescPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _sql_router_sdk.delete_DBTableColumnDescPair

# Register DBTableColumnDescPair in _sql_router_sdk:
_sql_router_sdk.DBTableColumnDescPair_swigregister(DBTableColumnDescPair)

class DBTableColumnDescPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.DBTableColumnDescPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.DBTableColumnDescPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.DBTableColumnDescPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::size_type":
        return _sql_router_sdk.DBTableColumnDescPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::difference_type") -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > >,std::allocator< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > > > > >,std::allocator< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > >,std::allocator< std::pair< std::string,std::vector< std::pair< std::string,hybridse::sdk::DataType >,std::allocator< std::pair< std::string,hybridse::sdk::DataType > > > > > > > > > *":
        return _sql_router_sdk.DBTableColumnDescPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::difference_type") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::value_type const &":
        return _sql_router_sdk.DBTableColumnDescPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::value_type":
        return _sql_router_sdk.DBTableColumnDescPairVector_pop(self)

    def append(self, x: "DBTableColumnDescPair") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.DBTableColumnDescPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::size_type":
        return _sql_router_sdk.DBTableColumnDescPairVector_size(self)

    def swap(self, v: "DBTableColumnDescPairVector") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::iterator":
        return _sql_router_sdk.DBTableColumnDescPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::iterator":
        return _sql_router_sdk.DBTableColumnDescPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::reverse_iterator":
        return _sql_router_sdk.DBTableColumnDescPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::reverse_iterator":
        return _sql_router_sdk.DBTableColumnDescPairVector_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::allocator_type":
        return _sql_router_sdk.DBTableColumnDescPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::iterator":
        return _sql_router_sdk.DBTableColumnDescPairVector_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.DBTableColumnDescPairVector_swiginit(self, _sql_router_sdk.new_DBTableColumnDescPairVector(*args))

    def push_back(self, x: "DBTableColumnDescPair") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::value_type const &":
        return _sql_router_sdk.DBTableColumnDescPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::value_type const &":
        return _sql_router_sdk.DBTableColumnDescPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::size_type", x: "DBTableColumnDescPair") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::size_type") -> "void":
        return _sql_router_sdk.DBTableColumnDescPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::vector< std::pair< std::string,enum hybridse::sdk::DataType > > > > > >::size_type":
        return _sql_router_sdk.DBTableColumnDescPairVector_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_DBTableColumnDescPairVector

# Register DBTableColumnDescPairVector in _sql_router_sdk:
_sql_router_sdk.DBTableColumnDescPairVector_swigregister(DBTableColumnDescPairVector)

class DBTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.DBTable_swiginit(self, _sql_router_sdk.new_DBTable(*args))
    first = property(_sql_router_sdk.DBTable_first_get, _sql_router_sdk.DBTable_first_set)
    second = property(_sql_router_sdk.DBTable_second_get, _sql_router_sdk.DBTable_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _sql_router_sdk.delete_DBTable

# Register DBTable in _sql_router_sdk:
_sql_router_sdk.DBTable_swigregister(DBTable)

class DBTableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.DBTableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.DBTableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.DBTableVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _sql_router_sdk.DBTableVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *":
        return _sql_router_sdk.DBTableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.DBTableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "void":
        return _sql_router_sdk.DBTableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.DBTableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _sql_router_sdk.DBTableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.DBTableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::string > >::value_type":
        return _sql_router_sdk.DBTableVector_pop(self)

    def append(self, x: "DBTable") -> "void":
        return _sql_router_sdk.DBTableVector_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.DBTableVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _sql_router_sdk.DBTableVector_size(self)

    def swap(self, v: "DBTableVector") -> "void":
        return _sql_router_sdk.DBTableVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _sql_router_sdk.DBTableVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _sql_router_sdk.DBTableVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _sql_router_sdk.DBTableVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _sql_router_sdk.DBTableVector_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.DBTableVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::string > >::allocator_type":
        return _sql_router_sdk.DBTableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.DBTableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _sql_router_sdk.DBTableVector_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.DBTableVector_swiginit(self, _sql_router_sdk.new_DBTableVector(*args))

    def push_back(self, x: "DBTable") -> "void":
        return _sql_router_sdk.DBTableVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _sql_router_sdk.DBTableVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _sql_router_sdk.DBTableVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::string > >::size_type", x: "DBTable") -> "void":
        return _sql_router_sdk.DBTableVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.DBTableVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.DBTableVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::string > >::size_type") -> "void":
        return _sql_router_sdk.DBTableVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _sql_router_sdk.DBTableVector_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_DBTableVector

# Register DBTableVector in _sql_router_sdk:
_sql_router_sdk.DBTableVector_swigregister(DBTableVector)

class DAGNodeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.DAGNodeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sql_router_sdk.DAGNodeList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sql_router_sdk.DAGNodeList___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::size_type":
        return _sql_router_sdk.DAGNodeList___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::difference_type", j: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::difference_type") -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode >,std::allocator< std::shared_ptr< openmldb::sdk::DAGNode > > > *":
        return _sql_router_sdk.DAGNodeList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sql_router_sdk.DAGNodeList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::difference_type", j: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::difference_type") -> "void":
        return _sql_router_sdk.DAGNodeList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sql_router_sdk.DAGNodeList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &":
        return _sql_router_sdk.DAGNodeList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sql_router_sdk.DAGNodeList___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type":
        return _sql_router_sdk.DAGNodeList_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &") -> "void":
        return _sql_router_sdk.DAGNodeList_append(self, x)

    def empty(self) -> "bool":
        return _sql_router_sdk.DAGNodeList_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::size_type":
        return _sql_router_sdk.DAGNodeList_size(self)

    def swap(self, v: "DAGNodeList") -> "void":
        return _sql_router_sdk.DAGNodeList_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::iterator":
        return _sql_router_sdk.DAGNodeList_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::iterator":
        return _sql_router_sdk.DAGNodeList_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::reverse_iterator":
        return _sql_router_sdk.DAGNodeList_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::reverse_iterator":
        return _sql_router_sdk.DAGNodeList_rend(self)

    def clear(self) -> "void":
        return _sql_router_sdk.DAGNodeList_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::allocator_type":
        return _sql_router_sdk.DAGNodeList_get_allocator(self)

    def pop_back(self) -> "void":
        return _sql_router_sdk.DAGNodeList_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::iterator":
        return _sql_router_sdk.DAGNodeList_erase(self, *args)

    def __init__(self, *args):
        _sql_router_sdk.DAGNodeList_swiginit(self, _sql_router_sdk.new_DAGNodeList(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &") -> "void":
        return _sql_router_sdk.DAGNodeList_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &":
        return _sql_router_sdk.DAGNodeList_front(self)

    def back(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &":
        return _sql_router_sdk.DAGNodeList_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::size_type", x: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::value_type const &") -> "void":
        return _sql_router_sdk.DAGNodeList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sql_router_sdk.DAGNodeList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sql_router_sdk.DAGNodeList_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::size_type") -> "void":
        return _sql_router_sdk.DAGNodeList_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< openmldb::sdk::DAGNode > >::size_type":
        return _sql_router_sdk.DAGNodeList_capacity(self)
    __swig_destroy__ = _sql_router_sdk.delete_DAGNodeList

# Register DAGNodeList in _sql_router_sdk:
_sql_router_sdk.DAGNodeList_swigregister(DAGNodeList)



